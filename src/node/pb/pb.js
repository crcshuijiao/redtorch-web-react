/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.xyz = (function() {

    /**
     * Namespace xyz.
     * @exports xyz
     * @namespace
     */
    var xyz = {};

    xyz.redtorch = (function() {

        /**
         * Namespace redtorch.
         * @memberof xyz
         * @namespace
         */
        var redtorch = {};

        redtorch.pb = (function() {

            /**
             * Namespace pb.
             * @memberof xyz.redtorch
             * @namespace
             */
            var pb = {};

            /**
             * CurrencyEnum enum.
             * @name xyz.redtorch.pb.CurrencyEnum
             * @enum {string}
             * @property {number} UNKNOWN_CURRENCY=0 UNKNOWN_CURRENCY value
             * @property {number} USD=1 USD value
             * @property {number} CNY=2 CNY value
             * @property {number} CNH=3 CNH value
             * @property {number} HKD=4 HKD value
             * @property {number} JPY=5 JPY value
             * @property {number} EUR=6 EUR value
             * @property {number} GBP=7 GBP value
             * @property {number} DEM=8 DEM value
             * @property {number} CHF=9 CHF value
             * @property {number} FRF=10 FRF value
             * @property {number} CAD=11 CAD value
             * @property {number} AUD=12 AUD value
             * @property {number} ATS=13 ATS value
             * @property {number} FIM=14 FIM value
             * @property {number} BEF=15 BEF value
             * @property {number} THB=16 THB value
             * @property {number} IEP=17 IEP value
             * @property {number} ITL=18 ITL value
             * @property {number} LUF=19 LUF value
             * @property {number} NLG=20 NLG value
             * @property {number} PTE=21 PTE value
             * @property {number} ESP=22 ESP value
             * @property {number} IDR=23 IDR value
             * @property {number} MYR=24 MYR value
             * @property {number} NZD=25 NZD value
             * @property {number} PHP=26 PHP value
             * @property {number} SUR=27 SUR value
             * @property {number} SGD=28 SGD value
             * @property {number} KRW=29 KRW value
             */
            pb.CurrencyEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN_CURRENCY"] = 0;
                values[valuesById[1] = "USD"] = 1;
                values[valuesById[2] = "CNY"] = 2;
                values[valuesById[3] = "CNH"] = 3;
                values[valuesById[4] = "HKD"] = 4;
                values[valuesById[5] = "JPY"] = 5;
                values[valuesById[6] = "EUR"] = 6;
                values[valuesById[7] = "GBP"] = 7;
                values[valuesById[8] = "DEM"] = 8;
                values[valuesById[9] = "CHF"] = 9;
                values[valuesById[10] = "FRF"] = 10;
                values[valuesById[11] = "CAD"] = 11;
                values[valuesById[12] = "AUD"] = 12;
                values[valuesById[13] = "ATS"] = 13;
                values[valuesById[14] = "FIM"] = 14;
                values[valuesById[15] = "BEF"] = 15;
                values[valuesById[16] = "THB"] = 16;
                values[valuesById[17] = "IEP"] = 17;
                values[valuesById[18] = "ITL"] = 18;
                values[valuesById[19] = "LUF"] = 19;
                values[valuesById[20] = "NLG"] = 20;
                values[valuesById[21] = "PTE"] = 21;
                values[valuesById[22] = "ESP"] = 22;
                values[valuesById[23] = "IDR"] = 23;
                values[valuesById[24] = "MYR"] = 24;
                values[valuesById[25] = "NZD"] = 25;
                values[valuesById[26] = "PHP"] = 26;
                values[valuesById[27] = "SUR"] = 27;
                values[valuesById[28] = "SGD"] = 28;
                values[valuesById[29] = "KRW"] = 29;
                return values;
            })();

            /**
             * ExchangeEnum enum.
             * @name xyz.redtorch.pb.ExchangeEnum
             * @enum {string}
             * @property {number} UNKNOWN_EXCHANGE=0 UNKNOWN_EXCHANGE value
             * @property {number} SSE=1 SSE value
             * @property {number} SZSE=2 SZSE value
             * @property {number} CFFEX=3 CFFEX value
             * @property {number} SHFE=4 SHFE value
             * @property {number} CZCE=5 CZCE value
             * @property {number} DCE=6 DCE value
             * @property {number} SGE=7 SGE value
             * @property {number} INE=8 INE value
             * @property {number} SEHK=9 SEHK value
             * @property {number} HKFE=10 HKFE value
             * @property {number} SGX=11 SGX value
             * @property {number} NYBOT=12 NYBOT value
             * @property {number} NYMEX=13 NYMEX value
             * @property {number} COMEX=14 COMEX value
             * @property {number} CME=15 CME value
             * @property {number} CFE=16 CFE value
             * @property {number} GLOBEX=17 GLOBEX value
             * @property {number} ICE=18 ICE value
             * @property {number} IPE=19 IPE value
             * @property {number} LME=20 LME value
             * @property {number} IDEALPRO=21 IDEALPRO value
             * @property {number} OANDA=22 OANDA value
             * @property {number} FXCM=23 FXCM value
             * @property {number} SMART=24 SMART value
             */
            pb.ExchangeEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN_EXCHANGE"] = 0;
                values[valuesById[1] = "SSE"] = 1;
                values[valuesById[2] = "SZSE"] = 2;
                values[valuesById[3] = "CFFEX"] = 3;
                values[valuesById[4] = "SHFE"] = 4;
                values[valuesById[5] = "CZCE"] = 5;
                values[valuesById[6] = "DCE"] = 6;
                values[valuesById[7] = "SGE"] = 7;
                values[valuesById[8] = "INE"] = 8;
                values[valuesById[9] = "SEHK"] = 9;
                values[valuesById[10] = "HKFE"] = 10;
                values[valuesById[11] = "SGX"] = 11;
                values[valuesById[12] = "NYBOT"] = 12;
                values[valuesById[13] = "NYMEX"] = 13;
                values[valuesById[14] = "COMEX"] = 14;
                values[valuesById[15] = "CME"] = 15;
                values[valuesById[16] = "CFE"] = 16;
                values[valuesById[17] = "GLOBEX"] = 17;
                values[valuesById[18] = "ICE"] = 18;
                values[valuesById[19] = "IPE"] = 19;
                values[valuesById[20] = "LME"] = 20;
                values[valuesById[21] = "IDEALPRO"] = 21;
                values[valuesById[22] = "OANDA"] = 22;
                values[valuesById[23] = "FXCM"] = 23;
                values[valuesById[24] = "SMART"] = 24;
                return values;
            })();

            /**
             * ProductTypeEnum enum.
             * @name xyz.redtorch.pb.ProductTypeEnum
             * @enum {string}
             * @property {number} UNKNOWN_PRODUCT_TYPE=0 UNKNOWN_PRODUCT_TYPE value
             * @property {number} EQUITY=1 EQUITY value
             * @property {number} FUTURES=2 FUTURES value
             * @property {number} OPTION=3 OPTION value
             * @property {number} INDEX=4 INDEX value
             * @property {number} COMBINATION=5 COMBINATION value
             * @property {number} BOND=6 BOND value
             * @property {number} FOREX=7 FOREX value
             * @property {number} SPOT=8 SPOT value
             * @property {number} DEFER=9 DEFER value
             * @property {number} ETF=10 ETF value
             * @property {number} WARRANT=11 WARRANT value
             * @property {number} SPREAD=12 SPREAD value
             * @property {number} FUND=13 FUND value
             * @property {number} EFP=14 EFP value
             * @property {number} SPOT_OPTION=15 SPOT_OPTION value
             */
            pb.ProductTypeEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN_PRODUCT_TYPE"] = 0;
                values[valuesById[1] = "EQUITY"] = 1;
                values[valuesById[2] = "FUTURES"] = 2;
                values[valuesById[3] = "OPTION"] = 3;
                values[valuesById[4] = "INDEX"] = 4;
                values[valuesById[5] = "COMBINATION"] = 5;
                values[valuesById[6] = "BOND"] = 6;
                values[valuesById[7] = "FOREX"] = 7;
                values[valuesById[8] = "SPOT"] = 8;
                values[valuesById[9] = "DEFER"] = 9;
                values[valuesById[10] = "ETF"] = 10;
                values[valuesById[11] = "WARRANT"] = 11;
                values[valuesById[12] = "SPREAD"] = 12;
                values[valuesById[13] = "FUND"] = 13;
                values[valuesById[14] = "EFP"] = 14;
                values[valuesById[15] = "SPOT_OPTION"] = 15;
                return values;
            })();

            /**
             * OptionTypeEnum enum.
             * @name xyz.redtorch.pb.OptionTypeEnum
             * @enum {string}
             * @property {number} UNKNOWN_OPTION_TYPE=0 UNKNOWN_OPTION_TYPE value
             * @property {number} CALL=1 CALL value
             * @property {number} PUT=2 PUT value
             */
            pb.OptionTypeEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN_OPTION_TYPE"] = 0;
                values[valuesById[1] = "CALL"] = 1;
                values[valuesById[2] = "PUT"] = 2;
                return values;
            })();

            /**
             * DirectionEnum enum.
             * @name xyz.redtorch.pb.DirectionEnum
             * @enum {string}
             * @property {number} UNKNOWN_DIRECTION=0 UNKNOWN_DIRECTION value
             * @property {number} LONG=1 LONG value
             * @property {number} SHORT=2 SHORT value
             * @property {number} NET=3 NET value
             */
            pb.DirectionEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN_DIRECTION"] = 0;
                values[valuesById[1] = "LONG"] = 1;
                values[valuesById[2] = "SHORT"] = 2;
                values[valuesById[3] = "NET"] = 3;
                return values;
            })();

            /**
             * OffsetEnum enum.
             * @name xyz.redtorch.pb.OffsetEnum
             * @enum {string}
             * @property {number} UNKNOWN_OFFSET=0 UNKNOWN_OFFSET value
             * @property {number} OFFSET_NONE=1 OFFSET_NONE value
             * @property {number} OPEN=2 OPEN value
             * @property {number} CLOSE=3 CLOSE value
             * @property {number} CLOSE_TODAY=4 CLOSE_TODAY value
             * @property {number} CLOSE_YESTERDAY=5 CLOSE_YESTERDAY value
             */
            pb.OffsetEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN_OFFSET"] = 0;
                values[valuesById[1] = "OFFSET_NONE"] = 1;
                values[valuesById[2] = "OPEN"] = 2;
                values[valuesById[3] = "CLOSE"] = 3;
                values[valuesById[4] = "CLOSE_TODAY"] = 4;
                values[valuesById[5] = "CLOSE_YESTERDAY"] = 5;
                return values;
            })();

            /**
             * OrderTypeEnum enum.
             * @name xyz.redtorch.pb.OrderTypeEnum
             * @enum {string}
             * @property {number} UNKNOWN_ORDER_TYPE=0 UNKNOWN_ORDER_TYPE value
             * @property {number} SELL_ORDER=1 SELL_ORDER value
             * @property {number} BUY_ORDER=2 BUY_ORDER value
             * @property {number} SHORT_ORDER=3 SHORT_ORDER value
             * @property {number} COVER_ORDER=4 COVER_ORDER value
             * @property {number} SELL_TD_ORDER=5 SELL_TD_ORDER value
             * @property {number} SELL_YD_ORDER=6 SELL_YD_ORDER value
             * @property {number} COVER_TD_ORDER=7 COVER_TD_ORDER value
             * @property {number} COVER_YD_ORDER=8 COVER_YD_ORDER value
             */
            pb.OrderTypeEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN_ORDER_TYPE"] = 0;
                values[valuesById[1] = "SELL_ORDER"] = 1;
                values[valuesById[2] = "BUY_ORDER"] = 2;
                values[valuesById[3] = "SHORT_ORDER"] = 3;
                values[valuesById[4] = "COVER_ORDER"] = 4;
                values[valuesById[5] = "SELL_TD_ORDER"] = 5;
                values[valuesById[6] = "SELL_YD_ORDER"] = 6;
                values[valuesById[7] = "COVER_TD_ORDER"] = 7;
                values[valuesById[8] = "COVER_YD_ORDER"] = 8;
                return values;
            })();

            /**
             * StrategyEngineTypeEnum enum.
             * @name xyz.redtorch.pb.StrategyEngineTypeEnum
             * @enum {string}
             * @property {number} TREADING=0 TREADING value
             * @property {number} BACKTESTING=1 BACKTESTING value
             */
            pb.StrategyEngineTypeEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "TREADING"] = 0;
                values[valuesById[1] = "BACKTESTING"] = 1;
                return values;
            })();

            /**
             * PriceTypeEnum enum.
             * @name xyz.redtorch.pb.PriceTypeEnum
             * @enum {string}
             * @property {number} UNKNOWN_PRICE_TYPE=0 UNKNOWN_PRICE_TYPE value
             * @property {number} LIMIT=1 LIMIT value
             * @property {number} MARKET=2 MARKET value
             * @property {number} FAK=3 FAK value
             * @property {number} FOK=4 FOK value
             */
            pb.PriceTypeEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN_PRICE_TYPE"] = 0;
                values[valuesById[1] = "LIMIT"] = 1;
                values[valuesById[2] = "MARKET"] = 2;
                values[valuesById[3] = "FAK"] = 3;
                values[valuesById[4] = "FOK"] = 4;
                return values;
            })();

            /**
             * GatewayTypeEnum enum.
             * @name xyz.redtorch.pb.GatewayTypeEnum
             * @enum {string}
             * @property {number} TRADE_AND_MARKET_DATA=0 TRADE_AND_MARKET_DATA value
             * @property {number} MARKET_DATA=1 MARKET_DATA value
             * @property {number} TRADE_ONLY=2 TRADE_ONLY value
             */
            pb.GatewayTypeEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "TRADE_AND_MARKET_DATA"] = 0;
                values[valuesById[1] = "MARKET_DATA"] = 1;
                values[valuesById[2] = "TRADE_ONLY"] = 2;
                return values;
            })();

            /**
             * GatewayAdapterTypeEnum enum.
             * @name xyz.redtorch.pb.GatewayAdapterTypeEnum
             * @enum {string}
             * @property {number} CTP=0 CTP value
             * @property {number} IB=1 IB value
             */
            pb.GatewayAdapterTypeEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CTP"] = 0;
                values[valuesById[1] = "IB"] = 1;
                return values;
            })();

            /**
             * ConnectStatusEnum enum.
             * @name xyz.redtorch.pb.ConnectStatusEnum
             * @enum {string}
             * @property {number} DISCONNECTED=0 DISCONNECTED value
             * @property {number} CONNECTED=1 CONNECTED value
             * @property {number} DISCONNECTING=2 DISCONNECTING value
             * @property {number} CONNECTING=3 CONNECTING value
             */
            pb.ConnectStatusEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DISCONNECTED"] = 0;
                values[valuesById[1] = "CONNECTED"] = 1;
                values[valuesById[2] = "DISCONNECTING"] = 2;
                values[valuesById[3] = "CONNECTING"] = 3;
                return values;
            })();

            /**
             * OrderStatusEnum enum.
             * @name xyz.redtorch.pb.OrderStatusEnum
             * @enum {string}
             * @property {number} UNKNOWN_ORDER_STATUS=0 UNKNOWN_ORDER_STATUS value
             * @property {number} NOT_TRADED=1 NOT_TRADED value
             * @property {number} PART_TRADED=2 PART_TRADED value
             * @property {number} ALL_TRADED=3 ALL_TRADED value
             * @property {number} CANCELLED=4 CANCELLED value
             * @property {number} REJECTED=5 REJECTED value
             * @property {number} SUBMITTING=6 SUBMITTING value
             */
            pb.OrderStatusEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN_ORDER_STATUS"] = 0;
                values[valuesById[1] = "NOT_TRADED"] = 1;
                values[valuesById[2] = "PART_TRADED"] = 2;
                values[valuesById[3] = "ALL_TRADED"] = 3;
                values[valuesById[4] = "CANCELLED"] = 4;
                values[valuesById[5] = "REJECTED"] = 5;
                values[valuesById[6] = "SUBMITTING"] = 6;
                return values;
            })();

            /**
             * TimeConditionTypeEnum enum.
             * @name xyz.redtorch.pb.TimeConditionTypeEnum
             * @enum {string}
             * @property {number} UNKNOWN_TIME_CONDITION_TYPE=0 UNKNOWN_TIME_CONDITION_TYPE value
             * @property {number} GTC=1 GTC value
             * @property {number} GFD=2 GFD value
             */
            pb.TimeConditionTypeEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN_TIME_CONDITION_TYPE"] = 0;
                values[valuesById[1] = "GTC"] = 1;
                values[valuesById[2] = "GFD"] = 2;
                return values;
            })();

            /**
             * CommonStatusEnum enum.
             * @name xyz.redtorch.pb.CommonStatusEnum
             * @enum {string}
             * @property {number} SUCCESS=0 SUCCESS value
             * @property {number} INFO=1 INFO value
             * @property {number} WARN=2 WARN value
             * @property {number} ERROR=3 ERROR value
             */
            pb.CommonStatusEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "SUCCESS"] = 0;
                values[valuesById[1] = "INFO"] = 1;
                values[valuesById[2] = "WARN"] = 2;
                values[valuesById[3] = "ERROR"] = 3;
                return values;
            })();

            /**
             * LogLevelEnum enum.
             * @name xyz.redtorch.pb.LogLevelEnum
             * @enum {string}
             * @property {number} ALL_LOG_LEVEL=0 ALL_LOG_LEVEL value
             * @property {number} ERROR_LOG_LEVEL=40000 ERROR_LOG_LEVEL value
             * @property {number} WARN_LOG_LEVEL=30000 WARN_LOG_LEVEL value
             * @property {number} INFO_LOG_LEVEL=20000 INFO_LOG_LEVEL value
             * @property {number} DEBUG_LOG_LEVEL=10000 DEBUG_LOG_LEVEL value
             * @property {number} TRACE_LOG_LEVEL=5000 TRACE_LOG_LEVEL value
             */
            pb.LogLevelEnum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ALL_LOG_LEVEL"] = 0;
                values[valuesById[40000] = "ERROR_LOG_LEVEL"] = 40000;
                values[valuesById[30000] = "WARN_LOG_LEVEL"] = 30000;
                values[valuesById[20000] = "INFO_LOG_LEVEL"] = 20000;
                values[valuesById[10000] = "DEBUG_LOG_LEVEL"] = 10000;
                values[valuesById[5000] = "TRACE_LOG_LEVEL"] = 5000;
                return values;
            })();

            pb.GatewayField = (function() {

                /**
                 * Properties of a GatewayField.
                 * @memberof xyz.redtorch.pb
                 * @interface IGatewayField
                 * @property {string|null} [gatewayId] GatewayField gatewayId
                 * @property {string|null} [name] GatewayField name
                 * @property {string|null} [description] GatewayField description
                 * @property {xyz.redtorch.pb.GatewayTypeEnum|null} [gatewayType] GatewayField gatewayType
                 * @property {xyz.redtorch.pb.GatewayAdapterTypeEnum|null} [gatewayAdapterType] GatewayField gatewayAdapterType
                 * @property {xyz.redtorch.pb.ConnectStatusEnum|null} [status] GatewayField status
                 */

                /**
                 * Constructs a new GatewayField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a GatewayField.
                 * @implements IGatewayField
                 * @constructor
                 * @param {xyz.redtorch.pb.IGatewayField=} [properties] Properties to set
                 */
                function GatewayField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GatewayField gatewayId.
                 * @member {string} gatewayId
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @instance
                 */
                GatewayField.prototype.gatewayId = "";

                /**
                 * GatewayField name.
                 * @member {string} name
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @instance
                 */
                GatewayField.prototype.name = "";

                /**
                 * GatewayField description.
                 * @member {string} description
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @instance
                 */
                GatewayField.prototype.description = "";

                /**
                 * GatewayField gatewayType.
                 * @member {xyz.redtorch.pb.GatewayTypeEnum} gatewayType
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @instance
                 */
                GatewayField.prototype.gatewayType = 0;

                /**
                 * GatewayField gatewayAdapterType.
                 * @member {xyz.redtorch.pb.GatewayAdapterTypeEnum} gatewayAdapterType
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @instance
                 */
                GatewayField.prototype.gatewayAdapterType = 0;

                /**
                 * GatewayField status.
                 * @member {xyz.redtorch.pb.ConnectStatusEnum} status
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @instance
                 */
                GatewayField.prototype.status = 0;

                /**
                 * Creates a new GatewayField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @static
                 * @param {xyz.redtorch.pb.IGatewayField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.GatewayField} GatewayField instance
                 */
                GatewayField.create = function create(properties) {
                    return new GatewayField(properties);
                };

                /**
                 * Encodes the specified GatewayField message. Does not implicitly {@link xyz.redtorch.pb.GatewayField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @static
                 * @param {xyz.redtorch.pb.IGatewayField} message GatewayField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GatewayField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.gatewayId);
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    if (message.description != null && message.hasOwnProperty("description"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                    if (message.gatewayType != null && message.hasOwnProperty("gatewayType"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gatewayType);
                    if (message.gatewayAdapterType != null && message.hasOwnProperty("gatewayAdapterType"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gatewayAdapterType);
                    if (message.status != null && message.hasOwnProperty("status"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.status);
                    return writer;
                };

                /**
                 * Encodes the specified GatewayField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.GatewayField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @static
                 * @param {xyz.redtorch.pb.IGatewayField} message GatewayField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GatewayField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GatewayField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.GatewayField} GatewayField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GatewayField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.GatewayField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.gatewayId = reader.string();
                            break;
                        case 2:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.description = reader.string();
                            break;
                        case 4:
                            message.gatewayType = reader.int32();
                            break;
                        case 5:
                            message.gatewayAdapterType = reader.int32();
                            break;
                        case 6:
                            message.status = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GatewayField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.GatewayField} GatewayField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GatewayField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GatewayField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GatewayField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        if (!$util.isString(message.gatewayId))
                            return "gatewayId: string expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.gatewayType != null && message.hasOwnProperty("gatewayType"))
                        switch (message.gatewayType) {
                        default:
                            return "gatewayType: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.gatewayAdapterType != null && message.hasOwnProperty("gatewayAdapterType"))
                        switch (message.gatewayAdapterType) {
                        default:
                            return "gatewayAdapterType: enum value expected";
                        case 0:
                        case 1:
                            break;
                        }
                    if (message.status != null && message.hasOwnProperty("status"))
                        switch (message.status) {
                        default:
                            return "status: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates a GatewayField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.GatewayField} GatewayField
                 */
                GatewayField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.GatewayField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.GatewayField();
                    if (object.gatewayId != null)
                        message.gatewayId = String(object.gatewayId);
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.description != null)
                        message.description = String(object.description);
                    switch (object.gatewayType) {
                    case "TRADE_AND_MARKET_DATA":
                    case 0:
                        message.gatewayType = 0;
                        break;
                    case "MARKET_DATA":
                    case 1:
                        message.gatewayType = 1;
                        break;
                    case "TRADE_ONLY":
                    case 2:
                        message.gatewayType = 2;
                        break;
                    }
                    switch (object.gatewayAdapterType) {
                    case "CTP":
                    case 0:
                        message.gatewayAdapterType = 0;
                        break;
                    case "IB":
                    case 1:
                        message.gatewayAdapterType = 1;
                        break;
                    }
                    switch (object.status) {
                    case "DISCONNECTED":
                    case 0:
                        message.status = 0;
                        break;
                    case "CONNECTED":
                    case 1:
                        message.status = 1;
                        break;
                    case "DISCONNECTING":
                    case 2:
                        message.status = 2;
                        break;
                    case "CONNECTING":
                    case 3:
                        message.status = 3;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GatewayField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @static
                 * @param {xyz.redtorch.pb.GatewayField} message GatewayField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GatewayField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.gatewayId = "";
                        object.name = "";
                        object.description = "";
                        object.gatewayType = options.enums === String ? "TRADE_AND_MARKET_DATA" : 0;
                        object.gatewayAdapterType = options.enums === String ? "CTP" : 0;
                        object.status = options.enums === String ? "DISCONNECTED" : 0;
                    }
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        object.gatewayId = message.gatewayId;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.gatewayType != null && message.hasOwnProperty("gatewayType"))
                        object.gatewayType = options.enums === String ? $root.xyz.redtorch.pb.GatewayTypeEnum[message.gatewayType] : message.gatewayType;
                    if (message.gatewayAdapterType != null && message.hasOwnProperty("gatewayAdapterType"))
                        object.gatewayAdapterType = options.enums === String ? $root.xyz.redtorch.pb.GatewayAdapterTypeEnum[message.gatewayAdapterType] : message.gatewayAdapterType;
                    if (message.status != null && message.hasOwnProperty("status"))
                        object.status = options.enums === String ? $root.xyz.redtorch.pb.ConnectStatusEnum[message.status] : message.status;
                    return object;
                };

                /**
                 * Converts this GatewayField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.GatewayField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GatewayField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return GatewayField;
            })();

            pb.ContractField = (function() {

                /**
                 * Properties of a ContractField.
                 * @memberof xyz.redtorch.pb
                 * @interface IContractField
                 * @property {string|null} [contractId] ContractField contractId
                 * @property {string|null} [shortName] ContractField shortName
                 * @property {string|null} [fullName] ContractField fullName
                 * @property {string|null} [thirdPartyId] ContractField thirdPartyId
                 * @property {string|null} [unifiedSymbol] ContractField unifiedSymbol
                 * @property {string|null} [symbol] ContractField symbol
                 * @property {xyz.redtorch.pb.ExchangeEnum|null} [exchange] ContractField exchange
                 * @property {xyz.redtorch.pb.ProductTypeEnum|null} [productType] ContractField productType
                 * @property {xyz.redtorch.pb.CurrencyEnum|null} [currency] ContractField currency
                 * @property {number|null} [multiplier] ContractField multiplier
                 * @property {number|null} [priceTick] ContractField priceTick
                 * @property {number|null} [longMarginRatio] ContractField longMarginRatio
                 * @property {number|null} [shortMarginRatio] ContractField shortMarginRatio
                 * @property {boolean|null} [maxMarginSideAlgorithm] ContractField maxMarginSideAlgorithm
                 * @property {string|null} [underlyingSymbol] ContractField underlyingSymbol
                 * @property {number|null} [strikePrice] ContractField strikePrice
                 * @property {xyz.redtorch.pb.OptionTypeEnum|null} [optionType] ContractField optionType
                 * @property {number|null} [underlyingMultiplier] ContractField underlyingMultiplier
                 * @property {string|null} [lastTradeDateOrContractMonth] ContractField lastTradeDateOrContractMonth
                 * @property {number|null} [maxMarketOrderVolume] ContractField maxMarketOrderVolume
                 * @property {number|null} [minMarketOrderVolume] ContractField minMarketOrderVolume
                 * @property {number|null} [maxLimitOrderVolume] ContractField maxLimitOrderVolume
                 * @property {number|null} [minLimitOrderVolume] ContractField minLimitOrderVolume
                 * @property {xyz.redtorch.pb.IGatewayField|null} [gateway] ContractField gateway
                 */

                /**
                 * Constructs a new ContractField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a ContractField.
                 * @implements IContractField
                 * @constructor
                 * @param {xyz.redtorch.pb.IContractField=} [properties] Properties to set
                 */
                function ContractField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ContractField contractId.
                 * @member {string} contractId
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.contractId = "";

                /**
                 * ContractField shortName.
                 * @member {string} shortName
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.shortName = "";

                /**
                 * ContractField fullName.
                 * @member {string} fullName
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.fullName = "";

                /**
                 * ContractField thirdPartyId.
                 * @member {string} thirdPartyId
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.thirdPartyId = "";

                /**
                 * ContractField unifiedSymbol.
                 * @member {string} unifiedSymbol
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.unifiedSymbol = "";

                /**
                 * ContractField symbol.
                 * @member {string} symbol
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.symbol = "";

                /**
                 * ContractField exchange.
                 * @member {xyz.redtorch.pb.ExchangeEnum} exchange
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.exchange = 0;

                /**
                 * ContractField productType.
                 * @member {xyz.redtorch.pb.ProductTypeEnum} productType
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.productType = 0;

                /**
                 * ContractField currency.
                 * @member {xyz.redtorch.pb.CurrencyEnum} currency
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.currency = 0;

                /**
                 * ContractField multiplier.
                 * @member {number} multiplier
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.multiplier = 0;

                /**
                 * ContractField priceTick.
                 * @member {number} priceTick
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.priceTick = 0;

                /**
                 * ContractField longMarginRatio.
                 * @member {number} longMarginRatio
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.longMarginRatio = 0;

                /**
                 * ContractField shortMarginRatio.
                 * @member {number} shortMarginRatio
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.shortMarginRatio = 0;

                /**
                 * ContractField maxMarginSideAlgorithm.
                 * @member {boolean} maxMarginSideAlgorithm
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.maxMarginSideAlgorithm = false;

                /**
                 * ContractField underlyingSymbol.
                 * @member {string} underlyingSymbol
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.underlyingSymbol = "";

                /**
                 * ContractField strikePrice.
                 * @member {number} strikePrice
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.strikePrice = 0;

                /**
                 * ContractField optionType.
                 * @member {xyz.redtorch.pb.OptionTypeEnum} optionType
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.optionType = 0;

                /**
                 * ContractField underlyingMultiplier.
                 * @member {number} underlyingMultiplier
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.underlyingMultiplier = 0;

                /**
                 * ContractField lastTradeDateOrContractMonth.
                 * @member {string} lastTradeDateOrContractMonth
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.lastTradeDateOrContractMonth = "";

                /**
                 * ContractField maxMarketOrderVolume.
                 * @member {number} maxMarketOrderVolume
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.maxMarketOrderVolume = 0;

                /**
                 * ContractField minMarketOrderVolume.
                 * @member {number} minMarketOrderVolume
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.minMarketOrderVolume = 0;

                /**
                 * ContractField maxLimitOrderVolume.
                 * @member {number} maxLimitOrderVolume
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.maxLimitOrderVolume = 0;

                /**
                 * ContractField minLimitOrderVolume.
                 * @member {number} minLimitOrderVolume
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.minLimitOrderVolume = 0;

                /**
                 * ContractField gateway.
                 * @member {xyz.redtorch.pb.IGatewayField|null|undefined} gateway
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 */
                ContractField.prototype.gateway = null;

                /**
                 * Creates a new ContractField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.ContractField
                 * @static
                 * @param {xyz.redtorch.pb.IContractField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.ContractField} ContractField instance
                 */
                ContractField.create = function create(properties) {
                    return new ContractField(properties);
                };

                /**
                 * Encodes the specified ContractField message. Does not implicitly {@link xyz.redtorch.pb.ContractField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.ContractField
                 * @static
                 * @param {xyz.redtorch.pb.IContractField} message ContractField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContractField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.contractId != null && message.hasOwnProperty("contractId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.contractId);
                    if (message.shortName != null && message.hasOwnProperty("shortName"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.shortName);
                    if (message.fullName != null && message.hasOwnProperty("fullName"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.fullName);
                    if (message.thirdPartyId != null && message.hasOwnProperty("thirdPartyId"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.thirdPartyId);
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.unifiedSymbol);
                    if (message.symbol != null && message.hasOwnProperty("symbol"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.symbol);
                    if (message.exchange != null && message.hasOwnProperty("exchange"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.exchange);
                    if (message.productType != null && message.hasOwnProperty("productType"))
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.productType);
                    if (message.currency != null && message.hasOwnProperty("currency"))
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.currency);
                    if (message.multiplier != null && message.hasOwnProperty("multiplier"))
                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.multiplier);
                    if (message.priceTick != null && message.hasOwnProperty("priceTick"))
                        writer.uint32(/* id 13, wireType 1 =*/105).double(message.priceTick);
                    if (message.longMarginRatio != null && message.hasOwnProperty("longMarginRatio"))
                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.longMarginRatio);
                    if (message.shortMarginRatio != null && message.hasOwnProperty("shortMarginRatio"))
                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.shortMarginRatio);
                    if (message.maxMarginSideAlgorithm != null && message.hasOwnProperty("maxMarginSideAlgorithm"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.maxMarginSideAlgorithm);
                    if (message.underlyingSymbol != null && message.hasOwnProperty("underlyingSymbol"))
                        writer.uint32(/* id 17, wireType 2 =*/138).string(message.underlyingSymbol);
                    if (message.strikePrice != null && message.hasOwnProperty("strikePrice"))
                        writer.uint32(/* id 18, wireType 1 =*/145).double(message.strikePrice);
                    if (message.optionType != null && message.hasOwnProperty("optionType"))
                        writer.uint32(/* id 19, wireType 0 =*/152).int32(message.optionType);
                    if (message.underlyingMultiplier != null && message.hasOwnProperty("underlyingMultiplier"))
                        writer.uint32(/* id 20, wireType 1 =*/161).double(message.underlyingMultiplier);
                    if (message.lastTradeDateOrContractMonth != null && message.hasOwnProperty("lastTradeDateOrContractMonth"))
                        writer.uint32(/* id 21, wireType 2 =*/170).string(message.lastTradeDateOrContractMonth);
                    if (message.maxMarketOrderVolume != null && message.hasOwnProperty("maxMarketOrderVolume"))
                        writer.uint32(/* id 22, wireType 5 =*/181).fixed32(message.maxMarketOrderVolume);
                    if (message.minMarketOrderVolume != null && message.hasOwnProperty("minMarketOrderVolume"))
                        writer.uint32(/* id 23, wireType 5 =*/189).fixed32(message.minMarketOrderVolume);
                    if (message.maxLimitOrderVolume != null && message.hasOwnProperty("maxLimitOrderVolume"))
                        writer.uint32(/* id 24, wireType 5 =*/197).fixed32(message.maxLimitOrderVolume);
                    if (message.minLimitOrderVolume != null && message.hasOwnProperty("minLimitOrderVolume"))
                        writer.uint32(/* id 25, wireType 5 =*/205).fixed32(message.minLimitOrderVolume);
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        $root.xyz.redtorch.pb.GatewayField.encode(message.gateway, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ContractField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.ContractField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.ContractField
                 * @static
                 * @param {xyz.redtorch.pb.IContractField} message ContractField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContractField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ContractField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.ContractField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.ContractField} ContractField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContractField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.ContractField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.contractId = reader.string();
                            break;
                        case 2:
                            message.shortName = reader.string();
                            break;
                        case 3:
                            message.fullName = reader.string();
                            break;
                        case 4:
                            message.thirdPartyId = reader.string();
                            break;
                        case 7:
                            message.unifiedSymbol = reader.string();
                            break;
                        case 8:
                            message.symbol = reader.string();
                            break;
                        case 9:
                            message.exchange = reader.int32();
                            break;
                        case 10:
                            message.productType = reader.int32();
                            break;
                        case 11:
                            message.currency = reader.int32();
                            break;
                        case 12:
                            message.multiplier = reader.double();
                            break;
                        case 13:
                            message.priceTick = reader.double();
                            break;
                        case 14:
                            message.longMarginRatio = reader.double();
                            break;
                        case 15:
                            message.shortMarginRatio = reader.double();
                            break;
                        case 16:
                            message.maxMarginSideAlgorithm = reader.bool();
                            break;
                        case 17:
                            message.underlyingSymbol = reader.string();
                            break;
                        case 18:
                            message.strikePrice = reader.double();
                            break;
                        case 19:
                            message.optionType = reader.int32();
                            break;
                        case 20:
                            message.underlyingMultiplier = reader.double();
                            break;
                        case 21:
                            message.lastTradeDateOrContractMonth = reader.string();
                            break;
                        case 22:
                            message.maxMarketOrderVolume = reader.fixed32();
                            break;
                        case 23:
                            message.minMarketOrderVolume = reader.fixed32();
                            break;
                        case 24:
                            message.maxLimitOrderVolume = reader.fixed32();
                            break;
                        case 25:
                            message.minLimitOrderVolume = reader.fixed32();
                            break;
                        case 26:
                            message.gateway = $root.xyz.redtorch.pb.GatewayField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ContractField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.ContractField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.ContractField} ContractField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContractField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ContractField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.ContractField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ContractField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.contractId != null && message.hasOwnProperty("contractId"))
                        if (!$util.isString(message.contractId))
                            return "contractId: string expected";
                    if (message.shortName != null && message.hasOwnProperty("shortName"))
                        if (!$util.isString(message.shortName))
                            return "shortName: string expected";
                    if (message.fullName != null && message.hasOwnProperty("fullName"))
                        if (!$util.isString(message.fullName))
                            return "fullName: string expected";
                    if (message.thirdPartyId != null && message.hasOwnProperty("thirdPartyId"))
                        if (!$util.isString(message.thirdPartyId))
                            return "thirdPartyId: string expected";
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        if (!$util.isString(message.unifiedSymbol))
                            return "unifiedSymbol: string expected";
                    if (message.symbol != null && message.hasOwnProperty("symbol"))
                        if (!$util.isString(message.symbol))
                            return "symbol: string expected";
                    if (message.exchange != null && message.hasOwnProperty("exchange"))
                        switch (message.exchange) {
                        default:
                            return "exchange: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                            break;
                        }
                    if (message.productType != null && message.hasOwnProperty("productType"))
                        switch (message.productType) {
                        default:
                            return "productType: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                            break;
                        }
                    if (message.currency != null && message.hasOwnProperty("currency"))
                        switch (message.currency) {
                        default:
                            return "currency: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                            break;
                        }
                    if (message.multiplier != null && message.hasOwnProperty("multiplier"))
                        if (typeof message.multiplier !== "number")
                            return "multiplier: number expected";
                    if (message.priceTick != null && message.hasOwnProperty("priceTick"))
                        if (typeof message.priceTick !== "number")
                            return "priceTick: number expected";
                    if (message.longMarginRatio != null && message.hasOwnProperty("longMarginRatio"))
                        if (typeof message.longMarginRatio !== "number")
                            return "longMarginRatio: number expected";
                    if (message.shortMarginRatio != null && message.hasOwnProperty("shortMarginRatio"))
                        if (typeof message.shortMarginRatio !== "number")
                            return "shortMarginRatio: number expected";
                    if (message.maxMarginSideAlgorithm != null && message.hasOwnProperty("maxMarginSideAlgorithm"))
                        if (typeof message.maxMarginSideAlgorithm !== "boolean")
                            return "maxMarginSideAlgorithm: boolean expected";
                    if (message.underlyingSymbol != null && message.hasOwnProperty("underlyingSymbol"))
                        if (!$util.isString(message.underlyingSymbol))
                            return "underlyingSymbol: string expected";
                    if (message.strikePrice != null && message.hasOwnProperty("strikePrice"))
                        if (typeof message.strikePrice !== "number")
                            return "strikePrice: number expected";
                    if (message.optionType != null && message.hasOwnProperty("optionType"))
                        switch (message.optionType) {
                        default:
                            return "optionType: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.underlyingMultiplier != null && message.hasOwnProperty("underlyingMultiplier"))
                        if (typeof message.underlyingMultiplier !== "number")
                            return "underlyingMultiplier: number expected";
                    if (message.lastTradeDateOrContractMonth != null && message.hasOwnProperty("lastTradeDateOrContractMonth"))
                        if (!$util.isString(message.lastTradeDateOrContractMonth))
                            return "lastTradeDateOrContractMonth: string expected";
                    if (message.maxMarketOrderVolume != null && message.hasOwnProperty("maxMarketOrderVolume"))
                        if (!$util.isInteger(message.maxMarketOrderVolume))
                            return "maxMarketOrderVolume: integer expected";
                    if (message.minMarketOrderVolume != null && message.hasOwnProperty("minMarketOrderVolume"))
                        if (!$util.isInteger(message.minMarketOrderVolume))
                            return "minMarketOrderVolume: integer expected";
                    if (message.maxLimitOrderVolume != null && message.hasOwnProperty("maxLimitOrderVolume"))
                        if (!$util.isInteger(message.maxLimitOrderVolume))
                            return "maxLimitOrderVolume: integer expected";
                    if (message.minLimitOrderVolume != null && message.hasOwnProperty("minLimitOrderVolume"))
                        if (!$util.isInteger(message.minLimitOrderVolume))
                            return "minLimitOrderVolume: integer expected";
                    if (message.gateway != null && message.hasOwnProperty("gateway")) {
                        var error = $root.xyz.redtorch.pb.GatewayField.verify(message.gateway);
                        if (error)
                            return "gateway." + error;
                    }
                    return null;
                };

                /**
                 * Creates a ContractField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.ContractField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.ContractField} ContractField
                 */
                ContractField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.ContractField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.ContractField();
                    if (object.contractId != null)
                        message.contractId = String(object.contractId);
                    if (object.shortName != null)
                        message.shortName = String(object.shortName);
                    if (object.fullName != null)
                        message.fullName = String(object.fullName);
                    if (object.thirdPartyId != null)
                        message.thirdPartyId = String(object.thirdPartyId);
                    if (object.unifiedSymbol != null)
                        message.unifiedSymbol = String(object.unifiedSymbol);
                    if (object.symbol != null)
                        message.symbol = String(object.symbol);
                    switch (object.exchange) {
                    case "UNKNOWN_EXCHANGE":
                    case 0:
                        message.exchange = 0;
                        break;
                    case "SSE":
                    case 1:
                        message.exchange = 1;
                        break;
                    case "SZSE":
                    case 2:
                        message.exchange = 2;
                        break;
                    case "CFFEX":
                    case 3:
                        message.exchange = 3;
                        break;
                    case "SHFE":
                    case 4:
                        message.exchange = 4;
                        break;
                    case "CZCE":
                    case 5:
                        message.exchange = 5;
                        break;
                    case "DCE":
                    case 6:
                        message.exchange = 6;
                        break;
                    case "SGE":
                    case 7:
                        message.exchange = 7;
                        break;
                    case "INE":
                    case 8:
                        message.exchange = 8;
                        break;
                    case "SEHK":
                    case 9:
                        message.exchange = 9;
                        break;
                    case "HKFE":
                    case 10:
                        message.exchange = 10;
                        break;
                    case "SGX":
                    case 11:
                        message.exchange = 11;
                        break;
                    case "NYBOT":
                    case 12:
                        message.exchange = 12;
                        break;
                    case "NYMEX":
                    case 13:
                        message.exchange = 13;
                        break;
                    case "COMEX":
                    case 14:
                        message.exchange = 14;
                        break;
                    case "CME":
                    case 15:
                        message.exchange = 15;
                        break;
                    case "CFE":
                    case 16:
                        message.exchange = 16;
                        break;
                    case "GLOBEX":
                    case 17:
                        message.exchange = 17;
                        break;
                    case "ICE":
                    case 18:
                        message.exchange = 18;
                        break;
                    case "IPE":
                    case 19:
                        message.exchange = 19;
                        break;
                    case "LME":
                    case 20:
                        message.exchange = 20;
                        break;
                    case "IDEALPRO":
                    case 21:
                        message.exchange = 21;
                        break;
                    case "OANDA":
                    case 22:
                        message.exchange = 22;
                        break;
                    case "FXCM":
                    case 23:
                        message.exchange = 23;
                        break;
                    case "SMART":
                    case 24:
                        message.exchange = 24;
                        break;
                    }
                    switch (object.productType) {
                    case "UNKNOWN_PRODUCT_TYPE":
                    case 0:
                        message.productType = 0;
                        break;
                    case "EQUITY":
                    case 1:
                        message.productType = 1;
                        break;
                    case "FUTURES":
                    case 2:
                        message.productType = 2;
                        break;
                    case "OPTION":
                    case 3:
                        message.productType = 3;
                        break;
                    case "INDEX":
                    case 4:
                        message.productType = 4;
                        break;
                    case "COMBINATION":
                    case 5:
                        message.productType = 5;
                        break;
                    case "BOND":
                    case 6:
                        message.productType = 6;
                        break;
                    case "FOREX":
                    case 7:
                        message.productType = 7;
                        break;
                    case "SPOT":
                    case 8:
                        message.productType = 8;
                        break;
                    case "DEFER":
                    case 9:
                        message.productType = 9;
                        break;
                    case "ETF":
                    case 10:
                        message.productType = 10;
                        break;
                    case "WARRANT":
                    case 11:
                        message.productType = 11;
                        break;
                    case "SPREAD":
                    case 12:
                        message.productType = 12;
                        break;
                    case "FUND":
                    case 13:
                        message.productType = 13;
                        break;
                    case "EFP":
                    case 14:
                        message.productType = 14;
                        break;
                    case "SPOT_OPTION":
                    case 15:
                        message.productType = 15;
                        break;
                    }
                    switch (object.currency) {
                    case "UNKNOWN_CURRENCY":
                    case 0:
                        message.currency = 0;
                        break;
                    case "USD":
                    case 1:
                        message.currency = 1;
                        break;
                    case "CNY":
                    case 2:
                        message.currency = 2;
                        break;
                    case "CNH":
                    case 3:
                        message.currency = 3;
                        break;
                    case "HKD":
                    case 4:
                        message.currency = 4;
                        break;
                    case "JPY":
                    case 5:
                        message.currency = 5;
                        break;
                    case "EUR":
                    case 6:
                        message.currency = 6;
                        break;
                    case "GBP":
                    case 7:
                        message.currency = 7;
                        break;
                    case "DEM":
                    case 8:
                        message.currency = 8;
                        break;
                    case "CHF":
                    case 9:
                        message.currency = 9;
                        break;
                    case "FRF":
                    case 10:
                        message.currency = 10;
                        break;
                    case "CAD":
                    case 11:
                        message.currency = 11;
                        break;
                    case "AUD":
                    case 12:
                        message.currency = 12;
                        break;
                    case "ATS":
                    case 13:
                        message.currency = 13;
                        break;
                    case "FIM":
                    case 14:
                        message.currency = 14;
                        break;
                    case "BEF":
                    case 15:
                        message.currency = 15;
                        break;
                    case "THB":
                    case 16:
                        message.currency = 16;
                        break;
                    case "IEP":
                    case 17:
                        message.currency = 17;
                        break;
                    case "ITL":
                    case 18:
                        message.currency = 18;
                        break;
                    case "LUF":
                    case 19:
                        message.currency = 19;
                        break;
                    case "NLG":
                    case 20:
                        message.currency = 20;
                        break;
                    case "PTE":
                    case 21:
                        message.currency = 21;
                        break;
                    case "ESP":
                    case 22:
                        message.currency = 22;
                        break;
                    case "IDR":
                    case 23:
                        message.currency = 23;
                        break;
                    case "MYR":
                    case 24:
                        message.currency = 24;
                        break;
                    case "NZD":
                    case 25:
                        message.currency = 25;
                        break;
                    case "PHP":
                    case 26:
                        message.currency = 26;
                        break;
                    case "SUR":
                    case 27:
                        message.currency = 27;
                        break;
                    case "SGD":
                    case 28:
                        message.currency = 28;
                        break;
                    case "KRW":
                    case 29:
                        message.currency = 29;
                        break;
                    }
                    if (object.multiplier != null)
                        message.multiplier = Number(object.multiplier);
                    if (object.priceTick != null)
                        message.priceTick = Number(object.priceTick);
                    if (object.longMarginRatio != null)
                        message.longMarginRatio = Number(object.longMarginRatio);
                    if (object.shortMarginRatio != null)
                        message.shortMarginRatio = Number(object.shortMarginRatio);
                    if (object.maxMarginSideAlgorithm != null)
                        message.maxMarginSideAlgorithm = Boolean(object.maxMarginSideAlgorithm);
                    if (object.underlyingSymbol != null)
                        message.underlyingSymbol = String(object.underlyingSymbol);
                    if (object.strikePrice != null)
                        message.strikePrice = Number(object.strikePrice);
                    switch (object.optionType) {
                    case "UNKNOWN_OPTION_TYPE":
                    case 0:
                        message.optionType = 0;
                        break;
                    case "CALL":
                    case 1:
                        message.optionType = 1;
                        break;
                    case "PUT":
                    case 2:
                        message.optionType = 2;
                        break;
                    }
                    if (object.underlyingMultiplier != null)
                        message.underlyingMultiplier = Number(object.underlyingMultiplier);
                    if (object.lastTradeDateOrContractMonth != null)
                        message.lastTradeDateOrContractMonth = String(object.lastTradeDateOrContractMonth);
                    if (object.maxMarketOrderVolume != null)
                        message.maxMarketOrderVolume = object.maxMarketOrderVolume >>> 0;
                    if (object.minMarketOrderVolume != null)
                        message.minMarketOrderVolume = object.minMarketOrderVolume >>> 0;
                    if (object.maxLimitOrderVolume != null)
                        message.maxLimitOrderVolume = object.maxLimitOrderVolume >>> 0;
                    if (object.minLimitOrderVolume != null)
                        message.minLimitOrderVolume = object.minLimitOrderVolume >>> 0;
                    if (object.gateway != null) {
                        if (typeof object.gateway !== "object")
                            throw TypeError(".xyz.redtorch.pb.ContractField.gateway: object expected");
                        message.gateway = $root.xyz.redtorch.pb.GatewayField.fromObject(object.gateway);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ContractField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.ContractField
                 * @static
                 * @param {xyz.redtorch.pb.ContractField} message ContractField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ContractField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.contractId = "";
                        object.shortName = "";
                        object.fullName = "";
                        object.thirdPartyId = "";
                        object.unifiedSymbol = "";
                        object.symbol = "";
                        object.exchange = options.enums === String ? "UNKNOWN_EXCHANGE" : 0;
                        object.productType = options.enums === String ? "UNKNOWN_PRODUCT_TYPE" : 0;
                        object.currency = options.enums === String ? "UNKNOWN_CURRENCY" : 0;
                        object.multiplier = 0;
                        object.priceTick = 0;
                        object.longMarginRatio = 0;
                        object.shortMarginRatio = 0;
                        object.maxMarginSideAlgorithm = false;
                        object.underlyingSymbol = "";
                        object.strikePrice = 0;
                        object.optionType = options.enums === String ? "UNKNOWN_OPTION_TYPE" : 0;
                        object.underlyingMultiplier = 0;
                        object.lastTradeDateOrContractMonth = "";
                        object.maxMarketOrderVolume = 0;
                        object.minMarketOrderVolume = 0;
                        object.maxLimitOrderVolume = 0;
                        object.minLimitOrderVolume = 0;
                        object.gateway = null;
                    }
                    if (message.contractId != null && message.hasOwnProperty("contractId"))
                        object.contractId = message.contractId;
                    if (message.shortName != null && message.hasOwnProperty("shortName"))
                        object.shortName = message.shortName;
                    if (message.fullName != null && message.hasOwnProperty("fullName"))
                        object.fullName = message.fullName;
                    if (message.thirdPartyId != null && message.hasOwnProperty("thirdPartyId"))
                        object.thirdPartyId = message.thirdPartyId;
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        object.unifiedSymbol = message.unifiedSymbol;
                    if (message.symbol != null && message.hasOwnProperty("symbol"))
                        object.symbol = message.symbol;
                    if (message.exchange != null && message.hasOwnProperty("exchange"))
                        object.exchange = options.enums === String ? $root.xyz.redtorch.pb.ExchangeEnum[message.exchange] : message.exchange;
                    if (message.productType != null && message.hasOwnProperty("productType"))
                        object.productType = options.enums === String ? $root.xyz.redtorch.pb.ProductTypeEnum[message.productType] : message.productType;
                    if (message.currency != null && message.hasOwnProperty("currency"))
                        object.currency = options.enums === String ? $root.xyz.redtorch.pb.CurrencyEnum[message.currency] : message.currency;
                    if (message.multiplier != null && message.hasOwnProperty("multiplier"))
                        object.multiplier = options.json && !isFinite(message.multiplier) ? String(message.multiplier) : message.multiplier;
                    if (message.priceTick != null && message.hasOwnProperty("priceTick"))
                        object.priceTick = options.json && !isFinite(message.priceTick) ? String(message.priceTick) : message.priceTick;
                    if (message.longMarginRatio != null && message.hasOwnProperty("longMarginRatio"))
                        object.longMarginRatio = options.json && !isFinite(message.longMarginRatio) ? String(message.longMarginRatio) : message.longMarginRatio;
                    if (message.shortMarginRatio != null && message.hasOwnProperty("shortMarginRatio"))
                        object.shortMarginRatio = options.json && !isFinite(message.shortMarginRatio) ? String(message.shortMarginRatio) : message.shortMarginRatio;
                    if (message.maxMarginSideAlgorithm != null && message.hasOwnProperty("maxMarginSideAlgorithm"))
                        object.maxMarginSideAlgorithm = message.maxMarginSideAlgorithm;
                    if (message.underlyingSymbol != null && message.hasOwnProperty("underlyingSymbol"))
                        object.underlyingSymbol = message.underlyingSymbol;
                    if (message.strikePrice != null && message.hasOwnProperty("strikePrice"))
                        object.strikePrice = options.json && !isFinite(message.strikePrice) ? String(message.strikePrice) : message.strikePrice;
                    if (message.optionType != null && message.hasOwnProperty("optionType"))
                        object.optionType = options.enums === String ? $root.xyz.redtorch.pb.OptionTypeEnum[message.optionType] : message.optionType;
                    if (message.underlyingMultiplier != null && message.hasOwnProperty("underlyingMultiplier"))
                        object.underlyingMultiplier = options.json && !isFinite(message.underlyingMultiplier) ? String(message.underlyingMultiplier) : message.underlyingMultiplier;
                    if (message.lastTradeDateOrContractMonth != null && message.hasOwnProperty("lastTradeDateOrContractMonth"))
                        object.lastTradeDateOrContractMonth = message.lastTradeDateOrContractMonth;
                    if (message.maxMarketOrderVolume != null && message.hasOwnProperty("maxMarketOrderVolume"))
                        object.maxMarketOrderVolume = message.maxMarketOrderVolume;
                    if (message.minMarketOrderVolume != null && message.hasOwnProperty("minMarketOrderVolume"))
                        object.minMarketOrderVolume = message.minMarketOrderVolume;
                    if (message.maxLimitOrderVolume != null && message.hasOwnProperty("maxLimitOrderVolume"))
                        object.maxLimitOrderVolume = message.maxLimitOrderVolume;
                    if (message.minLimitOrderVolume != null && message.hasOwnProperty("minLimitOrderVolume"))
                        object.minLimitOrderVolume = message.minLimitOrderVolume;
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        object.gateway = $root.xyz.redtorch.pb.GatewayField.toObject(message.gateway, options);
                    return object;
                };

                /**
                 * Converts this ContractField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.ContractField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ContractField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ContractField;
            })();

            pb.AccountField = (function() {

                /**
                 * Properties of an AccountField.
                 * @memberof xyz.redtorch.pb
                 * @interface IAccountField
                 * @property {string|null} [accountId] AccountField accountId
                 * @property {string|null} [code] AccountField code
                 * @property {string|null} [name] AccountField name
                 * @property {string|null} [holder] AccountField holder
                 * @property {xyz.redtorch.pb.CurrencyEnum|null} [currency] AccountField currency
                 * @property {number|null} [preBalance] AccountField preBalance
                 * @property {number|null} [balance] AccountField balance
                 * @property {number|null} [available] AccountField available
                 * @property {number|null} [commission] AccountField commission
                 * @property {number|null} [margin] AccountField margin
                 * @property {number|null} [closeProfit] AccountField closeProfit
                 * @property {number|null} [positionProfit] AccountField positionProfit
                 * @property {number|null} [deposit] AccountField deposit
                 * @property {number|null} [withdraw] AccountField withdraw
                 * @property {xyz.redtorch.pb.IGatewayField|null} [gateway] AccountField gateway
                 */

                /**
                 * Constructs a new AccountField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents an AccountField.
                 * @implements IAccountField
                 * @constructor
                 * @param {xyz.redtorch.pb.IAccountField=} [properties] Properties to set
                 */
                function AccountField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AccountField accountId.
                 * @member {string} accountId
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.accountId = "";

                /**
                 * AccountField code.
                 * @member {string} code
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.code = "";

                /**
                 * AccountField name.
                 * @member {string} name
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.name = "";

                /**
                 * AccountField holder.
                 * @member {string} holder
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.holder = "";

                /**
                 * AccountField currency.
                 * @member {xyz.redtorch.pb.CurrencyEnum} currency
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.currency = 0;

                /**
                 * AccountField preBalance.
                 * @member {number} preBalance
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.preBalance = 0;

                /**
                 * AccountField balance.
                 * @member {number} balance
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.balance = 0;

                /**
                 * AccountField available.
                 * @member {number} available
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.available = 0;

                /**
                 * AccountField commission.
                 * @member {number} commission
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.commission = 0;

                /**
                 * AccountField margin.
                 * @member {number} margin
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.margin = 0;

                /**
                 * AccountField closeProfit.
                 * @member {number} closeProfit
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.closeProfit = 0;

                /**
                 * AccountField positionProfit.
                 * @member {number} positionProfit
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.positionProfit = 0;

                /**
                 * AccountField deposit.
                 * @member {number} deposit
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.deposit = 0;

                /**
                 * AccountField withdraw.
                 * @member {number} withdraw
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.withdraw = 0;

                /**
                 * AccountField gateway.
                 * @member {xyz.redtorch.pb.IGatewayField|null|undefined} gateway
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 */
                AccountField.prototype.gateway = null;

                /**
                 * Creates a new AccountField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.AccountField
                 * @static
                 * @param {xyz.redtorch.pb.IAccountField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.AccountField} AccountField instance
                 */
                AccountField.create = function create(properties) {
                    return new AccountField(properties);
                };

                /**
                 * Encodes the specified AccountField message. Does not implicitly {@link xyz.redtorch.pb.AccountField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.AccountField
                 * @static
                 * @param {xyz.redtorch.pb.IAccountField} message AccountField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccountField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.accountId);
                    if (message.code != null && message.hasOwnProperty("code"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.code);
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                    if (message.holder != null && message.hasOwnProperty("holder"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.holder);
                    if (message.currency != null && message.hasOwnProperty("currency"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.currency);
                    if (message.preBalance != null && message.hasOwnProperty("preBalance"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.preBalance);
                    if (message.balance != null && message.hasOwnProperty("balance"))
                        writer.uint32(/* id 7, wireType 1 =*/57).double(message.balance);
                    if (message.available != null && message.hasOwnProperty("available"))
                        writer.uint32(/* id 8, wireType 1 =*/65).double(message.available);
                    if (message.commission != null && message.hasOwnProperty("commission"))
                        writer.uint32(/* id 9, wireType 1 =*/73).double(message.commission);
                    if (message.margin != null && message.hasOwnProperty("margin"))
                        writer.uint32(/* id 10, wireType 1 =*/81).double(message.margin);
                    if (message.closeProfit != null && message.hasOwnProperty("closeProfit"))
                        writer.uint32(/* id 11, wireType 1 =*/89).double(message.closeProfit);
                    if (message.positionProfit != null && message.hasOwnProperty("positionProfit"))
                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.positionProfit);
                    if (message.deposit != null && message.hasOwnProperty("deposit"))
                        writer.uint32(/* id 13, wireType 1 =*/105).double(message.deposit);
                    if (message.withdraw != null && message.hasOwnProperty("withdraw"))
                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.withdraw);
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        $root.xyz.redtorch.pb.GatewayField.encode(message.gateway, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified AccountField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.AccountField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.AccountField
                 * @static
                 * @param {xyz.redtorch.pb.IAccountField} message AccountField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AccountField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AccountField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.AccountField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.AccountField} AccountField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccountField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.AccountField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.accountId = reader.string();
                            break;
                        case 2:
                            message.code = reader.string();
                            break;
                        case 3:
                            message.name = reader.string();
                            break;
                        case 4:
                            message.holder = reader.string();
                            break;
                        case 5:
                            message.currency = reader.int32();
                            break;
                        case 6:
                            message.preBalance = reader.double();
                            break;
                        case 7:
                            message.balance = reader.double();
                            break;
                        case 8:
                            message.available = reader.double();
                            break;
                        case 9:
                            message.commission = reader.double();
                            break;
                        case 10:
                            message.margin = reader.double();
                            break;
                        case 11:
                            message.closeProfit = reader.double();
                            break;
                        case 12:
                            message.positionProfit = reader.double();
                            break;
                        case 13:
                            message.deposit = reader.double();
                            break;
                        case 14:
                            message.withdraw = reader.double();
                            break;
                        case 15:
                            message.gateway = $root.xyz.redtorch.pb.GatewayField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AccountField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.AccountField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.AccountField} AccountField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AccountField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AccountField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.AccountField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AccountField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        if (!$util.isString(message.accountId))
                            return "accountId: string expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isString(message.code))
                            return "code: string expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.holder != null && message.hasOwnProperty("holder"))
                        if (!$util.isString(message.holder))
                            return "holder: string expected";
                    if (message.currency != null && message.hasOwnProperty("currency"))
                        switch (message.currency) {
                        default:
                            return "currency: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                            break;
                        }
                    if (message.preBalance != null && message.hasOwnProperty("preBalance"))
                        if (typeof message.preBalance !== "number")
                            return "preBalance: number expected";
                    if (message.balance != null && message.hasOwnProperty("balance"))
                        if (typeof message.balance !== "number")
                            return "balance: number expected";
                    if (message.available != null && message.hasOwnProperty("available"))
                        if (typeof message.available !== "number")
                            return "available: number expected";
                    if (message.commission != null && message.hasOwnProperty("commission"))
                        if (typeof message.commission !== "number")
                            return "commission: number expected";
                    if (message.margin != null && message.hasOwnProperty("margin"))
                        if (typeof message.margin !== "number")
                            return "margin: number expected";
                    if (message.closeProfit != null && message.hasOwnProperty("closeProfit"))
                        if (typeof message.closeProfit !== "number")
                            return "closeProfit: number expected";
                    if (message.positionProfit != null && message.hasOwnProperty("positionProfit"))
                        if (typeof message.positionProfit !== "number")
                            return "positionProfit: number expected";
                    if (message.deposit != null && message.hasOwnProperty("deposit"))
                        if (typeof message.deposit !== "number")
                            return "deposit: number expected";
                    if (message.withdraw != null && message.hasOwnProperty("withdraw"))
                        if (typeof message.withdraw !== "number")
                            return "withdraw: number expected";
                    if (message.gateway != null && message.hasOwnProperty("gateway")) {
                        var error = $root.xyz.redtorch.pb.GatewayField.verify(message.gateway);
                        if (error)
                            return "gateway." + error;
                    }
                    return null;
                };

                /**
                 * Creates an AccountField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.AccountField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.AccountField} AccountField
                 */
                AccountField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.AccountField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.AccountField();
                    if (object.accountId != null)
                        message.accountId = String(object.accountId);
                    if (object.code != null)
                        message.code = String(object.code);
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.holder != null)
                        message.holder = String(object.holder);
                    switch (object.currency) {
                    case "UNKNOWN_CURRENCY":
                    case 0:
                        message.currency = 0;
                        break;
                    case "USD":
                    case 1:
                        message.currency = 1;
                        break;
                    case "CNY":
                    case 2:
                        message.currency = 2;
                        break;
                    case "CNH":
                    case 3:
                        message.currency = 3;
                        break;
                    case "HKD":
                    case 4:
                        message.currency = 4;
                        break;
                    case "JPY":
                    case 5:
                        message.currency = 5;
                        break;
                    case "EUR":
                    case 6:
                        message.currency = 6;
                        break;
                    case "GBP":
                    case 7:
                        message.currency = 7;
                        break;
                    case "DEM":
                    case 8:
                        message.currency = 8;
                        break;
                    case "CHF":
                    case 9:
                        message.currency = 9;
                        break;
                    case "FRF":
                    case 10:
                        message.currency = 10;
                        break;
                    case "CAD":
                    case 11:
                        message.currency = 11;
                        break;
                    case "AUD":
                    case 12:
                        message.currency = 12;
                        break;
                    case "ATS":
                    case 13:
                        message.currency = 13;
                        break;
                    case "FIM":
                    case 14:
                        message.currency = 14;
                        break;
                    case "BEF":
                    case 15:
                        message.currency = 15;
                        break;
                    case "THB":
                    case 16:
                        message.currency = 16;
                        break;
                    case "IEP":
                    case 17:
                        message.currency = 17;
                        break;
                    case "ITL":
                    case 18:
                        message.currency = 18;
                        break;
                    case "LUF":
                    case 19:
                        message.currency = 19;
                        break;
                    case "NLG":
                    case 20:
                        message.currency = 20;
                        break;
                    case "PTE":
                    case 21:
                        message.currency = 21;
                        break;
                    case "ESP":
                    case 22:
                        message.currency = 22;
                        break;
                    case "IDR":
                    case 23:
                        message.currency = 23;
                        break;
                    case "MYR":
                    case 24:
                        message.currency = 24;
                        break;
                    case "NZD":
                    case 25:
                        message.currency = 25;
                        break;
                    case "PHP":
                    case 26:
                        message.currency = 26;
                        break;
                    case "SUR":
                    case 27:
                        message.currency = 27;
                        break;
                    case "SGD":
                    case 28:
                        message.currency = 28;
                        break;
                    case "KRW":
                    case 29:
                        message.currency = 29;
                        break;
                    }
                    if (object.preBalance != null)
                        message.preBalance = Number(object.preBalance);
                    if (object.balance != null)
                        message.balance = Number(object.balance);
                    if (object.available != null)
                        message.available = Number(object.available);
                    if (object.commission != null)
                        message.commission = Number(object.commission);
                    if (object.margin != null)
                        message.margin = Number(object.margin);
                    if (object.closeProfit != null)
                        message.closeProfit = Number(object.closeProfit);
                    if (object.positionProfit != null)
                        message.positionProfit = Number(object.positionProfit);
                    if (object.deposit != null)
                        message.deposit = Number(object.deposit);
                    if (object.withdraw != null)
                        message.withdraw = Number(object.withdraw);
                    if (object.gateway != null) {
                        if (typeof object.gateway !== "object")
                            throw TypeError(".xyz.redtorch.pb.AccountField.gateway: object expected");
                        message.gateway = $root.xyz.redtorch.pb.GatewayField.fromObject(object.gateway);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an AccountField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.AccountField
                 * @static
                 * @param {xyz.redtorch.pb.AccountField} message AccountField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AccountField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.accountId = "";
                        object.code = "";
                        object.name = "";
                        object.holder = "";
                        object.currency = options.enums === String ? "UNKNOWN_CURRENCY" : 0;
                        object.preBalance = 0;
                        object.balance = 0;
                        object.available = 0;
                        object.commission = 0;
                        object.margin = 0;
                        object.closeProfit = 0;
                        object.positionProfit = 0;
                        object.deposit = 0;
                        object.withdraw = 0;
                        object.gateway = null;
                    }
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        object.accountId = message.accountId;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.holder != null && message.hasOwnProperty("holder"))
                        object.holder = message.holder;
                    if (message.currency != null && message.hasOwnProperty("currency"))
                        object.currency = options.enums === String ? $root.xyz.redtorch.pb.CurrencyEnum[message.currency] : message.currency;
                    if (message.preBalance != null && message.hasOwnProperty("preBalance"))
                        object.preBalance = options.json && !isFinite(message.preBalance) ? String(message.preBalance) : message.preBalance;
                    if (message.balance != null && message.hasOwnProperty("balance"))
                        object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;
                    if (message.available != null && message.hasOwnProperty("available"))
                        object.available = options.json && !isFinite(message.available) ? String(message.available) : message.available;
                    if (message.commission != null && message.hasOwnProperty("commission"))
                        object.commission = options.json && !isFinite(message.commission) ? String(message.commission) : message.commission;
                    if (message.margin != null && message.hasOwnProperty("margin"))
                        object.margin = options.json && !isFinite(message.margin) ? String(message.margin) : message.margin;
                    if (message.closeProfit != null && message.hasOwnProperty("closeProfit"))
                        object.closeProfit = options.json && !isFinite(message.closeProfit) ? String(message.closeProfit) : message.closeProfit;
                    if (message.positionProfit != null && message.hasOwnProperty("positionProfit"))
                        object.positionProfit = options.json && !isFinite(message.positionProfit) ? String(message.positionProfit) : message.positionProfit;
                    if (message.deposit != null && message.hasOwnProperty("deposit"))
                        object.deposit = options.json && !isFinite(message.deposit) ? String(message.deposit) : message.deposit;
                    if (message.withdraw != null && message.hasOwnProperty("withdraw"))
                        object.withdraw = options.json && !isFinite(message.withdraw) ? String(message.withdraw) : message.withdraw;
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        object.gateway = $root.xyz.redtorch.pb.GatewayField.toObject(message.gateway, options);
                    return object;
                };

                /**
                 * Converts this AccountField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.AccountField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AccountField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AccountField;
            })();

            pb.OrderField = (function() {

                /**
                 * Properties of an OrderField.
                 * @memberof xyz.redtorch.pb
                 * @interface IOrderField
                 * @property {string|null} [originOrderId] OrderField originOrderId
                 * @property {string|null} [orderId] OrderField orderId
                 * @property {string|null} [adapterOrderId] OrderField adapterOrderId
                 * @property {string|null} [accountId] OrderField accountId
                 * @property {xyz.redtorch.pb.DirectionEnum|null} [direction] OrderField direction
                 * @property {xyz.redtorch.pb.OffsetEnum|null} [offset] OrderField offset
                 * @property {xyz.redtorch.pb.OrderStatusEnum|null} [orderStatus] OrderField orderStatus
                 * @property {number|null} [price] OrderField price
                 * @property {number|null} [totalVolume] OrderField totalVolume
                 * @property {number|null} [tradedVolume] OrderField tradedVolume
                 * @property {string|null} [tradingDay] OrderField tradingDay
                 * @property {string|null} [orderDate] OrderField orderDate
                 * @property {string|null} [orderTime] OrderField orderTime
                 * @property {string|null} [cancelTime] OrderField cancelTime
                 * @property {string|null} [activeTime] OrderField activeTime
                 * @property {string|null} [updateTime] OrderField updateTime
                 * @property {string|null} [statusInfo] OrderField statusInfo
                 * @property {xyz.redtorch.pb.TimeConditionTypeEnum|null} [timeConditionType] OrderField timeConditionType
                 * @property {number|null} [frontId] OrderField frontId
                 * @property {number|null} [sessionId] OrderField sessionId
                 * @property {xyz.redtorch.pb.IContractField|null} [contract] OrderField contract
                 * @property {xyz.redtorch.pb.IGatewayField|null} [gateway] OrderField gateway
                 */

                /**
                 * Constructs a new OrderField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents an OrderField.
                 * @implements IOrderField
                 * @constructor
                 * @param {xyz.redtorch.pb.IOrderField=} [properties] Properties to set
                 */
                function OrderField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * OrderField originOrderId.
                 * @member {string} originOrderId
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.originOrderId = "";

                /**
                 * OrderField orderId.
                 * @member {string} orderId
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.orderId = "";

                /**
                 * OrderField adapterOrderId.
                 * @member {string} adapterOrderId
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.adapterOrderId = "";

                /**
                 * OrderField accountId.
                 * @member {string} accountId
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.accountId = "";

                /**
                 * OrderField direction.
                 * @member {xyz.redtorch.pb.DirectionEnum} direction
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.direction = 0;

                /**
                 * OrderField offset.
                 * @member {xyz.redtorch.pb.OffsetEnum} offset
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.offset = 0;

                /**
                 * OrderField orderStatus.
                 * @member {xyz.redtorch.pb.OrderStatusEnum} orderStatus
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.orderStatus = 0;

                /**
                 * OrderField price.
                 * @member {number} price
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.price = 0;

                /**
                 * OrderField totalVolume.
                 * @member {number} totalVolume
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.totalVolume = 0;

                /**
                 * OrderField tradedVolume.
                 * @member {number} tradedVolume
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.tradedVolume = 0;

                /**
                 * OrderField tradingDay.
                 * @member {string} tradingDay
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.tradingDay = "";

                /**
                 * OrderField orderDate.
                 * @member {string} orderDate
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.orderDate = "";

                /**
                 * OrderField orderTime.
                 * @member {string} orderTime
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.orderTime = "";

                /**
                 * OrderField cancelTime.
                 * @member {string} cancelTime
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.cancelTime = "";

                /**
                 * OrderField activeTime.
                 * @member {string} activeTime
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.activeTime = "";

                /**
                 * OrderField updateTime.
                 * @member {string} updateTime
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.updateTime = "";

                /**
                 * OrderField statusInfo.
                 * @member {string} statusInfo
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.statusInfo = "";

                /**
                 * OrderField timeConditionType.
                 * @member {xyz.redtorch.pb.TimeConditionTypeEnum} timeConditionType
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.timeConditionType = 0;

                /**
                 * OrderField frontId.
                 * @member {number} frontId
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.frontId = 0;

                /**
                 * OrderField sessionId.
                 * @member {number} sessionId
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.sessionId = 0;

                /**
                 * OrderField contract.
                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.contract = null;

                /**
                 * OrderField gateway.
                 * @member {xyz.redtorch.pb.IGatewayField|null|undefined} gateway
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 */
                OrderField.prototype.gateway = null;

                /**
                 * Creates a new OrderField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.OrderField
                 * @static
                 * @param {xyz.redtorch.pb.IOrderField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.OrderField} OrderField instance
                 */
                OrderField.create = function create(properties) {
                    return new OrderField(properties);
                };

                /**
                 * Encodes the specified OrderField message. Does not implicitly {@link xyz.redtorch.pb.OrderField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.OrderField
                 * @static
                 * @param {xyz.redtorch.pb.IOrderField} message OrderField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OrderField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.originOrderId);
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);
                    if (message.adapterOrderId != null && message.hasOwnProperty("adapterOrderId"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.adapterOrderId);
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.accountId);
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.direction);
                    if (message.offset != null && message.hasOwnProperty("offset"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.offset);
                    if (message.orderStatus != null && message.hasOwnProperty("orderStatus"))
                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.orderStatus);
                    if (message.price != null && message.hasOwnProperty("price"))
                        writer.uint32(/* id 8, wireType 1 =*/65).double(message.price);
                    if (message.totalVolume != null && message.hasOwnProperty("totalVolume"))
                        writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.totalVolume);
                    if (message.tradedVolume != null && message.hasOwnProperty("tradedVolume"))
                        writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.tradedVolume);
                    if (message.tradingDay != null && message.hasOwnProperty("tradingDay"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.tradingDay);
                    if (message.orderDate != null && message.hasOwnProperty("orderDate"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.orderDate);
                    if (message.orderTime != null && message.hasOwnProperty("orderTime"))
                        writer.uint32(/* id 14, wireType 2 =*/114).string(message.orderTime);
                    if (message.cancelTime != null && message.hasOwnProperty("cancelTime"))
                        writer.uint32(/* id 15, wireType 2 =*/122).string(message.cancelTime);
                    if (message.activeTime != null && message.hasOwnProperty("activeTime"))
                        writer.uint32(/* id 16, wireType 2 =*/130).string(message.activeTime);
                    if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                        writer.uint32(/* id 17, wireType 2 =*/138).string(message.updateTime);
                    if (message.statusInfo != null && message.hasOwnProperty("statusInfo"))
                        writer.uint32(/* id 18, wireType 2 =*/146).string(message.statusInfo);
                    if (message.timeConditionType != null && message.hasOwnProperty("timeConditionType"))
                        writer.uint32(/* id 19, wireType 0 =*/152).int32(message.timeConditionType);
                    if (message.frontId != null && message.hasOwnProperty("frontId"))
                        writer.uint32(/* id 20, wireType 5 =*/165).fixed32(message.frontId);
                    if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                        writer.uint32(/* id 21, wireType 5 =*/173).fixed32(message.sessionId);
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        $root.xyz.redtorch.pb.GatewayField.encode(message.gateway, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified OrderField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.OrderField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.OrderField
                 * @static
                 * @param {xyz.redtorch.pb.IOrderField} message OrderField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OrderField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an OrderField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.OrderField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.OrderField} OrderField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OrderField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.OrderField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.originOrderId = reader.string();
                            break;
                        case 2:
                            message.orderId = reader.string();
                            break;
                        case 3:
                            message.adapterOrderId = reader.string();
                            break;
                        case 4:
                            message.accountId = reader.string();
                            break;
                        case 5:
                            message.direction = reader.int32();
                            break;
                        case 6:
                            message.offset = reader.int32();
                            break;
                        case 7:
                            message.orderStatus = reader.int32();
                            break;
                        case 8:
                            message.price = reader.double();
                            break;
                        case 9:
                            message.totalVolume = reader.fixed32();
                            break;
                        case 10:
                            message.tradedVolume = reader.fixed32();
                            break;
                        case 12:
                            message.tradingDay = reader.string();
                            break;
                        case 13:
                            message.orderDate = reader.string();
                            break;
                        case 14:
                            message.orderTime = reader.string();
                            break;
                        case 15:
                            message.cancelTime = reader.string();
                            break;
                        case 16:
                            message.activeTime = reader.string();
                            break;
                        case 17:
                            message.updateTime = reader.string();
                            break;
                        case 18:
                            message.statusInfo = reader.string();
                            break;
                        case 19:
                            message.timeConditionType = reader.int32();
                            break;
                        case 20:
                            message.frontId = reader.fixed32();
                            break;
                        case 21:
                            message.sessionId = reader.fixed32();
                            break;
                        case 22:
                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());
                            break;
                        case 23:
                            message.gateway = $root.xyz.redtorch.pb.GatewayField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an OrderField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.OrderField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.OrderField} OrderField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OrderField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an OrderField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.OrderField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OrderField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        if (!$util.isString(message.originOrderId))
                            return "originOrderId: string expected";
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        if (!$util.isString(message.orderId))
                            return "orderId: string expected";
                    if (message.adapterOrderId != null && message.hasOwnProperty("adapterOrderId"))
                        if (!$util.isString(message.adapterOrderId))
                            return "adapterOrderId: string expected";
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        if (!$util.isString(message.accountId))
                            return "accountId: string expected";
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        switch (message.direction) {
                        default:
                            return "direction: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.offset != null && message.hasOwnProperty("offset"))
                        switch (message.offset) {
                        default:
                            return "offset: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.orderStatus != null && message.hasOwnProperty("orderStatus"))
                        switch (message.orderStatus) {
                        default:
                            return "orderStatus: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            break;
                        }
                    if (message.price != null && message.hasOwnProperty("price"))
                        if (typeof message.price !== "number")
                            return "price: number expected";
                    if (message.totalVolume != null && message.hasOwnProperty("totalVolume"))
                        if (!$util.isInteger(message.totalVolume))
                            return "totalVolume: integer expected";
                    if (message.tradedVolume != null && message.hasOwnProperty("tradedVolume"))
                        if (!$util.isInteger(message.tradedVolume))
                            return "tradedVolume: integer expected";
                    if (message.tradingDay != null && message.hasOwnProperty("tradingDay"))
                        if (!$util.isString(message.tradingDay))
                            return "tradingDay: string expected";
                    if (message.orderDate != null && message.hasOwnProperty("orderDate"))
                        if (!$util.isString(message.orderDate))
                            return "orderDate: string expected";
                    if (message.orderTime != null && message.hasOwnProperty("orderTime"))
                        if (!$util.isString(message.orderTime))
                            return "orderTime: string expected";
                    if (message.cancelTime != null && message.hasOwnProperty("cancelTime"))
                        if (!$util.isString(message.cancelTime))
                            return "cancelTime: string expected";
                    if (message.activeTime != null && message.hasOwnProperty("activeTime"))
                        if (!$util.isString(message.activeTime))
                            return "activeTime: string expected";
                    if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                        if (!$util.isString(message.updateTime))
                            return "updateTime: string expected";
                    if (message.statusInfo != null && message.hasOwnProperty("statusInfo"))
                        if (!$util.isString(message.statusInfo))
                            return "statusInfo: string expected";
                    if (message.timeConditionType != null && message.hasOwnProperty("timeConditionType"))
                        switch (message.timeConditionType) {
                        default:
                            return "timeConditionType: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.frontId != null && message.hasOwnProperty("frontId"))
                        if (!$util.isInteger(message.frontId))
                            return "frontId: integer expected";
                    if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                        if (!$util.isInteger(message.sessionId))
                            return "sessionId: integer expected";
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);
                        if (error)
                            return "contract." + error;
                    }
                    if (message.gateway != null && message.hasOwnProperty("gateway")) {
                        var error = $root.xyz.redtorch.pb.GatewayField.verify(message.gateway);
                        if (error)
                            return "gateway." + error;
                    }
                    return null;
                };

                /**
                 * Creates an OrderField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.OrderField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.OrderField} OrderField
                 */
                OrderField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.OrderField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.OrderField();
                    if (object.originOrderId != null)
                        message.originOrderId = String(object.originOrderId);
                    if (object.orderId != null)
                        message.orderId = String(object.orderId);
                    if (object.adapterOrderId != null)
                        message.adapterOrderId = String(object.adapterOrderId);
                    if (object.accountId != null)
                        message.accountId = String(object.accountId);
                    switch (object.direction) {
                    case "UNKNOWN_DIRECTION":
                    case 0:
                        message.direction = 0;
                        break;
                    case "LONG":
                    case 1:
                        message.direction = 1;
                        break;
                    case "SHORT":
                    case 2:
                        message.direction = 2;
                        break;
                    case "NET":
                    case 3:
                        message.direction = 3;
                        break;
                    }
                    switch (object.offset) {
                    case "UNKNOWN_OFFSET":
                    case 0:
                        message.offset = 0;
                        break;
                    case "OFFSET_NONE":
                    case 1:
                        message.offset = 1;
                        break;
                    case "OPEN":
                    case 2:
                        message.offset = 2;
                        break;
                    case "CLOSE":
                    case 3:
                        message.offset = 3;
                        break;
                    case "CLOSE_TODAY":
                    case 4:
                        message.offset = 4;
                        break;
                    case "CLOSE_YESTERDAY":
                    case 5:
                        message.offset = 5;
                        break;
                    }
                    switch (object.orderStatus) {
                    case "UNKNOWN_ORDER_STATUS":
                    case 0:
                        message.orderStatus = 0;
                        break;
                    case "NOT_TRADED":
                    case 1:
                        message.orderStatus = 1;
                        break;
                    case "PART_TRADED":
                    case 2:
                        message.orderStatus = 2;
                        break;
                    case "ALL_TRADED":
                    case 3:
                        message.orderStatus = 3;
                        break;
                    case "CANCELLED":
                    case 4:
                        message.orderStatus = 4;
                        break;
                    case "REJECTED":
                    case 5:
                        message.orderStatus = 5;
                        break;
                    case "SUBMITTING":
                    case 6:
                        message.orderStatus = 6;
                        break;
                    }
                    if (object.price != null)
                        message.price = Number(object.price);
                    if (object.totalVolume != null)
                        message.totalVolume = object.totalVolume >>> 0;
                    if (object.tradedVolume != null)
                        message.tradedVolume = object.tradedVolume >>> 0;
                    if (object.tradingDay != null)
                        message.tradingDay = String(object.tradingDay);
                    if (object.orderDate != null)
                        message.orderDate = String(object.orderDate);
                    if (object.orderTime != null)
                        message.orderTime = String(object.orderTime);
                    if (object.cancelTime != null)
                        message.cancelTime = String(object.cancelTime);
                    if (object.activeTime != null)
                        message.activeTime = String(object.activeTime);
                    if (object.updateTime != null)
                        message.updateTime = String(object.updateTime);
                    if (object.statusInfo != null)
                        message.statusInfo = String(object.statusInfo);
                    switch (object.timeConditionType) {
                    case "UNKNOWN_TIME_CONDITION_TYPE":
                    case 0:
                        message.timeConditionType = 0;
                        break;
                    case "GTC":
                    case 1:
                        message.timeConditionType = 1;
                        break;
                    case "GFD":
                    case 2:
                        message.timeConditionType = 2;
                        break;
                    }
                    if (object.frontId != null)
                        message.frontId = object.frontId >>> 0;
                    if (object.sessionId != null)
                        message.sessionId = object.sessionId >>> 0;
                    if (object.contract != null) {
                        if (typeof object.contract !== "object")
                            throw TypeError(".xyz.redtorch.pb.OrderField.contract: object expected");
                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);
                    }
                    if (object.gateway != null) {
                        if (typeof object.gateway !== "object")
                            throw TypeError(".xyz.redtorch.pb.OrderField.gateway: object expected");
                        message.gateway = $root.xyz.redtorch.pb.GatewayField.fromObject(object.gateway);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an OrderField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.OrderField
                 * @static
                 * @param {xyz.redtorch.pb.OrderField} message OrderField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OrderField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.originOrderId = "";
                        object.orderId = "";
                        object.adapterOrderId = "";
                        object.accountId = "";
                        object.direction = options.enums === String ? "UNKNOWN_DIRECTION" : 0;
                        object.offset = options.enums === String ? "UNKNOWN_OFFSET" : 0;
                        object.orderStatus = options.enums === String ? "UNKNOWN_ORDER_STATUS" : 0;
                        object.price = 0;
                        object.totalVolume = 0;
                        object.tradedVolume = 0;
                        object.tradingDay = "";
                        object.orderDate = "";
                        object.orderTime = "";
                        object.cancelTime = "";
                        object.activeTime = "";
                        object.updateTime = "";
                        object.statusInfo = "";
                        object.timeConditionType = options.enums === String ? "UNKNOWN_TIME_CONDITION_TYPE" : 0;
                        object.frontId = 0;
                        object.sessionId = 0;
                        object.contract = null;
                        object.gateway = null;
                    }
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        object.originOrderId = message.originOrderId;
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        object.orderId = message.orderId;
                    if (message.adapterOrderId != null && message.hasOwnProperty("adapterOrderId"))
                        object.adapterOrderId = message.adapterOrderId;
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        object.accountId = message.accountId;
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        object.direction = options.enums === String ? $root.xyz.redtorch.pb.DirectionEnum[message.direction] : message.direction;
                    if (message.offset != null && message.hasOwnProperty("offset"))
                        object.offset = options.enums === String ? $root.xyz.redtorch.pb.OffsetEnum[message.offset] : message.offset;
                    if (message.orderStatus != null && message.hasOwnProperty("orderStatus"))
                        object.orderStatus = options.enums === String ? $root.xyz.redtorch.pb.OrderStatusEnum[message.orderStatus] : message.orderStatus;
                    if (message.price != null && message.hasOwnProperty("price"))
                        object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
                    if (message.totalVolume != null && message.hasOwnProperty("totalVolume"))
                        object.totalVolume = message.totalVolume;
                    if (message.tradedVolume != null && message.hasOwnProperty("tradedVolume"))
                        object.tradedVolume = message.tradedVolume;
                    if (message.tradingDay != null && message.hasOwnProperty("tradingDay"))
                        object.tradingDay = message.tradingDay;
                    if (message.orderDate != null && message.hasOwnProperty("orderDate"))
                        object.orderDate = message.orderDate;
                    if (message.orderTime != null && message.hasOwnProperty("orderTime"))
                        object.orderTime = message.orderTime;
                    if (message.cancelTime != null && message.hasOwnProperty("cancelTime"))
                        object.cancelTime = message.cancelTime;
                    if (message.activeTime != null && message.hasOwnProperty("activeTime"))
                        object.activeTime = message.activeTime;
                    if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                        object.updateTime = message.updateTime;
                    if (message.statusInfo != null && message.hasOwnProperty("statusInfo"))
                        object.statusInfo = message.statusInfo;
                    if (message.timeConditionType != null && message.hasOwnProperty("timeConditionType"))
                        object.timeConditionType = options.enums === String ? $root.xyz.redtorch.pb.TimeConditionTypeEnum[message.timeConditionType] : message.timeConditionType;
                    if (message.frontId != null && message.hasOwnProperty("frontId"))
                        object.frontId = message.frontId;
                    if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                        object.sessionId = message.sessionId;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        object.gateway = $root.xyz.redtorch.pb.GatewayField.toObject(message.gateway, options);
                    return object;
                };

                /**
                 * Converts this OrderField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.OrderField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OrderField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return OrderField;
            })();

            pb.TradeField = (function() {

                /**
                 * Properties of a TradeField.
                 * @memberof xyz.redtorch.pb
                 * @interface ITradeField
                 * @property {string|null} [tradeId] TradeField tradeId
                 * @property {string|null} [adapterTradeId] TradeField adapterTradeId
                 * @property {string|null} [originOrderId] TradeField originOrderId
                 * @property {string|null} [orderId] TradeField orderId
                 * @property {string|null} [adapterOrderId] TradeField adapterOrderId
                 * @property {string|null} [accountId] TradeField accountId
                 * @property {xyz.redtorch.pb.DirectionEnum|null} [direction] TradeField direction
                 * @property {xyz.redtorch.pb.OffsetEnum|null} [offset] TradeField offset
                 * @property {number|null} [price] TradeField price
                 * @property {number|null} [volume] TradeField volume
                 * @property {string|null} [tradingDay] TradeField tradingDay
                 * @property {string|null} [tradeDate] TradeField tradeDate
                 * @property {string|null} [tradeTime] TradeField tradeTime
                 * @property {number|Long|null} [tradeTimestamp] TradeField tradeTimestamp
                 * @property {xyz.redtorch.pb.IContractField|null} [contract] TradeField contract
                 * @property {xyz.redtorch.pb.IGatewayField|null} [gateway] TradeField gateway
                 */

                /**
                 * Constructs a new TradeField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a TradeField.
                 * @implements ITradeField
                 * @constructor
                 * @param {xyz.redtorch.pb.ITradeField=} [properties] Properties to set
                 */
                function TradeField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TradeField tradeId.
                 * @member {string} tradeId
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.tradeId = "";

                /**
                 * TradeField adapterTradeId.
                 * @member {string} adapterTradeId
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.adapterTradeId = "";

                /**
                 * TradeField originOrderId.
                 * @member {string} originOrderId
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.originOrderId = "";

                /**
                 * TradeField orderId.
                 * @member {string} orderId
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.orderId = "";

                /**
                 * TradeField adapterOrderId.
                 * @member {string} adapterOrderId
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.adapterOrderId = "";

                /**
                 * TradeField accountId.
                 * @member {string} accountId
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.accountId = "";

                /**
                 * TradeField direction.
                 * @member {xyz.redtorch.pb.DirectionEnum} direction
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.direction = 0;

                /**
                 * TradeField offset.
                 * @member {xyz.redtorch.pb.OffsetEnum} offset
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.offset = 0;

                /**
                 * TradeField price.
                 * @member {number} price
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.price = 0;

                /**
                 * TradeField volume.
                 * @member {number} volume
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.volume = 0;

                /**
                 * TradeField tradingDay.
                 * @member {string} tradingDay
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.tradingDay = "";

                /**
                 * TradeField tradeDate.
                 * @member {string} tradeDate
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.tradeDate = "";

                /**
                 * TradeField tradeTime.
                 * @member {string} tradeTime
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.tradeTime = "";

                /**
                 * TradeField tradeTimestamp.
                 * @member {number|Long} tradeTimestamp
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.tradeTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * TradeField contract.
                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.contract = null;

                /**
                 * TradeField gateway.
                 * @member {xyz.redtorch.pb.IGatewayField|null|undefined} gateway
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 */
                TradeField.prototype.gateway = null;

                /**
                 * Creates a new TradeField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.TradeField
                 * @static
                 * @param {xyz.redtorch.pb.ITradeField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.TradeField} TradeField instance
                 */
                TradeField.create = function create(properties) {
                    return new TradeField(properties);
                };

                /**
                 * Encodes the specified TradeField message. Does not implicitly {@link xyz.redtorch.pb.TradeField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.TradeField
                 * @static
                 * @param {xyz.redtorch.pb.ITradeField} message TradeField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TradeField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.tradeId != null && message.hasOwnProperty("tradeId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.tradeId);
                    if (message.adapterTradeId != null && message.hasOwnProperty("adapterTradeId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.adapterTradeId);
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.originOrderId);
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.orderId);
                    if (message.adapterOrderId != null && message.hasOwnProperty("adapterOrderId"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.adapterOrderId);
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.accountId);
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.direction);
                    if (message.offset != null && message.hasOwnProperty("offset"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.offset);
                    if (message.price != null && message.hasOwnProperty("price"))
                        writer.uint32(/* id 9, wireType 1 =*/73).double(message.price);
                    if (message.volume != null && message.hasOwnProperty("volume"))
                        writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.volume);
                    if (message.tradingDay != null && message.hasOwnProperty("tradingDay"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.tradingDay);
                    if (message.tradeDate != null && message.hasOwnProperty("tradeDate"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.tradeDate);
                    if (message.tradeTime != null && message.hasOwnProperty("tradeTime"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.tradeTime);
                    if (message.tradeTimestamp != null && message.hasOwnProperty("tradeTimestamp"))
                        writer.uint32(/* id 14, wireType 1 =*/113).fixed64(message.tradeTimestamp);
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        $root.xyz.redtorch.pb.GatewayField.encode(message.gateway, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified TradeField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.TradeField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.TradeField
                 * @static
                 * @param {xyz.redtorch.pb.ITradeField} message TradeField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TradeField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TradeField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.TradeField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.TradeField} TradeField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TradeField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.TradeField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.tradeId = reader.string();
                            break;
                        case 2:
                            message.adapterTradeId = reader.string();
                            break;
                        case 3:
                            message.originOrderId = reader.string();
                            break;
                        case 4:
                            message.orderId = reader.string();
                            break;
                        case 5:
                            message.adapterOrderId = reader.string();
                            break;
                        case 6:
                            message.accountId = reader.string();
                            break;
                        case 7:
                            message.direction = reader.int32();
                            break;
                        case 8:
                            message.offset = reader.int32();
                            break;
                        case 9:
                            message.price = reader.double();
                            break;
                        case 10:
                            message.volume = reader.fixed32();
                            break;
                        case 11:
                            message.tradingDay = reader.string();
                            break;
                        case 12:
                            message.tradeDate = reader.string();
                            break;
                        case 13:
                            message.tradeTime = reader.string();
                            break;
                        case 14:
                            message.tradeTimestamp = reader.fixed64();
                            break;
                        case 15:
                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());
                            break;
                        case 16:
                            message.gateway = $root.xyz.redtorch.pb.GatewayField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a TradeField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.TradeField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.TradeField} TradeField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TradeField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TradeField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.TradeField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TradeField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.tradeId != null && message.hasOwnProperty("tradeId"))
                        if (!$util.isString(message.tradeId))
                            return "tradeId: string expected";
                    if (message.adapterTradeId != null && message.hasOwnProperty("adapterTradeId"))
                        if (!$util.isString(message.adapterTradeId))
                            return "adapterTradeId: string expected";
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        if (!$util.isString(message.originOrderId))
                            return "originOrderId: string expected";
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        if (!$util.isString(message.orderId))
                            return "orderId: string expected";
                    if (message.adapterOrderId != null && message.hasOwnProperty("adapterOrderId"))
                        if (!$util.isString(message.adapterOrderId))
                            return "adapterOrderId: string expected";
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        if (!$util.isString(message.accountId))
                            return "accountId: string expected";
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        switch (message.direction) {
                        default:
                            return "direction: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.offset != null && message.hasOwnProperty("offset"))
                        switch (message.offset) {
                        default:
                            return "offset: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.price != null && message.hasOwnProperty("price"))
                        if (typeof message.price !== "number")
                            return "price: number expected";
                    if (message.volume != null && message.hasOwnProperty("volume"))
                        if (!$util.isInteger(message.volume))
                            return "volume: integer expected";
                    if (message.tradingDay != null && message.hasOwnProperty("tradingDay"))
                        if (!$util.isString(message.tradingDay))
                            return "tradingDay: string expected";
                    if (message.tradeDate != null && message.hasOwnProperty("tradeDate"))
                        if (!$util.isString(message.tradeDate))
                            return "tradeDate: string expected";
                    if (message.tradeTime != null && message.hasOwnProperty("tradeTime"))
                        if (!$util.isString(message.tradeTime))
                            return "tradeTime: string expected";
                    if (message.tradeTimestamp != null && message.hasOwnProperty("tradeTimestamp"))
                        if (!$util.isInteger(message.tradeTimestamp) && !(message.tradeTimestamp && $util.isInteger(message.tradeTimestamp.low) && $util.isInteger(message.tradeTimestamp.high)))
                            return "tradeTimestamp: integer|Long expected";
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);
                        if (error)
                            return "contract." + error;
                    }
                    if (message.gateway != null && message.hasOwnProperty("gateway")) {
                        var error = $root.xyz.redtorch.pb.GatewayField.verify(message.gateway);
                        if (error)
                            return "gateway." + error;
                    }
                    return null;
                };

                /**
                 * Creates a TradeField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.TradeField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.TradeField} TradeField
                 */
                TradeField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.TradeField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.TradeField();
                    if (object.tradeId != null)
                        message.tradeId = String(object.tradeId);
                    if (object.adapterTradeId != null)
                        message.adapterTradeId = String(object.adapterTradeId);
                    if (object.originOrderId != null)
                        message.originOrderId = String(object.originOrderId);
                    if (object.orderId != null)
                        message.orderId = String(object.orderId);
                    if (object.adapterOrderId != null)
                        message.adapterOrderId = String(object.adapterOrderId);
                    if (object.accountId != null)
                        message.accountId = String(object.accountId);
                    switch (object.direction) {
                    case "UNKNOWN_DIRECTION":
                    case 0:
                        message.direction = 0;
                        break;
                    case "LONG":
                    case 1:
                        message.direction = 1;
                        break;
                    case "SHORT":
                    case 2:
                        message.direction = 2;
                        break;
                    case "NET":
                    case 3:
                        message.direction = 3;
                        break;
                    }
                    switch (object.offset) {
                    case "UNKNOWN_OFFSET":
                    case 0:
                        message.offset = 0;
                        break;
                    case "OFFSET_NONE":
                    case 1:
                        message.offset = 1;
                        break;
                    case "OPEN":
                    case 2:
                        message.offset = 2;
                        break;
                    case "CLOSE":
                    case 3:
                        message.offset = 3;
                        break;
                    case "CLOSE_TODAY":
                    case 4:
                        message.offset = 4;
                        break;
                    case "CLOSE_YESTERDAY":
                    case 5:
                        message.offset = 5;
                        break;
                    }
                    if (object.price != null)
                        message.price = Number(object.price);
                    if (object.volume != null)
                        message.volume = object.volume >>> 0;
                    if (object.tradingDay != null)
                        message.tradingDay = String(object.tradingDay);
                    if (object.tradeDate != null)
                        message.tradeDate = String(object.tradeDate);
                    if (object.tradeTime != null)
                        message.tradeTime = String(object.tradeTime);
                    if (object.tradeTimestamp != null)
                        if ($util.Long)
                            (message.tradeTimestamp = $util.Long.fromValue(object.tradeTimestamp)).unsigned = false;
                        else if (typeof object.tradeTimestamp === "string")
                            message.tradeTimestamp = parseInt(object.tradeTimestamp, 10);
                        else if (typeof object.tradeTimestamp === "number")
                            message.tradeTimestamp = object.tradeTimestamp;
                        else if (typeof object.tradeTimestamp === "object")
                            message.tradeTimestamp = new $util.LongBits(object.tradeTimestamp.low >>> 0, object.tradeTimestamp.high >>> 0).toNumber();
                    if (object.contract != null) {
                        if (typeof object.contract !== "object")
                            throw TypeError(".xyz.redtorch.pb.TradeField.contract: object expected");
                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);
                    }
                    if (object.gateway != null) {
                        if (typeof object.gateway !== "object")
                            throw TypeError(".xyz.redtorch.pb.TradeField.gateway: object expected");
                        message.gateway = $root.xyz.redtorch.pb.GatewayField.fromObject(object.gateway);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a TradeField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.TradeField
                 * @static
                 * @param {xyz.redtorch.pb.TradeField} message TradeField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TradeField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.tradeId = "";
                        object.adapterTradeId = "";
                        object.originOrderId = "";
                        object.orderId = "";
                        object.adapterOrderId = "";
                        object.accountId = "";
                        object.direction = options.enums === String ? "UNKNOWN_DIRECTION" : 0;
                        object.offset = options.enums === String ? "UNKNOWN_OFFSET" : 0;
                        object.price = 0;
                        object.volume = 0;
                        object.tradingDay = "";
                        object.tradeDate = "";
                        object.tradeTime = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.tradeTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.tradeTimestamp = options.longs === String ? "0" : 0;
                        object.contract = null;
                        object.gateway = null;
                    }
                    if (message.tradeId != null && message.hasOwnProperty("tradeId"))
                        object.tradeId = message.tradeId;
                    if (message.adapterTradeId != null && message.hasOwnProperty("adapterTradeId"))
                        object.adapterTradeId = message.adapterTradeId;
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        object.originOrderId = message.originOrderId;
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        object.orderId = message.orderId;
                    if (message.adapterOrderId != null && message.hasOwnProperty("adapterOrderId"))
                        object.adapterOrderId = message.adapterOrderId;
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        object.accountId = message.accountId;
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        object.direction = options.enums === String ? $root.xyz.redtorch.pb.DirectionEnum[message.direction] : message.direction;
                    if (message.offset != null && message.hasOwnProperty("offset"))
                        object.offset = options.enums === String ? $root.xyz.redtorch.pb.OffsetEnum[message.offset] : message.offset;
                    if (message.price != null && message.hasOwnProperty("price"))
                        object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
                    if (message.volume != null && message.hasOwnProperty("volume"))
                        object.volume = message.volume;
                    if (message.tradingDay != null && message.hasOwnProperty("tradingDay"))
                        object.tradingDay = message.tradingDay;
                    if (message.tradeDate != null && message.hasOwnProperty("tradeDate"))
                        object.tradeDate = message.tradeDate;
                    if (message.tradeTime != null && message.hasOwnProperty("tradeTime"))
                        object.tradeTime = message.tradeTime;
                    if (message.tradeTimestamp != null && message.hasOwnProperty("tradeTimestamp"))
                        if (typeof message.tradeTimestamp === "number")
                            object.tradeTimestamp = options.longs === String ? String(message.tradeTimestamp) : message.tradeTimestamp;
                        else
                            object.tradeTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.tradeTimestamp) : options.longs === Number ? new $util.LongBits(message.tradeTimestamp.low >>> 0, message.tradeTimestamp.high >>> 0).toNumber() : message.tradeTimestamp;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        object.gateway = $root.xyz.redtorch.pb.GatewayField.toObject(message.gateway, options);
                    return object;
                };

                /**
                 * Converts this TradeField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.TradeField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TradeField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return TradeField;
            })();

            pb.PositionField = (function() {

                /**
                 * Properties of a PositionField.
                 * @memberof xyz.redtorch.pb
                 * @interface IPositionField
                 * @property {string|null} [positionId] PositionField positionId
                 * @property {string|null} [accountId] PositionField accountId
                 * @property {xyz.redtorch.pb.DirectionEnum|null} [direction] PositionField direction
                 * @property {number|null} [position] PositionField position
                 * @property {number|null} [frozen] PositionField frozen
                 * @property {number|null} [ydPosition] PositionField ydPosition
                 * @property {number|null} [ydFrozen] PositionField ydFrozen
                 * @property {number|null} [tdPosition] PositionField tdPosition
                 * @property {number|null} [tdFrozen] PositionField tdFrozen
                 * @property {number|null} [lastPrice] PositionField lastPrice
                 * @property {number|null} [price] PositionField price
                 * @property {number|null} [priceDiff] PositionField priceDiff
                 * @property {number|null} [openPrice] PositionField openPrice
                 * @property {number|null} [openPriceDiff] PositionField openPriceDiff
                 * @property {number|null} [positionProfit] PositionField positionProfit
                 * @property {number|null} [positionProfitRatio] PositionField positionProfitRatio
                 * @property {number|null} [openPositionProfit] PositionField openPositionProfit
                 * @property {number|null} [openPositionProfitRatio] PositionField openPositionProfitRatio
                 * @property {number|null} [useMargin] PositionField useMargin
                 * @property {number|null} [exchangeMargin] PositionField exchangeMargin
                 * @property {number|null} [contractValue] PositionField contractValue
                 * @property {xyz.redtorch.pb.IContractField|null} [contract] PositionField contract
                 * @property {xyz.redtorch.pb.IGatewayField|null} [gateway] PositionField gateway
                 */

                /**
                 * Constructs a new PositionField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a PositionField.
                 * @implements IPositionField
                 * @constructor
                 * @param {xyz.redtorch.pb.IPositionField=} [properties] Properties to set
                 */
                function PositionField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PositionField positionId.
                 * @member {string} positionId
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.positionId = "";

                /**
                 * PositionField accountId.
                 * @member {string} accountId
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.accountId = "";

                /**
                 * PositionField direction.
                 * @member {xyz.redtorch.pb.DirectionEnum} direction
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.direction = 0;

                /**
                 * PositionField position.
                 * @member {number} position
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.position = 0;

                /**
                 * PositionField frozen.
                 * @member {number} frozen
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.frozen = 0;

                /**
                 * PositionField ydPosition.
                 * @member {number} ydPosition
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.ydPosition = 0;

                /**
                 * PositionField ydFrozen.
                 * @member {number} ydFrozen
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.ydFrozen = 0;

                /**
                 * PositionField tdPosition.
                 * @member {number} tdPosition
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.tdPosition = 0;

                /**
                 * PositionField tdFrozen.
                 * @member {number} tdFrozen
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.tdFrozen = 0;

                /**
                 * PositionField lastPrice.
                 * @member {number} lastPrice
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.lastPrice = 0;

                /**
                 * PositionField price.
                 * @member {number} price
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.price = 0;

                /**
                 * PositionField priceDiff.
                 * @member {number} priceDiff
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.priceDiff = 0;

                /**
                 * PositionField openPrice.
                 * @member {number} openPrice
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.openPrice = 0;

                /**
                 * PositionField openPriceDiff.
                 * @member {number} openPriceDiff
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.openPriceDiff = 0;

                /**
                 * PositionField positionProfit.
                 * @member {number} positionProfit
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.positionProfit = 0;

                /**
                 * PositionField positionProfitRatio.
                 * @member {number} positionProfitRatio
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.positionProfitRatio = 0;

                /**
                 * PositionField openPositionProfit.
                 * @member {number} openPositionProfit
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.openPositionProfit = 0;

                /**
                 * PositionField openPositionProfitRatio.
                 * @member {number} openPositionProfitRatio
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.openPositionProfitRatio = 0;

                /**
                 * PositionField useMargin.
                 * @member {number} useMargin
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.useMargin = 0;

                /**
                 * PositionField exchangeMargin.
                 * @member {number} exchangeMargin
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.exchangeMargin = 0;

                /**
                 * PositionField contractValue.
                 * @member {number} contractValue
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.contractValue = 0;

                /**
                 * PositionField contract.
                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.contract = null;

                /**
                 * PositionField gateway.
                 * @member {xyz.redtorch.pb.IGatewayField|null|undefined} gateway
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 */
                PositionField.prototype.gateway = null;

                /**
                 * Creates a new PositionField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.PositionField
                 * @static
                 * @param {xyz.redtorch.pb.IPositionField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.PositionField} PositionField instance
                 */
                PositionField.create = function create(properties) {
                    return new PositionField(properties);
                };

                /**
                 * Encodes the specified PositionField message. Does not implicitly {@link xyz.redtorch.pb.PositionField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.PositionField
                 * @static
                 * @param {xyz.redtorch.pb.IPositionField} message PositionField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PositionField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.positionId != null && message.hasOwnProperty("positionId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.positionId);
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.direction);
                    if (message.position != null && message.hasOwnProperty("position"))
                        writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.position);
                    if (message.frozen != null && message.hasOwnProperty("frozen"))
                        writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.frozen);
                    if (message.ydPosition != null && message.hasOwnProperty("ydPosition"))
                        writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.ydPosition);
                    if (message.ydFrozen != null && message.hasOwnProperty("ydFrozen"))
                        writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.ydFrozen);
                    if (message.tdPosition != null && message.hasOwnProperty("tdPosition"))
                        writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.tdPosition);
                    if (message.tdFrozen != null && message.hasOwnProperty("tdFrozen"))
                        writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.tdFrozen);
                    if (message.lastPrice != null && message.hasOwnProperty("lastPrice"))
                        writer.uint32(/* id 10, wireType 1 =*/81).double(message.lastPrice);
                    if (message.price != null && message.hasOwnProperty("price"))
                        writer.uint32(/* id 11, wireType 1 =*/89).double(message.price);
                    if (message.priceDiff != null && message.hasOwnProperty("priceDiff"))
                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.priceDiff);
                    if (message.openPrice != null && message.hasOwnProperty("openPrice"))
                        writer.uint32(/* id 13, wireType 1 =*/105).double(message.openPrice);
                    if (message.openPriceDiff != null && message.hasOwnProperty("openPriceDiff"))
                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.openPriceDiff);
                    if (message.positionProfit != null && message.hasOwnProperty("positionProfit"))
                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.positionProfit);
                    if (message.positionProfitRatio != null && message.hasOwnProperty("positionProfitRatio"))
                        writer.uint32(/* id 16, wireType 1 =*/129).double(message.positionProfitRatio);
                    if (message.openPositionProfit != null && message.hasOwnProperty("openPositionProfit"))
                        writer.uint32(/* id 17, wireType 1 =*/137).double(message.openPositionProfit);
                    if (message.openPositionProfitRatio != null && message.hasOwnProperty("openPositionProfitRatio"))
                        writer.uint32(/* id 18, wireType 1 =*/145).double(message.openPositionProfitRatio);
                    if (message.useMargin != null && message.hasOwnProperty("useMargin"))
                        writer.uint32(/* id 19, wireType 1 =*/153).double(message.useMargin);
                    if (message.exchangeMargin != null && message.hasOwnProperty("exchangeMargin"))
                        writer.uint32(/* id 20, wireType 1 =*/161).double(message.exchangeMargin);
                    if (message.contractValue != null && message.hasOwnProperty("contractValue"))
                        writer.uint32(/* id 21, wireType 1 =*/169).double(message.contractValue);
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        $root.xyz.redtorch.pb.GatewayField.encode(message.gateway, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified PositionField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.PositionField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.PositionField
                 * @static
                 * @param {xyz.redtorch.pb.IPositionField} message PositionField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PositionField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PositionField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.PositionField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.PositionField} PositionField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PositionField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.PositionField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.positionId = reader.string();
                            break;
                        case 2:
                            message.accountId = reader.string();
                            break;
                        case 3:
                            message.direction = reader.int32();
                            break;
                        case 4:
                            message.position = reader.fixed32();
                            break;
                        case 5:
                            message.frozen = reader.fixed32();
                            break;
                        case 6:
                            message.ydPosition = reader.fixed32();
                            break;
                        case 7:
                            message.ydFrozen = reader.fixed32();
                            break;
                        case 8:
                            message.tdPosition = reader.fixed32();
                            break;
                        case 9:
                            message.tdFrozen = reader.fixed32();
                            break;
                        case 10:
                            message.lastPrice = reader.double();
                            break;
                        case 11:
                            message.price = reader.double();
                            break;
                        case 12:
                            message.priceDiff = reader.double();
                            break;
                        case 13:
                            message.openPrice = reader.double();
                            break;
                        case 14:
                            message.openPriceDiff = reader.double();
                            break;
                        case 15:
                            message.positionProfit = reader.double();
                            break;
                        case 16:
                            message.positionProfitRatio = reader.double();
                            break;
                        case 17:
                            message.openPositionProfit = reader.double();
                            break;
                        case 18:
                            message.openPositionProfitRatio = reader.double();
                            break;
                        case 19:
                            message.useMargin = reader.double();
                            break;
                        case 20:
                            message.exchangeMargin = reader.double();
                            break;
                        case 21:
                            message.contractValue = reader.double();
                            break;
                        case 22:
                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());
                            break;
                        case 23:
                            message.gateway = $root.xyz.redtorch.pb.GatewayField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PositionField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.PositionField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.PositionField} PositionField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PositionField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PositionField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.PositionField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PositionField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.positionId != null && message.hasOwnProperty("positionId"))
                        if (!$util.isString(message.positionId))
                            return "positionId: string expected";
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        if (!$util.isString(message.accountId))
                            return "accountId: string expected";
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        switch (message.direction) {
                        default:
                            return "direction: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.position != null && message.hasOwnProperty("position"))
                        if (!$util.isInteger(message.position))
                            return "position: integer expected";
                    if (message.frozen != null && message.hasOwnProperty("frozen"))
                        if (!$util.isInteger(message.frozen))
                            return "frozen: integer expected";
                    if (message.ydPosition != null && message.hasOwnProperty("ydPosition"))
                        if (!$util.isInteger(message.ydPosition))
                            return "ydPosition: integer expected";
                    if (message.ydFrozen != null && message.hasOwnProperty("ydFrozen"))
                        if (!$util.isInteger(message.ydFrozen))
                            return "ydFrozen: integer expected";
                    if (message.tdPosition != null && message.hasOwnProperty("tdPosition"))
                        if (!$util.isInteger(message.tdPosition))
                            return "tdPosition: integer expected";
                    if (message.tdFrozen != null && message.hasOwnProperty("tdFrozen"))
                        if (!$util.isInteger(message.tdFrozen))
                            return "tdFrozen: integer expected";
                    if (message.lastPrice != null && message.hasOwnProperty("lastPrice"))
                        if (typeof message.lastPrice !== "number")
                            return "lastPrice: number expected";
                    if (message.price != null && message.hasOwnProperty("price"))
                        if (typeof message.price !== "number")
                            return "price: number expected";
                    if (message.priceDiff != null && message.hasOwnProperty("priceDiff"))
                        if (typeof message.priceDiff !== "number")
                            return "priceDiff: number expected";
                    if (message.openPrice != null && message.hasOwnProperty("openPrice"))
                        if (typeof message.openPrice !== "number")
                            return "openPrice: number expected";
                    if (message.openPriceDiff != null && message.hasOwnProperty("openPriceDiff"))
                        if (typeof message.openPriceDiff !== "number")
                            return "openPriceDiff: number expected";
                    if (message.positionProfit != null && message.hasOwnProperty("positionProfit"))
                        if (typeof message.positionProfit !== "number")
                            return "positionProfit: number expected";
                    if (message.positionProfitRatio != null && message.hasOwnProperty("positionProfitRatio"))
                        if (typeof message.positionProfitRatio !== "number")
                            return "positionProfitRatio: number expected";
                    if (message.openPositionProfit != null && message.hasOwnProperty("openPositionProfit"))
                        if (typeof message.openPositionProfit !== "number")
                            return "openPositionProfit: number expected";
                    if (message.openPositionProfitRatio != null && message.hasOwnProperty("openPositionProfitRatio"))
                        if (typeof message.openPositionProfitRatio !== "number")
                            return "openPositionProfitRatio: number expected";
                    if (message.useMargin != null && message.hasOwnProperty("useMargin"))
                        if (typeof message.useMargin !== "number")
                            return "useMargin: number expected";
                    if (message.exchangeMargin != null && message.hasOwnProperty("exchangeMargin"))
                        if (typeof message.exchangeMargin !== "number")
                            return "exchangeMargin: number expected";
                    if (message.contractValue != null && message.hasOwnProperty("contractValue"))
                        if (typeof message.contractValue !== "number")
                            return "contractValue: number expected";
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);
                        if (error)
                            return "contract." + error;
                    }
                    if (message.gateway != null && message.hasOwnProperty("gateway")) {
                        var error = $root.xyz.redtorch.pb.GatewayField.verify(message.gateway);
                        if (error)
                            return "gateway." + error;
                    }
                    return null;
                };

                /**
                 * Creates a PositionField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.PositionField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.PositionField} PositionField
                 */
                PositionField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.PositionField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.PositionField();
                    if (object.positionId != null)
                        message.positionId = String(object.positionId);
                    if (object.accountId != null)
                        message.accountId = String(object.accountId);
                    switch (object.direction) {
                    case "UNKNOWN_DIRECTION":
                    case 0:
                        message.direction = 0;
                        break;
                    case "LONG":
                    case 1:
                        message.direction = 1;
                        break;
                    case "SHORT":
                    case 2:
                        message.direction = 2;
                        break;
                    case "NET":
                    case 3:
                        message.direction = 3;
                        break;
                    }
                    if (object.position != null)
                        message.position = object.position >>> 0;
                    if (object.frozen != null)
                        message.frozen = object.frozen >>> 0;
                    if (object.ydPosition != null)
                        message.ydPosition = object.ydPosition >>> 0;
                    if (object.ydFrozen != null)
                        message.ydFrozen = object.ydFrozen >>> 0;
                    if (object.tdPosition != null)
                        message.tdPosition = object.tdPosition >>> 0;
                    if (object.tdFrozen != null)
                        message.tdFrozen = object.tdFrozen >>> 0;
                    if (object.lastPrice != null)
                        message.lastPrice = Number(object.lastPrice);
                    if (object.price != null)
                        message.price = Number(object.price);
                    if (object.priceDiff != null)
                        message.priceDiff = Number(object.priceDiff);
                    if (object.openPrice != null)
                        message.openPrice = Number(object.openPrice);
                    if (object.openPriceDiff != null)
                        message.openPriceDiff = Number(object.openPriceDiff);
                    if (object.positionProfit != null)
                        message.positionProfit = Number(object.positionProfit);
                    if (object.positionProfitRatio != null)
                        message.positionProfitRatio = Number(object.positionProfitRatio);
                    if (object.openPositionProfit != null)
                        message.openPositionProfit = Number(object.openPositionProfit);
                    if (object.openPositionProfitRatio != null)
                        message.openPositionProfitRatio = Number(object.openPositionProfitRatio);
                    if (object.useMargin != null)
                        message.useMargin = Number(object.useMargin);
                    if (object.exchangeMargin != null)
                        message.exchangeMargin = Number(object.exchangeMargin);
                    if (object.contractValue != null)
                        message.contractValue = Number(object.contractValue);
                    if (object.contract != null) {
                        if (typeof object.contract !== "object")
                            throw TypeError(".xyz.redtorch.pb.PositionField.contract: object expected");
                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);
                    }
                    if (object.gateway != null) {
                        if (typeof object.gateway !== "object")
                            throw TypeError(".xyz.redtorch.pb.PositionField.gateway: object expected");
                        message.gateway = $root.xyz.redtorch.pb.GatewayField.fromObject(object.gateway);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a PositionField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.PositionField
                 * @static
                 * @param {xyz.redtorch.pb.PositionField} message PositionField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PositionField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.positionId = "";
                        object.accountId = "";
                        object.direction = options.enums === String ? "UNKNOWN_DIRECTION" : 0;
                        object.position = 0;
                        object.frozen = 0;
                        object.ydPosition = 0;
                        object.ydFrozen = 0;
                        object.tdPosition = 0;
                        object.tdFrozen = 0;
                        object.lastPrice = 0;
                        object.price = 0;
                        object.priceDiff = 0;
                        object.openPrice = 0;
                        object.openPriceDiff = 0;
                        object.positionProfit = 0;
                        object.positionProfitRatio = 0;
                        object.openPositionProfit = 0;
                        object.openPositionProfitRatio = 0;
                        object.useMargin = 0;
                        object.exchangeMargin = 0;
                        object.contractValue = 0;
                        object.contract = null;
                        object.gateway = null;
                    }
                    if (message.positionId != null && message.hasOwnProperty("positionId"))
                        object.positionId = message.positionId;
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        object.accountId = message.accountId;
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        object.direction = options.enums === String ? $root.xyz.redtorch.pb.DirectionEnum[message.direction] : message.direction;
                    if (message.position != null && message.hasOwnProperty("position"))
                        object.position = message.position;
                    if (message.frozen != null && message.hasOwnProperty("frozen"))
                        object.frozen = message.frozen;
                    if (message.ydPosition != null && message.hasOwnProperty("ydPosition"))
                        object.ydPosition = message.ydPosition;
                    if (message.ydFrozen != null && message.hasOwnProperty("ydFrozen"))
                        object.ydFrozen = message.ydFrozen;
                    if (message.tdPosition != null && message.hasOwnProperty("tdPosition"))
                        object.tdPosition = message.tdPosition;
                    if (message.tdFrozen != null && message.hasOwnProperty("tdFrozen"))
                        object.tdFrozen = message.tdFrozen;
                    if (message.lastPrice != null && message.hasOwnProperty("lastPrice"))
                        object.lastPrice = options.json && !isFinite(message.lastPrice) ? String(message.lastPrice) : message.lastPrice;
                    if (message.price != null && message.hasOwnProperty("price"))
                        object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
                    if (message.priceDiff != null && message.hasOwnProperty("priceDiff"))
                        object.priceDiff = options.json && !isFinite(message.priceDiff) ? String(message.priceDiff) : message.priceDiff;
                    if (message.openPrice != null && message.hasOwnProperty("openPrice"))
                        object.openPrice = options.json && !isFinite(message.openPrice) ? String(message.openPrice) : message.openPrice;
                    if (message.openPriceDiff != null && message.hasOwnProperty("openPriceDiff"))
                        object.openPriceDiff = options.json && !isFinite(message.openPriceDiff) ? String(message.openPriceDiff) : message.openPriceDiff;
                    if (message.positionProfit != null && message.hasOwnProperty("positionProfit"))
                        object.positionProfit = options.json && !isFinite(message.positionProfit) ? String(message.positionProfit) : message.positionProfit;
                    if (message.positionProfitRatio != null && message.hasOwnProperty("positionProfitRatio"))
                        object.positionProfitRatio = options.json && !isFinite(message.positionProfitRatio) ? String(message.positionProfitRatio) : message.positionProfitRatio;
                    if (message.openPositionProfit != null && message.hasOwnProperty("openPositionProfit"))
                        object.openPositionProfit = options.json && !isFinite(message.openPositionProfit) ? String(message.openPositionProfit) : message.openPositionProfit;
                    if (message.openPositionProfitRatio != null && message.hasOwnProperty("openPositionProfitRatio"))
                        object.openPositionProfitRatio = options.json && !isFinite(message.openPositionProfitRatio) ? String(message.openPositionProfitRatio) : message.openPositionProfitRatio;
                    if (message.useMargin != null && message.hasOwnProperty("useMargin"))
                        object.useMargin = options.json && !isFinite(message.useMargin) ? String(message.useMargin) : message.useMargin;
                    if (message.exchangeMargin != null && message.hasOwnProperty("exchangeMargin"))
                        object.exchangeMargin = options.json && !isFinite(message.exchangeMargin) ? String(message.exchangeMargin) : message.exchangeMargin;
                    if (message.contractValue != null && message.hasOwnProperty("contractValue"))
                        object.contractValue = options.json && !isFinite(message.contractValue) ? String(message.contractValue) : message.contractValue;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        object.gateway = $root.xyz.redtorch.pb.GatewayField.toObject(message.gateway, options);
                    return object;
                };

                /**
                 * Converts this PositionField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.PositionField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PositionField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return PositionField;
            })();

            pb.TickField = (function() {

                /**
                 * Properties of a TickField.
                 * @memberof xyz.redtorch.pb
                 * @interface ITickField
                 * @property {string|null} [dataSourceId] TickField dataSourceId
                 * @property {string|null} [tradingDay] TickField tradingDay
                 * @property {string|null} [actionDay] TickField actionDay
                 * @property {string|null} [actionTime] TickField actionTime
                 * @property {number|Long|null} [actionTimestamp] TickField actionTimestamp
                 * @property {number|null} [status] TickField status
                 * @property {number|null} [lastPrice] TickField lastPrice
                 * @property {number|null} [avgPrice] TickField avgPrice
                 * @property {number|Long|null} [totalBidVol] TickField totalBidVol
                 * @property {number|Long|null} [totalAskVol] TickField totalAskVol
                 * @property {number|null} [weightedAvgBidPrice] TickField weightedAvgBidPrice
                 * @property {number|null} [weightedAvgAskPrice] TickField weightedAvgAskPrice
                 * @property {number|null} [iopv] TickField iopv
                 * @property {number|null} [yieldToMaturity] TickField yieldToMaturity
                 * @property {number|null} [volumeChange] TickField volumeChange
                 * @property {number|Long|null} [volume] TickField volume
                 * @property {number|null} [turnover] TickField turnover
                 * @property {number|null} [turnoverChange] TickField turnoverChange
                 * @property {number|Long|null} [numTrades] TickField numTrades
                 * @property {number|Long|null} [numTradesChange] TickField numTradesChange
                 * @property {number|null} [openInterest] TickField openInterest
                 * @property {number|null} [openInterestChange] TickField openInterestChange
                 * @property {number|null} [preOpenInterest] TickField preOpenInterest
                 * @property {number|null} [preClosePrice] TickField preClosePrice
                 * @property {number|null} [settlePrice] TickField settlePrice
                 * @property {number|null} [preSettlePrice] TickField preSettlePrice
                 * @property {number|null} [openPrice] TickField openPrice
                 * @property {number|null} [highPrice] TickField highPrice
                 * @property {number|null} [lowPrice] TickField lowPrice
                 * @property {number|null} [upperLimit] TickField upperLimit
                 * @property {number|null} [lowerLimit] TickField lowerLimit
                 * @property {Array.<number>|null} [bidPrice] TickField bidPrice
                 * @property {Array.<number>|null} [askPrice] TickField askPrice
                 * @property {Array.<number>|null} [bidVolume] TickField bidVolume
                 * @property {Array.<number>|null} [askVolume] TickField askVolume
                 * @property {xyz.redtorch.pb.IContractField|null} [contract] TickField contract
                 * @property {xyz.redtorch.pb.IGatewayField|null} [gateway] TickField gateway
                 */

                /**
                 * Constructs a new TickField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a TickField.
                 * @implements ITickField
                 * @constructor
                 * @param {xyz.redtorch.pb.ITickField=} [properties] Properties to set
                 */
                function TickField(properties) {
                    this.bidPrice = [];
                    this.askPrice = [];
                    this.bidVolume = [];
                    this.askVolume = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TickField dataSourceId.
                 * @member {string} dataSourceId
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.dataSourceId = "";

                /**
                 * TickField tradingDay.
                 * @member {string} tradingDay
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.tradingDay = "";

                /**
                 * TickField actionDay.
                 * @member {string} actionDay
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.actionDay = "";

                /**
                 * TickField actionTime.
                 * @member {string} actionTime
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.actionTime = "";

                /**
                 * TickField actionTimestamp.
                 * @member {number|Long} actionTimestamp
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.actionTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * TickField status.
                 * @member {number} status
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.status = 0;

                /**
                 * TickField lastPrice.
                 * @member {number} lastPrice
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.lastPrice = 0;

                /**
                 * TickField avgPrice.
                 * @member {number} avgPrice
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.avgPrice = 0;

                /**
                 * TickField totalBidVol.
                 * @member {number|Long} totalBidVol
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.totalBidVol = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * TickField totalAskVol.
                 * @member {number|Long} totalAskVol
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.totalAskVol = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * TickField weightedAvgBidPrice.
                 * @member {number} weightedAvgBidPrice
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.weightedAvgBidPrice = 0;

                /**
                 * TickField weightedAvgAskPrice.
                 * @member {number} weightedAvgAskPrice
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.weightedAvgAskPrice = 0;

                /**
                 * TickField iopv.
                 * @member {number} iopv
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.iopv = 0;

                /**
                 * TickField yieldToMaturity.
                 * @member {number} yieldToMaturity
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.yieldToMaturity = 0;

                /**
                 * TickField volumeChange.
                 * @member {number} volumeChange
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.volumeChange = 0;

                /**
                 * TickField volume.
                 * @member {number|Long} volume
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.volume = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * TickField turnover.
                 * @member {number} turnover
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.turnover = 0;

                /**
                 * TickField turnoverChange.
                 * @member {number} turnoverChange
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.turnoverChange = 0;

                /**
                 * TickField numTrades.
                 * @member {number|Long} numTrades
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.numTrades = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * TickField numTradesChange.
                 * @member {number|Long} numTradesChange
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.numTradesChange = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * TickField openInterest.
                 * @member {number} openInterest
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.openInterest = 0;

                /**
                 * TickField openInterestChange.
                 * @member {number} openInterestChange
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.openInterestChange = 0;

                /**
                 * TickField preOpenInterest.
                 * @member {number} preOpenInterest
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.preOpenInterest = 0;

                /**
                 * TickField preClosePrice.
                 * @member {number} preClosePrice
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.preClosePrice = 0;

                /**
                 * TickField settlePrice.
                 * @member {number} settlePrice
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.settlePrice = 0;

                /**
                 * TickField preSettlePrice.
                 * @member {number} preSettlePrice
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.preSettlePrice = 0;

                /**
                 * TickField openPrice.
                 * @member {number} openPrice
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.openPrice = 0;

                /**
                 * TickField highPrice.
                 * @member {number} highPrice
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.highPrice = 0;

                /**
                 * TickField lowPrice.
                 * @member {number} lowPrice
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.lowPrice = 0;

                /**
                 * TickField upperLimit.
                 * @member {number} upperLimit
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.upperLimit = 0;

                /**
                 * TickField lowerLimit.
                 * @member {number} lowerLimit
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.lowerLimit = 0;

                /**
                 * TickField bidPrice.
                 * @member {Array.<number>} bidPrice
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.bidPrice = $util.emptyArray;

                /**
                 * TickField askPrice.
                 * @member {Array.<number>} askPrice
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.askPrice = $util.emptyArray;

                /**
                 * TickField bidVolume.
                 * @member {Array.<number>} bidVolume
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.bidVolume = $util.emptyArray;

                /**
                 * TickField askVolume.
                 * @member {Array.<number>} askVolume
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.askVolume = $util.emptyArray;

                /**
                 * TickField contract.
                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.contract = null;

                /**
                 * TickField gateway.
                 * @member {xyz.redtorch.pb.IGatewayField|null|undefined} gateway
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 */
                TickField.prototype.gateway = null;

                /**
                 * Creates a new TickField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.TickField
                 * @static
                 * @param {xyz.redtorch.pb.ITickField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.TickField} TickField instance
                 */
                TickField.create = function create(properties) {
                    return new TickField(properties);
                };

                /**
                 * Encodes the specified TickField message. Does not implicitly {@link xyz.redtorch.pb.TickField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.TickField
                 * @static
                 * @param {xyz.redtorch.pb.ITickField} message TickField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TickField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.dataSourceId != null && message.hasOwnProperty("dataSourceId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.dataSourceId);
                    if (message.tradingDay != null && message.hasOwnProperty("tradingDay"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.tradingDay);
                    if (message.actionDay != null && message.hasOwnProperty("actionDay"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.actionDay);
                    if (message.actionTime != null && message.hasOwnProperty("actionTime"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.actionTime);
                    if (message.actionTimestamp != null && message.hasOwnProperty("actionTimestamp"))
                        writer.uint32(/* id 5, wireType 1 =*/41).fixed64(message.actionTimestamp);
                    if (message.status != null && message.hasOwnProperty("status"))
                        writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.status);
                    if (message.lastPrice != null && message.hasOwnProperty("lastPrice"))
                        writer.uint32(/* id 7, wireType 1 =*/57).double(message.lastPrice);
                    if (message.avgPrice != null && message.hasOwnProperty("avgPrice"))
                        writer.uint32(/* id 8, wireType 1 =*/65).double(message.avgPrice);
                    if (message.totalBidVol != null && message.hasOwnProperty("totalBidVol"))
                        writer.uint32(/* id 9, wireType 1 =*/73).fixed64(message.totalBidVol);
                    if (message.totalAskVol != null && message.hasOwnProperty("totalAskVol"))
                        writer.uint32(/* id 10, wireType 1 =*/81).fixed64(message.totalAskVol);
                    if (message.weightedAvgBidPrice != null && message.hasOwnProperty("weightedAvgBidPrice"))
                        writer.uint32(/* id 11, wireType 1 =*/89).double(message.weightedAvgBidPrice);
                    if (message.weightedAvgAskPrice != null && message.hasOwnProperty("weightedAvgAskPrice"))
                        writer.uint32(/* id 12, wireType 1 =*/97).double(message.weightedAvgAskPrice);
                    if (message.iopv != null && message.hasOwnProperty("iopv"))
                        writer.uint32(/* id 13, wireType 1 =*/105).double(message.iopv);
                    if (message.yieldToMaturity != null && message.hasOwnProperty("yieldToMaturity"))
                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.yieldToMaturity);
                    if (message.volumeChange != null && message.hasOwnProperty("volumeChange"))
                        writer.uint32(/* id 15, wireType 5 =*/125).fixed32(message.volumeChange);
                    if (message.volume != null && message.hasOwnProperty("volume"))
                        writer.uint32(/* id 16, wireType 1 =*/129).fixed64(message.volume);
                    if (message.turnover != null && message.hasOwnProperty("turnover"))
                        writer.uint32(/* id 17, wireType 1 =*/137).double(message.turnover);
                    if (message.turnoverChange != null && message.hasOwnProperty("turnoverChange"))
                        writer.uint32(/* id 18, wireType 1 =*/145).double(message.turnoverChange);
                    if (message.numTrades != null && message.hasOwnProperty("numTrades"))
                        writer.uint32(/* id 19, wireType 1 =*/153).fixed64(message.numTrades);
                    if (message.numTradesChange != null && message.hasOwnProperty("numTradesChange"))
                        writer.uint32(/* id 20, wireType 1 =*/161).fixed64(message.numTradesChange);
                    if (message.openInterest != null && message.hasOwnProperty("openInterest"))
                        writer.uint32(/* id 21, wireType 1 =*/169).double(message.openInterest);
                    if (message.openInterestChange != null && message.hasOwnProperty("openInterestChange"))
                        writer.uint32(/* id 22, wireType 5 =*/181).fixed32(message.openInterestChange);
                    if (message.preOpenInterest != null && message.hasOwnProperty("preOpenInterest"))
                        writer.uint32(/* id 23, wireType 1 =*/185).double(message.preOpenInterest);
                    if (message.preClosePrice != null && message.hasOwnProperty("preClosePrice"))
                        writer.uint32(/* id 25, wireType 1 =*/201).double(message.preClosePrice);
                    if (message.settlePrice != null && message.hasOwnProperty("settlePrice"))
                        writer.uint32(/* id 26, wireType 1 =*/209).double(message.settlePrice);
                    if (message.preSettlePrice != null && message.hasOwnProperty("preSettlePrice"))
                        writer.uint32(/* id 27, wireType 1 =*/217).double(message.preSettlePrice);
                    if (message.openPrice != null && message.hasOwnProperty("openPrice"))
                        writer.uint32(/* id 28, wireType 1 =*/225).double(message.openPrice);
                    if (message.highPrice != null && message.hasOwnProperty("highPrice"))
                        writer.uint32(/* id 29, wireType 1 =*/233).double(message.highPrice);
                    if (message.lowPrice != null && message.hasOwnProperty("lowPrice"))
                        writer.uint32(/* id 30, wireType 1 =*/241).double(message.lowPrice);
                    if (message.upperLimit != null && message.hasOwnProperty("upperLimit"))
                        writer.uint32(/* id 31, wireType 1 =*/249).double(message.upperLimit);
                    if (message.lowerLimit != null && message.hasOwnProperty("lowerLimit"))
                        writer.uint32(/* id 32, wireType 1 =*/257).double(message.lowerLimit);
                    if (message.bidPrice != null && message.bidPrice.length) {
                        writer.uint32(/* id 33, wireType 2 =*/266).fork();
                        for (var i = 0; i < message.bidPrice.length; ++i)
                            writer.double(message.bidPrice[i]);
                        writer.ldelim();
                    }
                    if (message.askPrice != null && message.askPrice.length) {
                        writer.uint32(/* id 34, wireType 2 =*/274).fork();
                        for (var i = 0; i < message.askPrice.length; ++i)
                            writer.double(message.askPrice[i]);
                        writer.ldelim();
                    }
                    if (message.bidVolume != null && message.bidVolume.length) {
                        writer.uint32(/* id 35, wireType 2 =*/282).fork();
                        for (var i = 0; i < message.bidVolume.length; ++i)
                            writer.fixed32(message.bidVolume[i]);
                        writer.ldelim();
                    }
                    if (message.askVolume != null && message.askVolume.length) {
                        writer.uint32(/* id 36, wireType 2 =*/290).fork();
                        for (var i = 0; i < message.askVolume.length; ++i)
                            writer.fixed32(message.askVolume[i]);
                        writer.ldelim();
                    }
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        $root.xyz.redtorch.pb.GatewayField.encode(message.gateway, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified TickField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.TickField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.TickField
                 * @static
                 * @param {xyz.redtorch.pb.ITickField} message TickField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TickField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TickField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.TickField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.TickField} TickField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TickField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.TickField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.dataSourceId = reader.string();
                            break;
                        case 2:
                            message.tradingDay = reader.string();
                            break;
                        case 3:
                            message.actionDay = reader.string();
                            break;
                        case 4:
                            message.actionTime = reader.string();
                            break;
                        case 5:
                            message.actionTimestamp = reader.fixed64();
                            break;
                        case 6:
                            message.status = reader.fixed32();
                            break;
                        case 7:
                            message.lastPrice = reader.double();
                            break;
                        case 8:
                            message.avgPrice = reader.double();
                            break;
                        case 9:
                            message.totalBidVol = reader.fixed64();
                            break;
                        case 10:
                            message.totalAskVol = reader.fixed64();
                            break;
                        case 11:
                            message.weightedAvgBidPrice = reader.double();
                            break;
                        case 12:
                            message.weightedAvgAskPrice = reader.double();
                            break;
                        case 13:
                            message.iopv = reader.double();
                            break;
                        case 14:
                            message.yieldToMaturity = reader.double();
                            break;
                        case 15:
                            message.volumeChange = reader.fixed32();
                            break;
                        case 16:
                            message.volume = reader.fixed64();
                            break;
                        case 17:
                            message.turnover = reader.double();
                            break;
                        case 18:
                            message.turnoverChange = reader.double();
                            break;
                        case 19:
                            message.numTrades = reader.fixed64();
                            break;
                        case 20:
                            message.numTradesChange = reader.fixed64();
                            break;
                        case 21:
                            message.openInterest = reader.double();
                            break;
                        case 22:
                            message.openInterestChange = reader.fixed32();
                            break;
                        case 23:
                            message.preOpenInterest = reader.double();
                            break;
                        case 25:
                            message.preClosePrice = reader.double();
                            break;
                        case 26:
                            message.settlePrice = reader.double();
                            break;
                        case 27:
                            message.preSettlePrice = reader.double();
                            break;
                        case 28:
                            message.openPrice = reader.double();
                            break;
                        case 29:
                            message.highPrice = reader.double();
                            break;
                        case 30:
                            message.lowPrice = reader.double();
                            break;
                        case 31:
                            message.upperLimit = reader.double();
                            break;
                        case 32:
                            message.lowerLimit = reader.double();
                            break;
                        case 33:
                            if (!(message.bidPrice && message.bidPrice.length))
                                message.bidPrice = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.bidPrice.push(reader.double());
                            } else
                                message.bidPrice.push(reader.double());
                            break;
                        case 34:
                            if (!(message.askPrice && message.askPrice.length))
                                message.askPrice = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.askPrice.push(reader.double());
                            } else
                                message.askPrice.push(reader.double());
                            break;
                        case 35:
                            if (!(message.bidVolume && message.bidVolume.length))
                                message.bidVolume = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.bidVolume.push(reader.fixed32());
                            } else
                                message.bidVolume.push(reader.fixed32());
                            break;
                        case 36:
                            if (!(message.askVolume && message.askVolume.length))
                                message.askVolume = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.askVolume.push(reader.fixed32());
                            } else
                                message.askVolume.push(reader.fixed32());
                            break;
                        case 37:
                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());
                            break;
                        case 38:
                            message.gateway = $root.xyz.redtorch.pb.GatewayField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a TickField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.TickField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.TickField} TickField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TickField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TickField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.TickField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TickField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.dataSourceId != null && message.hasOwnProperty("dataSourceId"))
                        if (!$util.isString(message.dataSourceId))
                            return "dataSourceId: string expected";
                    if (message.tradingDay != null && message.hasOwnProperty("tradingDay"))
                        if (!$util.isString(message.tradingDay))
                            return "tradingDay: string expected";
                    if (message.actionDay != null && message.hasOwnProperty("actionDay"))
                        if (!$util.isString(message.actionDay))
                            return "actionDay: string expected";
                    if (message.actionTime != null && message.hasOwnProperty("actionTime"))
                        if (!$util.isString(message.actionTime))
                            return "actionTime: string expected";
                    if (message.actionTimestamp != null && message.hasOwnProperty("actionTimestamp"))
                        if (!$util.isInteger(message.actionTimestamp) && !(message.actionTimestamp && $util.isInteger(message.actionTimestamp.low) && $util.isInteger(message.actionTimestamp.high)))
                            return "actionTimestamp: integer|Long expected";
                    if (message.status != null && message.hasOwnProperty("status"))
                        if (!$util.isInteger(message.status))
                            return "status: integer expected";
                    if (message.lastPrice != null && message.hasOwnProperty("lastPrice"))
                        if (typeof message.lastPrice !== "number")
                            return "lastPrice: number expected";
                    if (message.avgPrice != null && message.hasOwnProperty("avgPrice"))
                        if (typeof message.avgPrice !== "number")
                            return "avgPrice: number expected";
                    if (message.totalBidVol != null && message.hasOwnProperty("totalBidVol"))
                        if (!$util.isInteger(message.totalBidVol) && !(message.totalBidVol && $util.isInteger(message.totalBidVol.low) && $util.isInteger(message.totalBidVol.high)))
                            return "totalBidVol: integer|Long expected";
                    if (message.totalAskVol != null && message.hasOwnProperty("totalAskVol"))
                        if (!$util.isInteger(message.totalAskVol) && !(message.totalAskVol && $util.isInteger(message.totalAskVol.low) && $util.isInteger(message.totalAskVol.high)))
                            return "totalAskVol: integer|Long expected";
                    if (message.weightedAvgBidPrice != null && message.hasOwnProperty("weightedAvgBidPrice"))
                        if (typeof message.weightedAvgBidPrice !== "number")
                            return "weightedAvgBidPrice: number expected";
                    if (message.weightedAvgAskPrice != null && message.hasOwnProperty("weightedAvgAskPrice"))
                        if (typeof message.weightedAvgAskPrice !== "number")
                            return "weightedAvgAskPrice: number expected";
                    if (message.iopv != null && message.hasOwnProperty("iopv"))
                        if (typeof message.iopv !== "number")
                            return "iopv: number expected";
                    if (message.yieldToMaturity != null && message.hasOwnProperty("yieldToMaturity"))
                        if (typeof message.yieldToMaturity !== "number")
                            return "yieldToMaturity: number expected";
                    if (message.volumeChange != null && message.hasOwnProperty("volumeChange"))
                        if (!$util.isInteger(message.volumeChange))
                            return "volumeChange: integer expected";
                    if (message.volume != null && message.hasOwnProperty("volume"))
                        if (!$util.isInteger(message.volume) && !(message.volume && $util.isInteger(message.volume.low) && $util.isInteger(message.volume.high)))
                            return "volume: integer|Long expected";
                    if (message.turnover != null && message.hasOwnProperty("turnover"))
                        if (typeof message.turnover !== "number")
                            return "turnover: number expected";
                    if (message.turnoverChange != null && message.hasOwnProperty("turnoverChange"))
                        if (typeof message.turnoverChange !== "number")
                            return "turnoverChange: number expected";
                    if (message.numTrades != null && message.hasOwnProperty("numTrades"))
                        if (!$util.isInteger(message.numTrades) && !(message.numTrades && $util.isInteger(message.numTrades.low) && $util.isInteger(message.numTrades.high)))
                            return "numTrades: integer|Long expected";
                    if (message.numTradesChange != null && message.hasOwnProperty("numTradesChange"))
                        if (!$util.isInteger(message.numTradesChange) && !(message.numTradesChange && $util.isInteger(message.numTradesChange.low) && $util.isInteger(message.numTradesChange.high)))
                            return "numTradesChange: integer|Long expected";
                    if (message.openInterest != null && message.hasOwnProperty("openInterest"))
                        if (typeof message.openInterest !== "number")
                            return "openInterest: number expected";
                    if (message.openInterestChange != null && message.hasOwnProperty("openInterestChange"))
                        if (!$util.isInteger(message.openInterestChange))
                            return "openInterestChange: integer expected";
                    if (message.preOpenInterest != null && message.hasOwnProperty("preOpenInterest"))
                        if (typeof message.preOpenInterest !== "number")
                            return "preOpenInterest: number expected";
                    if (message.preClosePrice != null && message.hasOwnProperty("preClosePrice"))
                        if (typeof message.preClosePrice !== "number")
                            return "preClosePrice: number expected";
                    if (message.settlePrice != null && message.hasOwnProperty("settlePrice"))
                        if (typeof message.settlePrice !== "number")
                            return "settlePrice: number expected";
                    if (message.preSettlePrice != null && message.hasOwnProperty("preSettlePrice"))
                        if (typeof message.preSettlePrice !== "number")
                            return "preSettlePrice: number expected";
                    if (message.openPrice != null && message.hasOwnProperty("openPrice"))
                        if (typeof message.openPrice !== "number")
                            return "openPrice: number expected";
                    if (message.highPrice != null && message.hasOwnProperty("highPrice"))
                        if (typeof message.highPrice !== "number")
                            return "highPrice: number expected";
                    if (message.lowPrice != null && message.hasOwnProperty("lowPrice"))
                        if (typeof message.lowPrice !== "number")
                            return "lowPrice: number expected";
                    if (message.upperLimit != null && message.hasOwnProperty("upperLimit"))
                        if (typeof message.upperLimit !== "number")
                            return "upperLimit: number expected";
                    if (message.lowerLimit != null && message.hasOwnProperty("lowerLimit"))
                        if (typeof message.lowerLimit !== "number")
                            return "lowerLimit: number expected";
                    if (message.bidPrice != null && message.hasOwnProperty("bidPrice")) {
                        if (!Array.isArray(message.bidPrice))
                            return "bidPrice: array expected";
                        for (var i = 0; i < message.bidPrice.length; ++i)
                            if (typeof message.bidPrice[i] !== "number")
                                return "bidPrice: number[] expected";
                    }
                    if (message.askPrice != null && message.hasOwnProperty("askPrice")) {
                        if (!Array.isArray(message.askPrice))
                            return "askPrice: array expected";
                        for (var i = 0; i < message.askPrice.length; ++i)
                            if (typeof message.askPrice[i] !== "number")
                                return "askPrice: number[] expected";
                    }
                    if (message.bidVolume != null && message.hasOwnProperty("bidVolume")) {
                        if (!Array.isArray(message.bidVolume))
                            return "bidVolume: array expected";
                        for (var i = 0; i < message.bidVolume.length; ++i)
                            if (!$util.isInteger(message.bidVolume[i]))
                                return "bidVolume: integer[] expected";
                    }
                    if (message.askVolume != null && message.hasOwnProperty("askVolume")) {
                        if (!Array.isArray(message.askVolume))
                            return "askVolume: array expected";
                        for (var i = 0; i < message.askVolume.length; ++i)
                            if (!$util.isInteger(message.askVolume[i]))
                                return "askVolume: integer[] expected";
                    }
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);
                        if (error)
                            return "contract." + error;
                    }
                    if (message.gateway != null && message.hasOwnProperty("gateway")) {
                        var error = $root.xyz.redtorch.pb.GatewayField.verify(message.gateway);
                        if (error)
                            return "gateway." + error;
                    }
                    return null;
                };

                /**
                 * Creates a TickField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.TickField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.TickField} TickField
                 */
                TickField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.TickField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.TickField();
                    if (object.dataSourceId != null)
                        message.dataSourceId = String(object.dataSourceId);
                    if (object.tradingDay != null)
                        message.tradingDay = String(object.tradingDay);
                    if (object.actionDay != null)
                        message.actionDay = String(object.actionDay);
                    if (object.actionTime != null)
                        message.actionTime = String(object.actionTime);
                    if (object.actionTimestamp != null)
                        if ($util.Long)
                            (message.actionTimestamp = $util.Long.fromValue(object.actionTimestamp)).unsigned = false;
                        else if (typeof object.actionTimestamp === "string")
                            message.actionTimestamp = parseInt(object.actionTimestamp, 10);
                        else if (typeof object.actionTimestamp === "number")
                            message.actionTimestamp = object.actionTimestamp;
                        else if (typeof object.actionTimestamp === "object")
                            message.actionTimestamp = new $util.LongBits(object.actionTimestamp.low >>> 0, object.actionTimestamp.high >>> 0).toNumber();
                    if (object.status != null)
                        message.status = object.status >>> 0;
                    if (object.lastPrice != null)
                        message.lastPrice = Number(object.lastPrice);
                    if (object.avgPrice != null)
                        message.avgPrice = Number(object.avgPrice);
                    if (object.totalBidVol != null)
                        if ($util.Long)
                            (message.totalBidVol = $util.Long.fromValue(object.totalBidVol)).unsigned = false;
                        else if (typeof object.totalBidVol === "string")
                            message.totalBidVol = parseInt(object.totalBidVol, 10);
                        else if (typeof object.totalBidVol === "number")
                            message.totalBidVol = object.totalBidVol;
                        else if (typeof object.totalBidVol === "object")
                            message.totalBidVol = new $util.LongBits(object.totalBidVol.low >>> 0, object.totalBidVol.high >>> 0).toNumber();
                    if (object.totalAskVol != null)
                        if ($util.Long)
                            (message.totalAskVol = $util.Long.fromValue(object.totalAskVol)).unsigned = false;
                        else if (typeof object.totalAskVol === "string")
                            message.totalAskVol = parseInt(object.totalAskVol, 10);
                        else if (typeof object.totalAskVol === "number")
                            message.totalAskVol = object.totalAskVol;
                        else if (typeof object.totalAskVol === "object")
                            message.totalAskVol = new $util.LongBits(object.totalAskVol.low >>> 0, object.totalAskVol.high >>> 0).toNumber();
                    if (object.weightedAvgBidPrice != null)
                        message.weightedAvgBidPrice = Number(object.weightedAvgBidPrice);
                    if (object.weightedAvgAskPrice != null)
                        message.weightedAvgAskPrice = Number(object.weightedAvgAskPrice);
                    if (object.iopv != null)
                        message.iopv = Number(object.iopv);
                    if (object.yieldToMaturity != null)
                        message.yieldToMaturity = Number(object.yieldToMaturity);
                    if (object.volumeChange != null)
                        message.volumeChange = object.volumeChange >>> 0;
                    if (object.volume != null)
                        if ($util.Long)
                            (message.volume = $util.Long.fromValue(object.volume)).unsigned = false;
                        else if (typeof object.volume === "string")
                            message.volume = parseInt(object.volume, 10);
                        else if (typeof object.volume === "number")
                            message.volume = object.volume;
                        else if (typeof object.volume === "object")
                            message.volume = new $util.LongBits(object.volume.low >>> 0, object.volume.high >>> 0).toNumber();
                    if (object.turnover != null)
                        message.turnover = Number(object.turnover);
                    if (object.turnoverChange != null)
                        message.turnoverChange = Number(object.turnoverChange);
                    if (object.numTrades != null)
                        if ($util.Long)
                            (message.numTrades = $util.Long.fromValue(object.numTrades)).unsigned = false;
                        else if (typeof object.numTrades === "string")
                            message.numTrades = parseInt(object.numTrades, 10);
                        else if (typeof object.numTrades === "number")
                            message.numTrades = object.numTrades;
                        else if (typeof object.numTrades === "object")
                            message.numTrades = new $util.LongBits(object.numTrades.low >>> 0, object.numTrades.high >>> 0).toNumber();
                    if (object.numTradesChange != null)
                        if ($util.Long)
                            (message.numTradesChange = $util.Long.fromValue(object.numTradesChange)).unsigned = false;
                        else if (typeof object.numTradesChange === "string")
                            message.numTradesChange = parseInt(object.numTradesChange, 10);
                        else if (typeof object.numTradesChange === "number")
                            message.numTradesChange = object.numTradesChange;
                        else if (typeof object.numTradesChange === "object")
                            message.numTradesChange = new $util.LongBits(object.numTradesChange.low >>> 0, object.numTradesChange.high >>> 0).toNumber();
                    if (object.openInterest != null)
                        message.openInterest = Number(object.openInterest);
                    if (object.openInterestChange != null)
                        message.openInterestChange = object.openInterestChange >>> 0;
                    if (object.preOpenInterest != null)
                        message.preOpenInterest = Number(object.preOpenInterest);
                    if (object.preClosePrice != null)
                        message.preClosePrice = Number(object.preClosePrice);
                    if (object.settlePrice != null)
                        message.settlePrice = Number(object.settlePrice);
                    if (object.preSettlePrice != null)
                        message.preSettlePrice = Number(object.preSettlePrice);
                    if (object.openPrice != null)
                        message.openPrice = Number(object.openPrice);
                    if (object.highPrice != null)
                        message.highPrice = Number(object.highPrice);
                    if (object.lowPrice != null)
                        message.lowPrice = Number(object.lowPrice);
                    if (object.upperLimit != null)
                        message.upperLimit = Number(object.upperLimit);
                    if (object.lowerLimit != null)
                        message.lowerLimit = Number(object.lowerLimit);
                    if (object.bidPrice) {
                        if (!Array.isArray(object.bidPrice))
                            throw TypeError(".xyz.redtorch.pb.TickField.bidPrice: array expected");
                        message.bidPrice = [];
                        for (var i = 0; i < object.bidPrice.length; ++i)
                            message.bidPrice[i] = Number(object.bidPrice[i]);
                    }
                    if (object.askPrice) {
                        if (!Array.isArray(object.askPrice))
                            throw TypeError(".xyz.redtorch.pb.TickField.askPrice: array expected");
                        message.askPrice = [];
                        for (var i = 0; i < object.askPrice.length; ++i)
                            message.askPrice[i] = Number(object.askPrice[i]);
                    }
                    if (object.bidVolume) {
                        if (!Array.isArray(object.bidVolume))
                            throw TypeError(".xyz.redtorch.pb.TickField.bidVolume: array expected");
                        message.bidVolume = [];
                        for (var i = 0; i < object.bidVolume.length; ++i)
                            message.bidVolume[i] = object.bidVolume[i] >>> 0;
                    }
                    if (object.askVolume) {
                        if (!Array.isArray(object.askVolume))
                            throw TypeError(".xyz.redtorch.pb.TickField.askVolume: array expected");
                        message.askVolume = [];
                        for (var i = 0; i < object.askVolume.length; ++i)
                            message.askVolume[i] = object.askVolume[i] >>> 0;
                    }
                    if (object.contract != null) {
                        if (typeof object.contract !== "object")
                            throw TypeError(".xyz.redtorch.pb.TickField.contract: object expected");
                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);
                    }
                    if (object.gateway != null) {
                        if (typeof object.gateway !== "object")
                            throw TypeError(".xyz.redtorch.pb.TickField.gateway: object expected");
                        message.gateway = $root.xyz.redtorch.pb.GatewayField.fromObject(object.gateway);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a TickField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.TickField
                 * @static
                 * @param {xyz.redtorch.pb.TickField} message TickField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TickField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.bidPrice = [];
                        object.askPrice = [];
                        object.bidVolume = [];
                        object.askVolume = [];
                    }
                    if (options.defaults) {
                        object.dataSourceId = "";
                        object.tradingDay = "";
                        object.actionDay = "";
                        object.actionTime = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.actionTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.actionTimestamp = options.longs === String ? "0" : 0;
                        object.status = 0;
                        object.lastPrice = 0;
                        object.avgPrice = 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.totalBidVol = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.totalBidVol = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.totalAskVol = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.totalAskVol = options.longs === String ? "0" : 0;
                        object.weightedAvgBidPrice = 0;
                        object.weightedAvgAskPrice = 0;
                        object.iopv = 0;
                        object.yieldToMaturity = 0;
                        object.volumeChange = 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.volume = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.volume = options.longs === String ? "0" : 0;
                        object.turnover = 0;
                        object.turnoverChange = 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.numTrades = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.numTrades = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.numTradesChange = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.numTradesChange = options.longs === String ? "0" : 0;
                        object.openInterest = 0;
                        object.openInterestChange = 0;
                        object.preOpenInterest = 0;
                        object.preClosePrice = 0;
                        object.settlePrice = 0;
                        object.preSettlePrice = 0;
                        object.openPrice = 0;
                        object.highPrice = 0;
                        object.lowPrice = 0;
                        object.upperLimit = 0;
                        object.lowerLimit = 0;
                        object.contract = null;
                        object.gateway = null;
                    }
                    if (message.dataSourceId != null && message.hasOwnProperty("dataSourceId"))
                        object.dataSourceId = message.dataSourceId;
                    if (message.tradingDay != null && message.hasOwnProperty("tradingDay"))
                        object.tradingDay = message.tradingDay;
                    if (message.actionDay != null && message.hasOwnProperty("actionDay"))
                        object.actionDay = message.actionDay;
                    if (message.actionTime != null && message.hasOwnProperty("actionTime"))
                        object.actionTime = message.actionTime;
                    if (message.actionTimestamp != null && message.hasOwnProperty("actionTimestamp"))
                        if (typeof message.actionTimestamp === "number")
                            object.actionTimestamp = options.longs === String ? String(message.actionTimestamp) : message.actionTimestamp;
                        else
                            object.actionTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.actionTimestamp) : options.longs === Number ? new $util.LongBits(message.actionTimestamp.low >>> 0, message.actionTimestamp.high >>> 0).toNumber() : message.actionTimestamp;
                    if (message.status != null && message.hasOwnProperty("status"))
                        object.status = message.status;
                    if (message.lastPrice != null && message.hasOwnProperty("lastPrice"))
                        object.lastPrice = options.json && !isFinite(message.lastPrice) ? String(message.lastPrice) : message.lastPrice;
                    if (message.avgPrice != null && message.hasOwnProperty("avgPrice"))
                        object.avgPrice = options.json && !isFinite(message.avgPrice) ? String(message.avgPrice) : message.avgPrice;
                    if (message.totalBidVol != null && message.hasOwnProperty("totalBidVol"))
                        if (typeof message.totalBidVol === "number")
                            object.totalBidVol = options.longs === String ? String(message.totalBidVol) : message.totalBidVol;
                        else
                            object.totalBidVol = options.longs === String ? $util.Long.prototype.toString.call(message.totalBidVol) : options.longs === Number ? new $util.LongBits(message.totalBidVol.low >>> 0, message.totalBidVol.high >>> 0).toNumber() : message.totalBidVol;
                    if (message.totalAskVol != null && message.hasOwnProperty("totalAskVol"))
                        if (typeof message.totalAskVol === "number")
                            object.totalAskVol = options.longs === String ? String(message.totalAskVol) : message.totalAskVol;
                        else
                            object.totalAskVol = options.longs === String ? $util.Long.prototype.toString.call(message.totalAskVol) : options.longs === Number ? new $util.LongBits(message.totalAskVol.low >>> 0, message.totalAskVol.high >>> 0).toNumber() : message.totalAskVol;
                    if (message.weightedAvgBidPrice != null && message.hasOwnProperty("weightedAvgBidPrice"))
                        object.weightedAvgBidPrice = options.json && !isFinite(message.weightedAvgBidPrice) ? String(message.weightedAvgBidPrice) : message.weightedAvgBidPrice;
                    if (message.weightedAvgAskPrice != null && message.hasOwnProperty("weightedAvgAskPrice"))
                        object.weightedAvgAskPrice = options.json && !isFinite(message.weightedAvgAskPrice) ? String(message.weightedAvgAskPrice) : message.weightedAvgAskPrice;
                    if (message.iopv != null && message.hasOwnProperty("iopv"))
                        object.iopv = options.json && !isFinite(message.iopv) ? String(message.iopv) : message.iopv;
                    if (message.yieldToMaturity != null && message.hasOwnProperty("yieldToMaturity"))
                        object.yieldToMaturity = options.json && !isFinite(message.yieldToMaturity) ? String(message.yieldToMaturity) : message.yieldToMaturity;
                    if (message.volumeChange != null && message.hasOwnProperty("volumeChange"))
                        object.volumeChange = message.volumeChange;
                    if (message.volume != null && message.hasOwnProperty("volume"))
                        if (typeof message.volume === "number")
                            object.volume = options.longs === String ? String(message.volume) : message.volume;
                        else
                            object.volume = options.longs === String ? $util.Long.prototype.toString.call(message.volume) : options.longs === Number ? new $util.LongBits(message.volume.low >>> 0, message.volume.high >>> 0).toNumber() : message.volume;
                    if (message.turnover != null && message.hasOwnProperty("turnover"))
                        object.turnover = options.json && !isFinite(message.turnover) ? String(message.turnover) : message.turnover;
                    if (message.turnoverChange != null && message.hasOwnProperty("turnoverChange"))
                        object.turnoverChange = options.json && !isFinite(message.turnoverChange) ? String(message.turnoverChange) : message.turnoverChange;
                    if (message.numTrades != null && message.hasOwnProperty("numTrades"))
                        if (typeof message.numTrades === "number")
                            object.numTrades = options.longs === String ? String(message.numTrades) : message.numTrades;
                        else
                            object.numTrades = options.longs === String ? $util.Long.prototype.toString.call(message.numTrades) : options.longs === Number ? new $util.LongBits(message.numTrades.low >>> 0, message.numTrades.high >>> 0).toNumber() : message.numTrades;
                    if (message.numTradesChange != null && message.hasOwnProperty("numTradesChange"))
                        if (typeof message.numTradesChange === "number")
                            object.numTradesChange = options.longs === String ? String(message.numTradesChange) : message.numTradesChange;
                        else
                            object.numTradesChange = options.longs === String ? $util.Long.prototype.toString.call(message.numTradesChange) : options.longs === Number ? new $util.LongBits(message.numTradesChange.low >>> 0, message.numTradesChange.high >>> 0).toNumber() : message.numTradesChange;
                    if (message.openInterest != null && message.hasOwnProperty("openInterest"))
                        object.openInterest = options.json && !isFinite(message.openInterest) ? String(message.openInterest) : message.openInterest;
                    if (message.openInterestChange != null && message.hasOwnProperty("openInterestChange"))
                        object.openInterestChange = message.openInterestChange;
                    if (message.preOpenInterest != null && message.hasOwnProperty("preOpenInterest"))
                        object.preOpenInterest = options.json && !isFinite(message.preOpenInterest) ? String(message.preOpenInterest) : message.preOpenInterest;
                    if (message.preClosePrice != null && message.hasOwnProperty("preClosePrice"))
                        object.preClosePrice = options.json && !isFinite(message.preClosePrice) ? String(message.preClosePrice) : message.preClosePrice;
                    if (message.settlePrice != null && message.hasOwnProperty("settlePrice"))
                        object.settlePrice = options.json && !isFinite(message.settlePrice) ? String(message.settlePrice) : message.settlePrice;
                    if (message.preSettlePrice != null && message.hasOwnProperty("preSettlePrice"))
                        object.preSettlePrice = options.json && !isFinite(message.preSettlePrice) ? String(message.preSettlePrice) : message.preSettlePrice;
                    if (message.openPrice != null && message.hasOwnProperty("openPrice"))
                        object.openPrice = options.json && !isFinite(message.openPrice) ? String(message.openPrice) : message.openPrice;
                    if (message.highPrice != null && message.hasOwnProperty("highPrice"))
                        object.highPrice = options.json && !isFinite(message.highPrice) ? String(message.highPrice) : message.highPrice;
                    if (message.lowPrice != null && message.hasOwnProperty("lowPrice"))
                        object.lowPrice = options.json && !isFinite(message.lowPrice) ? String(message.lowPrice) : message.lowPrice;
                    if (message.upperLimit != null && message.hasOwnProperty("upperLimit"))
                        object.upperLimit = options.json && !isFinite(message.upperLimit) ? String(message.upperLimit) : message.upperLimit;
                    if (message.lowerLimit != null && message.hasOwnProperty("lowerLimit"))
                        object.lowerLimit = options.json && !isFinite(message.lowerLimit) ? String(message.lowerLimit) : message.lowerLimit;
                    if (message.bidPrice && message.bidPrice.length) {
                        object.bidPrice = [];
                        for (var j = 0; j < message.bidPrice.length; ++j)
                            object.bidPrice[j] = options.json && !isFinite(message.bidPrice[j]) ? String(message.bidPrice[j]) : message.bidPrice[j];
                    }
                    if (message.askPrice && message.askPrice.length) {
                        object.askPrice = [];
                        for (var j = 0; j < message.askPrice.length; ++j)
                            object.askPrice[j] = options.json && !isFinite(message.askPrice[j]) ? String(message.askPrice[j]) : message.askPrice[j];
                    }
                    if (message.bidVolume && message.bidVolume.length) {
                        object.bidVolume = [];
                        for (var j = 0; j < message.bidVolume.length; ++j)
                            object.bidVolume[j] = message.bidVolume[j];
                    }
                    if (message.askVolume && message.askVolume.length) {
                        object.askVolume = [];
                        for (var j = 0; j < message.askVolume.length; ++j)
                            object.askVolume[j] = message.askVolume[j];
                    }
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        object.gateway = $root.xyz.redtorch.pb.GatewayField.toObject(message.gateway, options);
                    return object;
                };

                /**
                 * Converts this TickField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.TickField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TickField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return TickField;
            })();

            pb.BarField = (function() {

                /**
                 * Properties of a BarField.
                 * @memberof xyz.redtorch.pb
                 * @interface IBarField
                 * @property {string|null} [dataSourceId] BarField dataSourceId
                 * @property {string|null} [tradingDay] BarField tradingDay
                 * @property {string|null} [actionDay] BarField actionDay
                 * @property {string|null} [actionTime] BarField actionTime
                 * @property {number|Long|null} [actionTimestamp] BarField actionTimestamp
                 * @property {number|null} [openPrice] BarField openPrice
                 * @property {number|null} [highPrice] BarField highPrice
                 * @property {number|null} [lowPrice] BarField lowPrice
                 * @property {number|null} [closePrice] BarField closePrice
                 * @property {number|null} [openInterest] BarField openInterest
                 * @property {number|null} [openInterestChange] BarField openInterestChange
                 * @property {number|Long|null} [volume] BarField volume
                 * @property {number|Long|null} [volumeChange] BarField volumeChange
                 * @property {number|null} [turnover] BarField turnover
                 * @property {number|null} [turnoverChange] BarField turnoverChange
                 * @property {number|Long|null} [numTrades] BarField numTrades
                 * @property {number|Long|null} [numTradesChange] BarField numTradesChange
                 * @property {xyz.redtorch.pb.IContractField|null} [contract] BarField contract
                 * @property {xyz.redtorch.pb.IGatewayField|null} [gateway] BarField gateway
                 */

                /**
                 * Constructs a new BarField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a BarField.
                 * @implements IBarField
                 * @constructor
                 * @param {xyz.redtorch.pb.IBarField=} [properties] Properties to set
                 */
                function BarField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * BarField dataSourceId.
                 * @member {string} dataSourceId
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.dataSourceId = "";

                /**
                 * BarField tradingDay.
                 * @member {string} tradingDay
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.tradingDay = "";

                /**
                 * BarField actionDay.
                 * @member {string} actionDay
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.actionDay = "";

                /**
                 * BarField actionTime.
                 * @member {string} actionTime
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.actionTime = "";

                /**
                 * BarField actionTimestamp.
                 * @member {number|Long} actionTimestamp
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.actionTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * BarField openPrice.
                 * @member {number} openPrice
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.openPrice = 0;

                /**
                 * BarField highPrice.
                 * @member {number} highPrice
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.highPrice = 0;

                /**
                 * BarField lowPrice.
                 * @member {number} lowPrice
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.lowPrice = 0;

                /**
                 * BarField closePrice.
                 * @member {number} closePrice
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.closePrice = 0;

                /**
                 * BarField openInterest.
                 * @member {number} openInterest
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.openInterest = 0;

                /**
                 * BarField openInterestChange.
                 * @member {number} openInterestChange
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.openInterestChange = 0;

                /**
                 * BarField volume.
                 * @member {number|Long} volume
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.volume = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * BarField volumeChange.
                 * @member {number|Long} volumeChange
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.volumeChange = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * BarField turnover.
                 * @member {number} turnover
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.turnover = 0;

                /**
                 * BarField turnoverChange.
                 * @member {number} turnoverChange
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.turnoverChange = 0;

                /**
                 * BarField numTrades.
                 * @member {number|Long} numTrades
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.numTrades = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * BarField numTradesChange.
                 * @member {number|Long} numTradesChange
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.numTradesChange = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * BarField contract.
                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.contract = null;

                /**
                 * BarField gateway.
                 * @member {xyz.redtorch.pb.IGatewayField|null|undefined} gateway
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 */
                BarField.prototype.gateway = null;

                /**
                 * Creates a new BarField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.BarField
                 * @static
                 * @param {xyz.redtorch.pb.IBarField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.BarField} BarField instance
                 */
                BarField.create = function create(properties) {
                    return new BarField(properties);
                };

                /**
                 * Encodes the specified BarField message. Does not implicitly {@link xyz.redtorch.pb.BarField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.BarField
                 * @static
                 * @param {xyz.redtorch.pb.IBarField} message BarField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BarField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.dataSourceId != null && message.hasOwnProperty("dataSourceId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.dataSourceId);
                    if (message.tradingDay != null && message.hasOwnProperty("tradingDay"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.tradingDay);
                    if (message.actionDay != null && message.hasOwnProperty("actionDay"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.actionDay);
                    if (message.actionTime != null && message.hasOwnProperty("actionTime"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.actionTime);
                    if (message.actionTimestamp != null && message.hasOwnProperty("actionTimestamp"))
                        writer.uint32(/* id 5, wireType 1 =*/41).fixed64(message.actionTimestamp);
                    if (message.openPrice != null && message.hasOwnProperty("openPrice"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.openPrice);
                    if (message.highPrice != null && message.hasOwnProperty("highPrice"))
                        writer.uint32(/* id 7, wireType 1 =*/57).double(message.highPrice);
                    if (message.lowPrice != null && message.hasOwnProperty("lowPrice"))
                        writer.uint32(/* id 8, wireType 1 =*/65).double(message.lowPrice);
                    if (message.closePrice != null && message.hasOwnProperty("closePrice"))
                        writer.uint32(/* id 9, wireType 1 =*/73).double(message.closePrice);
                    if (message.openInterest != null && message.hasOwnProperty("openInterest"))
                        writer.uint32(/* id 10, wireType 1 =*/81).double(message.openInterest);
                    if (message.openInterestChange != null && message.hasOwnProperty("openInterestChange"))
                        writer.uint32(/* id 11, wireType 1 =*/89).double(message.openInterestChange);
                    if (message.volume != null && message.hasOwnProperty("volume"))
                        writer.uint32(/* id 12, wireType 1 =*/97).fixed64(message.volume);
                    if (message.volumeChange != null && message.hasOwnProperty("volumeChange"))
                        writer.uint32(/* id 13, wireType 1 =*/105).fixed64(message.volumeChange);
                    if (message.turnover != null && message.hasOwnProperty("turnover"))
                        writer.uint32(/* id 14, wireType 1 =*/113).double(message.turnover);
                    if (message.turnoverChange != null && message.hasOwnProperty("turnoverChange"))
                        writer.uint32(/* id 15, wireType 1 =*/121).double(message.turnoverChange);
                    if (message.numTrades != null && message.hasOwnProperty("numTrades"))
                        writer.uint32(/* id 16, wireType 1 =*/129).fixed64(message.numTrades);
                    if (message.numTradesChange != null && message.hasOwnProperty("numTradesChange"))
                        writer.uint32(/* id 17, wireType 1 =*/137).fixed64(message.numTradesChange);
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        $root.xyz.redtorch.pb.GatewayField.encode(message.gateway, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified BarField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.BarField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.BarField
                 * @static
                 * @param {xyz.redtorch.pb.IBarField} message BarField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BarField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a BarField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.BarField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.BarField} BarField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BarField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.BarField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.dataSourceId = reader.string();
                            break;
                        case 2:
                            message.tradingDay = reader.string();
                            break;
                        case 3:
                            message.actionDay = reader.string();
                            break;
                        case 4:
                            message.actionTime = reader.string();
                            break;
                        case 5:
                            message.actionTimestamp = reader.fixed64();
                            break;
                        case 6:
                            message.openPrice = reader.double();
                            break;
                        case 7:
                            message.highPrice = reader.double();
                            break;
                        case 8:
                            message.lowPrice = reader.double();
                            break;
                        case 9:
                            message.closePrice = reader.double();
                            break;
                        case 10:
                            message.openInterest = reader.double();
                            break;
                        case 11:
                            message.openInterestChange = reader.double();
                            break;
                        case 12:
                            message.volume = reader.fixed64();
                            break;
                        case 13:
                            message.volumeChange = reader.fixed64();
                            break;
                        case 14:
                            message.turnover = reader.double();
                            break;
                        case 15:
                            message.turnoverChange = reader.double();
                            break;
                        case 16:
                            message.numTrades = reader.fixed64();
                            break;
                        case 17:
                            message.numTradesChange = reader.fixed64();
                            break;
                        case 18:
                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());
                            break;
                        case 19:
                            message.gateway = $root.xyz.redtorch.pb.GatewayField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a BarField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.BarField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.BarField} BarField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BarField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a BarField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.BarField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BarField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.dataSourceId != null && message.hasOwnProperty("dataSourceId"))
                        if (!$util.isString(message.dataSourceId))
                            return "dataSourceId: string expected";
                    if (message.tradingDay != null && message.hasOwnProperty("tradingDay"))
                        if (!$util.isString(message.tradingDay))
                            return "tradingDay: string expected";
                    if (message.actionDay != null && message.hasOwnProperty("actionDay"))
                        if (!$util.isString(message.actionDay))
                            return "actionDay: string expected";
                    if (message.actionTime != null && message.hasOwnProperty("actionTime"))
                        if (!$util.isString(message.actionTime))
                            return "actionTime: string expected";
                    if (message.actionTimestamp != null && message.hasOwnProperty("actionTimestamp"))
                        if (!$util.isInteger(message.actionTimestamp) && !(message.actionTimestamp && $util.isInteger(message.actionTimestamp.low) && $util.isInteger(message.actionTimestamp.high)))
                            return "actionTimestamp: integer|Long expected";
                    if (message.openPrice != null && message.hasOwnProperty("openPrice"))
                        if (typeof message.openPrice !== "number")
                            return "openPrice: number expected";
                    if (message.highPrice != null && message.hasOwnProperty("highPrice"))
                        if (typeof message.highPrice !== "number")
                            return "highPrice: number expected";
                    if (message.lowPrice != null && message.hasOwnProperty("lowPrice"))
                        if (typeof message.lowPrice !== "number")
                            return "lowPrice: number expected";
                    if (message.closePrice != null && message.hasOwnProperty("closePrice"))
                        if (typeof message.closePrice !== "number")
                            return "closePrice: number expected";
                    if (message.openInterest != null && message.hasOwnProperty("openInterest"))
                        if (typeof message.openInterest !== "number")
                            return "openInterest: number expected";
                    if (message.openInterestChange != null && message.hasOwnProperty("openInterestChange"))
                        if (typeof message.openInterestChange !== "number")
                            return "openInterestChange: number expected";
                    if (message.volume != null && message.hasOwnProperty("volume"))
                        if (!$util.isInteger(message.volume) && !(message.volume && $util.isInteger(message.volume.low) && $util.isInteger(message.volume.high)))
                            return "volume: integer|Long expected";
                    if (message.volumeChange != null && message.hasOwnProperty("volumeChange"))
                        if (!$util.isInteger(message.volumeChange) && !(message.volumeChange && $util.isInteger(message.volumeChange.low) && $util.isInteger(message.volumeChange.high)))
                            return "volumeChange: integer|Long expected";
                    if (message.turnover != null && message.hasOwnProperty("turnover"))
                        if (typeof message.turnover !== "number")
                            return "turnover: number expected";
                    if (message.turnoverChange != null && message.hasOwnProperty("turnoverChange"))
                        if (typeof message.turnoverChange !== "number")
                            return "turnoverChange: number expected";
                    if (message.numTrades != null && message.hasOwnProperty("numTrades"))
                        if (!$util.isInteger(message.numTrades) && !(message.numTrades && $util.isInteger(message.numTrades.low) && $util.isInteger(message.numTrades.high)))
                            return "numTrades: integer|Long expected";
                    if (message.numTradesChange != null && message.hasOwnProperty("numTradesChange"))
                        if (!$util.isInteger(message.numTradesChange) && !(message.numTradesChange && $util.isInteger(message.numTradesChange.low) && $util.isInteger(message.numTradesChange.high)))
                            return "numTradesChange: integer|Long expected";
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);
                        if (error)
                            return "contract." + error;
                    }
                    if (message.gateway != null && message.hasOwnProperty("gateway")) {
                        var error = $root.xyz.redtorch.pb.GatewayField.verify(message.gateway);
                        if (error)
                            return "gateway." + error;
                    }
                    return null;
                };

                /**
                 * Creates a BarField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.BarField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.BarField} BarField
                 */
                BarField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.BarField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.BarField();
                    if (object.dataSourceId != null)
                        message.dataSourceId = String(object.dataSourceId);
                    if (object.tradingDay != null)
                        message.tradingDay = String(object.tradingDay);
                    if (object.actionDay != null)
                        message.actionDay = String(object.actionDay);
                    if (object.actionTime != null)
                        message.actionTime = String(object.actionTime);
                    if (object.actionTimestamp != null)
                        if ($util.Long)
                            (message.actionTimestamp = $util.Long.fromValue(object.actionTimestamp)).unsigned = false;
                        else if (typeof object.actionTimestamp === "string")
                            message.actionTimestamp = parseInt(object.actionTimestamp, 10);
                        else if (typeof object.actionTimestamp === "number")
                            message.actionTimestamp = object.actionTimestamp;
                        else if (typeof object.actionTimestamp === "object")
                            message.actionTimestamp = new $util.LongBits(object.actionTimestamp.low >>> 0, object.actionTimestamp.high >>> 0).toNumber();
                    if (object.openPrice != null)
                        message.openPrice = Number(object.openPrice);
                    if (object.highPrice != null)
                        message.highPrice = Number(object.highPrice);
                    if (object.lowPrice != null)
                        message.lowPrice = Number(object.lowPrice);
                    if (object.closePrice != null)
                        message.closePrice = Number(object.closePrice);
                    if (object.openInterest != null)
                        message.openInterest = Number(object.openInterest);
                    if (object.openInterestChange != null)
                        message.openInterestChange = Number(object.openInterestChange);
                    if (object.volume != null)
                        if ($util.Long)
                            (message.volume = $util.Long.fromValue(object.volume)).unsigned = false;
                        else if (typeof object.volume === "string")
                            message.volume = parseInt(object.volume, 10);
                        else if (typeof object.volume === "number")
                            message.volume = object.volume;
                        else if (typeof object.volume === "object")
                            message.volume = new $util.LongBits(object.volume.low >>> 0, object.volume.high >>> 0).toNumber();
                    if (object.volumeChange != null)
                        if ($util.Long)
                            (message.volumeChange = $util.Long.fromValue(object.volumeChange)).unsigned = false;
                        else if (typeof object.volumeChange === "string")
                            message.volumeChange = parseInt(object.volumeChange, 10);
                        else if (typeof object.volumeChange === "number")
                            message.volumeChange = object.volumeChange;
                        else if (typeof object.volumeChange === "object")
                            message.volumeChange = new $util.LongBits(object.volumeChange.low >>> 0, object.volumeChange.high >>> 0).toNumber();
                    if (object.turnover != null)
                        message.turnover = Number(object.turnover);
                    if (object.turnoverChange != null)
                        message.turnoverChange = Number(object.turnoverChange);
                    if (object.numTrades != null)
                        if ($util.Long)
                            (message.numTrades = $util.Long.fromValue(object.numTrades)).unsigned = false;
                        else if (typeof object.numTrades === "string")
                            message.numTrades = parseInt(object.numTrades, 10);
                        else if (typeof object.numTrades === "number")
                            message.numTrades = object.numTrades;
                        else if (typeof object.numTrades === "object")
                            message.numTrades = new $util.LongBits(object.numTrades.low >>> 0, object.numTrades.high >>> 0).toNumber();
                    if (object.numTradesChange != null)
                        if ($util.Long)
                            (message.numTradesChange = $util.Long.fromValue(object.numTradesChange)).unsigned = false;
                        else if (typeof object.numTradesChange === "string")
                            message.numTradesChange = parseInt(object.numTradesChange, 10);
                        else if (typeof object.numTradesChange === "number")
                            message.numTradesChange = object.numTradesChange;
                        else if (typeof object.numTradesChange === "object")
                            message.numTradesChange = new $util.LongBits(object.numTradesChange.low >>> 0, object.numTradesChange.high >>> 0).toNumber();
                    if (object.contract != null) {
                        if (typeof object.contract !== "object")
                            throw TypeError(".xyz.redtorch.pb.BarField.contract: object expected");
                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);
                    }
                    if (object.gateway != null) {
                        if (typeof object.gateway !== "object")
                            throw TypeError(".xyz.redtorch.pb.BarField.gateway: object expected");
                        message.gateway = $root.xyz.redtorch.pb.GatewayField.fromObject(object.gateway);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a BarField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.BarField
                 * @static
                 * @param {xyz.redtorch.pb.BarField} message BarField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BarField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.dataSourceId = "";
                        object.tradingDay = "";
                        object.actionDay = "";
                        object.actionTime = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.actionTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.actionTimestamp = options.longs === String ? "0" : 0;
                        object.openPrice = 0;
                        object.highPrice = 0;
                        object.lowPrice = 0;
                        object.closePrice = 0;
                        object.openInterest = 0;
                        object.openInterestChange = 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.volume = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.volume = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.volumeChange = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.volumeChange = options.longs === String ? "0" : 0;
                        object.turnover = 0;
                        object.turnoverChange = 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.numTrades = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.numTrades = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.numTradesChange = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.numTradesChange = options.longs === String ? "0" : 0;
                        object.contract = null;
                        object.gateway = null;
                    }
                    if (message.dataSourceId != null && message.hasOwnProperty("dataSourceId"))
                        object.dataSourceId = message.dataSourceId;
                    if (message.tradingDay != null && message.hasOwnProperty("tradingDay"))
                        object.tradingDay = message.tradingDay;
                    if (message.actionDay != null && message.hasOwnProperty("actionDay"))
                        object.actionDay = message.actionDay;
                    if (message.actionTime != null && message.hasOwnProperty("actionTime"))
                        object.actionTime = message.actionTime;
                    if (message.actionTimestamp != null && message.hasOwnProperty("actionTimestamp"))
                        if (typeof message.actionTimestamp === "number")
                            object.actionTimestamp = options.longs === String ? String(message.actionTimestamp) : message.actionTimestamp;
                        else
                            object.actionTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.actionTimestamp) : options.longs === Number ? new $util.LongBits(message.actionTimestamp.low >>> 0, message.actionTimestamp.high >>> 0).toNumber() : message.actionTimestamp;
                    if (message.openPrice != null && message.hasOwnProperty("openPrice"))
                        object.openPrice = options.json && !isFinite(message.openPrice) ? String(message.openPrice) : message.openPrice;
                    if (message.highPrice != null && message.hasOwnProperty("highPrice"))
                        object.highPrice = options.json && !isFinite(message.highPrice) ? String(message.highPrice) : message.highPrice;
                    if (message.lowPrice != null && message.hasOwnProperty("lowPrice"))
                        object.lowPrice = options.json && !isFinite(message.lowPrice) ? String(message.lowPrice) : message.lowPrice;
                    if (message.closePrice != null && message.hasOwnProperty("closePrice"))
                        object.closePrice = options.json && !isFinite(message.closePrice) ? String(message.closePrice) : message.closePrice;
                    if (message.openInterest != null && message.hasOwnProperty("openInterest"))
                        object.openInterest = options.json && !isFinite(message.openInterest) ? String(message.openInterest) : message.openInterest;
                    if (message.openInterestChange != null && message.hasOwnProperty("openInterestChange"))
                        object.openInterestChange = options.json && !isFinite(message.openInterestChange) ? String(message.openInterestChange) : message.openInterestChange;
                    if (message.volume != null && message.hasOwnProperty("volume"))
                        if (typeof message.volume === "number")
                            object.volume = options.longs === String ? String(message.volume) : message.volume;
                        else
                            object.volume = options.longs === String ? $util.Long.prototype.toString.call(message.volume) : options.longs === Number ? new $util.LongBits(message.volume.low >>> 0, message.volume.high >>> 0).toNumber() : message.volume;
                    if (message.volumeChange != null && message.hasOwnProperty("volumeChange"))
                        if (typeof message.volumeChange === "number")
                            object.volumeChange = options.longs === String ? String(message.volumeChange) : message.volumeChange;
                        else
                            object.volumeChange = options.longs === String ? $util.Long.prototype.toString.call(message.volumeChange) : options.longs === Number ? new $util.LongBits(message.volumeChange.low >>> 0, message.volumeChange.high >>> 0).toNumber() : message.volumeChange;
                    if (message.turnover != null && message.hasOwnProperty("turnover"))
                        object.turnover = options.json && !isFinite(message.turnover) ? String(message.turnover) : message.turnover;
                    if (message.turnoverChange != null && message.hasOwnProperty("turnoverChange"))
                        object.turnoverChange = options.json && !isFinite(message.turnoverChange) ? String(message.turnoverChange) : message.turnoverChange;
                    if (message.numTrades != null && message.hasOwnProperty("numTrades"))
                        if (typeof message.numTrades === "number")
                            object.numTrades = options.longs === String ? String(message.numTrades) : message.numTrades;
                        else
                            object.numTrades = options.longs === String ? $util.Long.prototype.toString.call(message.numTrades) : options.longs === Number ? new $util.LongBits(message.numTrades.low >>> 0, message.numTrades.high >>> 0).toNumber() : message.numTrades;
                    if (message.numTradesChange != null && message.hasOwnProperty("numTradesChange"))
                        if (typeof message.numTradesChange === "number")
                            object.numTradesChange = options.longs === String ? String(message.numTradesChange) : message.numTradesChange;
                        else
                            object.numTradesChange = options.longs === String ? $util.Long.prototype.toString.call(message.numTradesChange) : options.longs === Number ? new $util.LongBits(message.numTradesChange.low >>> 0, message.numTradesChange.high >>> 0).toNumber() : message.numTradesChange;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);
                    if (message.gateway != null && message.hasOwnProperty("gateway"))
                        object.gateway = $root.xyz.redtorch.pb.GatewayField.toObject(message.gateway, options);
                    return object;
                };

                /**
                 * Converts this BarField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.BarField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BarField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return BarField;
            })();

            pb.CommonReqField = (function() {

                /**
                 * Properties of a CommonReqField.
                 * @memberof xyz.redtorch.pb
                 * @interface ICommonReqField
                 * @property {string|null} [reqId] CommonReqField reqId
                 * @property {string|null} [operatorId] CommonReqField operatorId
                 * @property {number|null} [targetNodeId] CommonReqField targetNodeId
                 * @property {number|null} [sourceNodeId] CommonReqField sourceNodeId
                 */

                /**
                 * Constructs a new CommonReqField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a CommonReqField.
                 * @implements ICommonReqField
                 * @constructor
                 * @param {xyz.redtorch.pb.ICommonReqField=} [properties] Properties to set
                 */
                function CommonReqField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CommonReqField reqId.
                 * @member {string} reqId
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @instance
                 */
                CommonReqField.prototype.reqId = "";

                /**
                 * CommonReqField operatorId.
                 * @member {string} operatorId
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @instance
                 */
                CommonReqField.prototype.operatorId = "";

                /**
                 * CommonReqField targetNodeId.
                 * @member {number} targetNodeId
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @instance
                 */
                CommonReqField.prototype.targetNodeId = 0;

                /**
                 * CommonReqField sourceNodeId.
                 * @member {number} sourceNodeId
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @instance
                 */
                CommonReqField.prototype.sourceNodeId = 0;

                /**
                 * Creates a new CommonReqField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @static
                 * @param {xyz.redtorch.pb.ICommonReqField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.CommonReqField} CommonReqField instance
                 */
                CommonReqField.create = function create(properties) {
                    return new CommonReqField(properties);
                };

                /**
                 * Encodes the specified CommonReqField message. Does not implicitly {@link xyz.redtorch.pb.CommonReqField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @static
                 * @param {xyz.redtorch.pb.ICommonReqField} message CommonReqField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonReqField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.reqId != null && message.hasOwnProperty("reqId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.reqId);
                    if (message.operatorId != null && message.hasOwnProperty("operatorId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.operatorId);
                    if (message.targetNodeId != null && message.hasOwnProperty("targetNodeId"))
                        writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.targetNodeId);
                    if (message.sourceNodeId != null && message.hasOwnProperty("sourceNodeId"))
                        writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.sourceNodeId);
                    return writer;
                };

                /**
                 * Encodes the specified CommonReqField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.CommonReqField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @static
                 * @param {xyz.redtorch.pb.ICommonReqField} message CommonReqField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonReqField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CommonReqField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.CommonReqField} CommonReqField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonReqField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.CommonReqField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.reqId = reader.string();
                            break;
                        case 2:
                            message.operatorId = reader.string();
                            break;
                        case 3:
                            message.targetNodeId = reader.fixed32();
                            break;
                        case 4:
                            message.sourceNodeId = reader.fixed32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CommonReqField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.CommonReqField} CommonReqField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonReqField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CommonReqField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommonReqField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.reqId != null && message.hasOwnProperty("reqId"))
                        if (!$util.isString(message.reqId))
                            return "reqId: string expected";
                    if (message.operatorId != null && message.hasOwnProperty("operatorId"))
                        if (!$util.isString(message.operatorId))
                            return "operatorId: string expected";
                    if (message.targetNodeId != null && message.hasOwnProperty("targetNodeId"))
                        if (!$util.isInteger(message.targetNodeId))
                            return "targetNodeId: integer expected";
                    if (message.sourceNodeId != null && message.hasOwnProperty("sourceNodeId"))
                        if (!$util.isInteger(message.sourceNodeId))
                            return "sourceNodeId: integer expected";
                    return null;
                };

                /**
                 * Creates a CommonReqField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.CommonReqField} CommonReqField
                 */
                CommonReqField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.CommonReqField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.CommonReqField();
                    if (object.reqId != null)
                        message.reqId = String(object.reqId);
                    if (object.operatorId != null)
                        message.operatorId = String(object.operatorId);
                    if (object.targetNodeId != null)
                        message.targetNodeId = object.targetNodeId >>> 0;
                    if (object.sourceNodeId != null)
                        message.sourceNodeId = object.sourceNodeId >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a CommonReqField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @static
                 * @param {xyz.redtorch.pb.CommonReqField} message CommonReqField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommonReqField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.reqId = "";
                        object.operatorId = "";
                        object.targetNodeId = 0;
                        object.sourceNodeId = 0;
                    }
                    if (message.reqId != null && message.hasOwnProperty("reqId"))
                        object.reqId = message.reqId;
                    if (message.operatorId != null && message.hasOwnProperty("operatorId"))
                        object.operatorId = message.operatorId;
                    if (message.targetNodeId != null && message.hasOwnProperty("targetNodeId"))
                        object.targetNodeId = message.targetNodeId;
                    if (message.sourceNodeId != null && message.hasOwnProperty("sourceNodeId"))
                        object.sourceNodeId = message.sourceNodeId;
                    return object;
                };

                /**
                 * Converts this CommonReqField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.CommonReqField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommonReqField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CommonReqField;
            })();

            pb.CommonRtnField = (function() {

                /**
                 * Properties of a CommonRtnField.
                 * @memberof xyz.redtorch.pb
                 * @interface ICommonRtnField
                 * @property {string|null} [reqId] CommonRtnField reqId
                 * @property {number|null} [targetNodeId] CommonRtnField targetNodeId
                 * @property {number|null} [sourceNodeId] CommonRtnField sourceNodeId
                 */

                /**
                 * Constructs a new CommonRtnField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a CommonRtnField.
                 * @implements ICommonRtnField
                 * @constructor
                 * @param {xyz.redtorch.pb.ICommonRtnField=} [properties] Properties to set
                 */
                function CommonRtnField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CommonRtnField reqId.
                 * @member {string} reqId
                 * @memberof xyz.redtorch.pb.CommonRtnField
                 * @instance
                 */
                CommonRtnField.prototype.reqId = "";

                /**
                 * CommonRtnField targetNodeId.
                 * @member {number} targetNodeId
                 * @memberof xyz.redtorch.pb.CommonRtnField
                 * @instance
                 */
                CommonRtnField.prototype.targetNodeId = 0;

                /**
                 * CommonRtnField sourceNodeId.
                 * @member {number} sourceNodeId
                 * @memberof xyz.redtorch.pb.CommonRtnField
                 * @instance
                 */
                CommonRtnField.prototype.sourceNodeId = 0;

                /**
                 * Creates a new CommonRtnField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.CommonRtnField
                 * @static
                 * @param {xyz.redtorch.pb.ICommonRtnField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.CommonRtnField} CommonRtnField instance
                 */
                CommonRtnField.create = function create(properties) {
                    return new CommonRtnField(properties);
                };

                /**
                 * Encodes the specified CommonRtnField message. Does not implicitly {@link xyz.redtorch.pb.CommonRtnField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.CommonRtnField
                 * @static
                 * @param {xyz.redtorch.pb.ICommonRtnField} message CommonRtnField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonRtnField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.reqId != null && message.hasOwnProperty("reqId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.reqId);
                    if (message.targetNodeId != null && message.hasOwnProperty("targetNodeId"))
                        writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.targetNodeId);
                    if (message.sourceNodeId != null && message.hasOwnProperty("sourceNodeId"))
                        writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.sourceNodeId);
                    return writer;
                };

                /**
                 * Encodes the specified CommonRtnField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.CommonRtnField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.CommonRtnField
                 * @static
                 * @param {xyz.redtorch.pb.ICommonRtnField} message CommonRtnField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonRtnField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CommonRtnField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.CommonRtnField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.CommonRtnField} CommonRtnField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonRtnField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.CommonRtnField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.reqId = reader.string();
                            break;
                        case 2:
                            message.targetNodeId = reader.fixed32();
                            break;
                        case 3:
                            message.sourceNodeId = reader.fixed32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CommonRtnField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.CommonRtnField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.CommonRtnField} CommonRtnField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonRtnField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CommonRtnField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.CommonRtnField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommonRtnField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.reqId != null && message.hasOwnProperty("reqId"))
                        if (!$util.isString(message.reqId))
                            return "reqId: string expected";
                    if (message.targetNodeId != null && message.hasOwnProperty("targetNodeId"))
                        if (!$util.isInteger(message.targetNodeId))
                            return "targetNodeId: integer expected";
                    if (message.sourceNodeId != null && message.hasOwnProperty("sourceNodeId"))
                        if (!$util.isInteger(message.sourceNodeId))
                            return "sourceNodeId: integer expected";
                    return null;
                };

                /**
                 * Creates a CommonRtnField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.CommonRtnField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.CommonRtnField} CommonRtnField
                 */
                CommonRtnField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.CommonRtnField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.CommonRtnField();
                    if (object.reqId != null)
                        message.reqId = String(object.reqId);
                    if (object.targetNodeId != null)
                        message.targetNodeId = object.targetNodeId >>> 0;
                    if (object.sourceNodeId != null)
                        message.sourceNodeId = object.sourceNodeId >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a CommonRtnField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.CommonRtnField
                 * @static
                 * @param {xyz.redtorch.pb.CommonRtnField} message CommonRtnField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommonRtnField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.reqId = "";
                        object.targetNodeId = 0;
                        object.sourceNodeId = 0;
                    }
                    if (message.reqId != null && message.hasOwnProperty("reqId"))
                        object.reqId = message.reqId;
                    if (message.targetNodeId != null && message.hasOwnProperty("targetNodeId"))
                        object.targetNodeId = message.targetNodeId;
                    if (message.sourceNodeId != null && message.hasOwnProperty("sourceNodeId"))
                        object.sourceNodeId = message.sourceNodeId;
                    return object;
                };

                /**
                 * Converts this CommonRtnField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.CommonRtnField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommonRtnField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CommonRtnField;
            })();

            pb.CommonRspField = (function() {

                /**
                 * Properties of a CommonRspField.
                 * @memberof xyz.redtorch.pb
                 * @interface ICommonRspField
                 * @property {string|null} [reqId] CommonRspField reqId
                 * @property {xyz.redtorch.pb.CommonStatusEnum|null} [requestStatus] CommonRspField requestStatus
                 * @property {string|null} [info] CommonRspField info
                 * @property {number|null} [targetNodeId] CommonRspField targetNodeId
                 * @property {number|null} [sourceNodeId] CommonRspField sourceNodeId
                 */

                /**
                 * Constructs a new CommonRspField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a CommonRspField.
                 * @implements ICommonRspField
                 * @constructor
                 * @param {xyz.redtorch.pb.ICommonRspField=} [properties] Properties to set
                 */
                function CommonRspField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CommonRspField reqId.
                 * @member {string} reqId
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @instance
                 */
                CommonRspField.prototype.reqId = "";

                /**
                 * CommonRspField requestStatus.
                 * @member {xyz.redtorch.pb.CommonStatusEnum} requestStatus
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @instance
                 */
                CommonRspField.prototype.requestStatus = 0;

                /**
                 * CommonRspField info.
                 * @member {string} info
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @instance
                 */
                CommonRspField.prototype.info = "";

                /**
                 * CommonRspField targetNodeId.
                 * @member {number} targetNodeId
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @instance
                 */
                CommonRspField.prototype.targetNodeId = 0;

                /**
                 * CommonRspField sourceNodeId.
                 * @member {number} sourceNodeId
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @instance
                 */
                CommonRspField.prototype.sourceNodeId = 0;

                /**
                 * Creates a new CommonRspField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @static
                 * @param {xyz.redtorch.pb.ICommonRspField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.CommonRspField} CommonRspField instance
                 */
                CommonRspField.create = function create(properties) {
                    return new CommonRspField(properties);
                };

                /**
                 * Encodes the specified CommonRspField message. Does not implicitly {@link xyz.redtorch.pb.CommonRspField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @static
                 * @param {xyz.redtorch.pb.ICommonRspField} message CommonRspField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonRspField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.reqId != null && message.hasOwnProperty("reqId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.reqId);
                    if (message.requestStatus != null && message.hasOwnProperty("requestStatus"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.requestStatus);
                    if (message.info != null && message.hasOwnProperty("info"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.info);
                    if (message.targetNodeId != null && message.hasOwnProperty("targetNodeId"))
                        writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.targetNodeId);
                    if (message.sourceNodeId != null && message.hasOwnProperty("sourceNodeId"))
                        writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.sourceNodeId);
                    return writer;
                };

                /**
                 * Encodes the specified CommonRspField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.CommonRspField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @static
                 * @param {xyz.redtorch.pb.ICommonRspField} message CommonRspField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonRspField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CommonRspField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.CommonRspField} CommonRspField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonRspField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.CommonRspField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.reqId = reader.string();
                            break;
                        case 2:
                            message.requestStatus = reader.int32();
                            break;
                        case 3:
                            message.info = reader.string();
                            break;
                        case 4:
                            message.targetNodeId = reader.fixed32();
                            break;
                        case 5:
                            message.sourceNodeId = reader.fixed32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CommonRspField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.CommonRspField} CommonRspField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonRspField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CommonRspField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommonRspField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.reqId != null && message.hasOwnProperty("reqId"))
                        if (!$util.isString(message.reqId))
                            return "reqId: string expected";
                    if (message.requestStatus != null && message.hasOwnProperty("requestStatus"))
                        switch (message.requestStatus) {
                        default:
                            return "requestStatus: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.info != null && message.hasOwnProperty("info"))
                        if (!$util.isString(message.info))
                            return "info: string expected";
                    if (message.targetNodeId != null && message.hasOwnProperty("targetNodeId"))
                        if (!$util.isInteger(message.targetNodeId))
                            return "targetNodeId: integer expected";
                    if (message.sourceNodeId != null && message.hasOwnProperty("sourceNodeId"))
                        if (!$util.isInteger(message.sourceNodeId))
                            return "sourceNodeId: integer expected";
                    return null;
                };

                /**
                 * Creates a CommonRspField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.CommonRspField} CommonRspField
                 */
                CommonRspField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.CommonRspField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.CommonRspField();
                    if (object.reqId != null)
                        message.reqId = String(object.reqId);
                    switch (object.requestStatus) {
                    case "SUCCESS":
                    case 0:
                        message.requestStatus = 0;
                        break;
                    case "INFO":
                    case 1:
                        message.requestStatus = 1;
                        break;
                    case "WARN":
                    case 2:
                        message.requestStatus = 2;
                        break;
                    case "ERROR":
                    case 3:
                        message.requestStatus = 3;
                        break;
                    }
                    if (object.info != null)
                        message.info = String(object.info);
                    if (object.targetNodeId != null)
                        message.targetNodeId = object.targetNodeId >>> 0;
                    if (object.sourceNodeId != null)
                        message.sourceNodeId = object.sourceNodeId >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a CommonRspField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @static
                 * @param {xyz.redtorch.pb.CommonRspField} message CommonRspField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommonRspField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.reqId = "";
                        object.requestStatus = options.enums === String ? "SUCCESS" : 0;
                        object.info = "";
                        object.targetNodeId = 0;
                        object.sourceNodeId = 0;
                    }
                    if (message.reqId != null && message.hasOwnProperty("reqId"))
                        object.reqId = message.reqId;
                    if (message.requestStatus != null && message.hasOwnProperty("requestStatus"))
                        object.requestStatus = options.enums === String ? $root.xyz.redtorch.pb.CommonStatusEnum[message.requestStatus] : message.requestStatus;
                    if (message.info != null && message.hasOwnProperty("info"))
                        object.info = message.info;
                    if (message.targetNodeId != null && message.hasOwnProperty("targetNodeId"))
                        object.targetNodeId = message.targetNodeId;
                    if (message.sourceNodeId != null && message.hasOwnProperty("sourceNodeId"))
                        object.sourceNodeId = message.sourceNodeId;
                    return object;
                };

                /**
                 * Converts this CommonRspField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.CommonRspField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommonRspField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CommonRspField;
            })();

            pb.SubmitOrderReqField = (function() {

                /**
                 * Properties of a SubmitOrderReqField.
                 * @memberof xyz.redtorch.pb
                 * @interface ISubmitOrderReqField
                 * @property {string|null} [originOrderId] SubmitOrderReqField originOrderId
                 * @property {string|null} [accountCode] SubmitOrderReqField accountCode
                 * @property {xyz.redtorch.pb.CurrencyEnum|null} [currency] SubmitOrderReqField currency
                 * @property {xyz.redtorch.pb.IContractField|null} [contract] SubmitOrderReqField contract
                 * @property {string|null} [gatewayId] SubmitOrderReqField gatewayId
                 * @property {number|null} [price] SubmitOrderReqField price
                 * @property {number|null} [volume] SubmitOrderReqField volume
                 * @property {xyz.redtorch.pb.DirectionEnum|null} [direction] SubmitOrderReqField direction
                 * @property {xyz.redtorch.pb.OffsetEnum|null} [offset] SubmitOrderReqField offset
                 * @property {xyz.redtorch.pb.PriceTypeEnum|null} [priceType] SubmitOrderReqField priceType
                 * @property {xyz.redtorch.pb.TimeConditionTypeEnum|null} [timeConditionType] SubmitOrderReqField timeConditionType
                 */

                /**
                 * Constructs a new SubmitOrderReqField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a SubmitOrderReqField.
                 * @implements ISubmitOrderReqField
                 * @constructor
                 * @param {xyz.redtorch.pb.ISubmitOrderReqField=} [properties] Properties to set
                 */
                function SubmitOrderReqField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SubmitOrderReqField originOrderId.
                 * @member {string} originOrderId
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @instance
                 */
                SubmitOrderReqField.prototype.originOrderId = "";

                /**
                 * SubmitOrderReqField accountCode.
                 * @member {string} accountCode
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @instance
                 */
                SubmitOrderReqField.prototype.accountCode = "";

                /**
                 * SubmitOrderReqField currency.
                 * @member {xyz.redtorch.pb.CurrencyEnum} currency
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @instance
                 */
                SubmitOrderReqField.prototype.currency = 0;

                /**
                 * SubmitOrderReqField contract.
                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @instance
                 */
                SubmitOrderReqField.prototype.contract = null;

                /**
                 * SubmitOrderReqField gatewayId.
                 * @member {string} gatewayId
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @instance
                 */
                SubmitOrderReqField.prototype.gatewayId = "";

                /**
                 * SubmitOrderReqField price.
                 * @member {number} price
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @instance
                 */
                SubmitOrderReqField.prototype.price = 0;

                /**
                 * SubmitOrderReqField volume.
                 * @member {number} volume
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @instance
                 */
                SubmitOrderReqField.prototype.volume = 0;

                /**
                 * SubmitOrderReqField direction.
                 * @member {xyz.redtorch.pb.DirectionEnum} direction
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @instance
                 */
                SubmitOrderReqField.prototype.direction = 0;

                /**
                 * SubmitOrderReqField offset.
                 * @member {xyz.redtorch.pb.OffsetEnum} offset
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @instance
                 */
                SubmitOrderReqField.prototype.offset = 0;

                /**
                 * SubmitOrderReqField priceType.
                 * @member {xyz.redtorch.pb.PriceTypeEnum} priceType
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @instance
                 */
                SubmitOrderReqField.prototype.priceType = 0;

                /**
                 * SubmitOrderReqField timeConditionType.
                 * @member {xyz.redtorch.pb.TimeConditionTypeEnum} timeConditionType
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @instance
                 */
                SubmitOrderReqField.prototype.timeConditionType = 0;

                /**
                 * Creates a new SubmitOrderReqField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @static
                 * @param {xyz.redtorch.pb.ISubmitOrderReqField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.SubmitOrderReqField} SubmitOrderReqField instance
                 */
                SubmitOrderReqField.create = function create(properties) {
                    return new SubmitOrderReqField(properties);
                };

                /**
                 * Encodes the specified SubmitOrderReqField message. Does not implicitly {@link xyz.redtorch.pb.SubmitOrderReqField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @static
                 * @param {xyz.redtorch.pb.ISubmitOrderReqField} message SubmitOrderReqField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SubmitOrderReqField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.originOrderId);
                    if (message.accountCode != null && message.hasOwnProperty("accountCode"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountCode);
                    if (message.currency != null && message.hasOwnProperty("currency"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.currency);
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.gatewayId);
                    if (message.price != null && message.hasOwnProperty("price"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.price);
                    if (message.volume != null && message.hasOwnProperty("volume"))
                        writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.volume);
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.direction);
                    if (message.offset != null && message.hasOwnProperty("offset"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.offset);
                    if (message.priceType != null && message.hasOwnProperty("priceType"))
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.priceType);
                    if (message.timeConditionType != null && message.hasOwnProperty("timeConditionType"))
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.timeConditionType);
                    return writer;
                };

                /**
                 * Encodes the specified SubmitOrderReqField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.SubmitOrderReqField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @static
                 * @param {xyz.redtorch.pb.ISubmitOrderReqField} message SubmitOrderReqField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SubmitOrderReqField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a SubmitOrderReqField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.SubmitOrderReqField} SubmitOrderReqField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SubmitOrderReqField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.SubmitOrderReqField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.originOrderId = reader.string();
                            break;
                        case 2:
                            message.accountCode = reader.string();
                            break;
                        case 3:
                            message.currency = reader.int32();
                            break;
                        case 4:
                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.gatewayId = reader.string();
                            break;
                        case 6:
                            message.price = reader.double();
                            break;
                        case 7:
                            message.volume = reader.fixed32();
                            break;
                        case 8:
                            message.direction = reader.int32();
                            break;
                        case 9:
                            message.offset = reader.int32();
                            break;
                        case 10:
                            message.priceType = reader.int32();
                            break;
                        case 11:
                            message.timeConditionType = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a SubmitOrderReqField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.SubmitOrderReqField} SubmitOrderReqField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SubmitOrderReqField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a SubmitOrderReqField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SubmitOrderReqField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        if (!$util.isString(message.originOrderId))
                            return "originOrderId: string expected";
                    if (message.accountCode != null && message.hasOwnProperty("accountCode"))
                        if (!$util.isString(message.accountCode))
                            return "accountCode: string expected";
                    if (message.currency != null && message.hasOwnProperty("currency"))
                        switch (message.currency) {
                        default:
                            return "currency: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                            break;
                        }
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);
                        if (error)
                            return "contract." + error;
                    }
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        if (!$util.isString(message.gatewayId))
                            return "gatewayId: string expected";
                    if (message.price != null && message.hasOwnProperty("price"))
                        if (typeof message.price !== "number")
                            return "price: number expected";
                    if (message.volume != null && message.hasOwnProperty("volume"))
                        if (!$util.isInteger(message.volume))
                            return "volume: integer expected";
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        switch (message.direction) {
                        default:
                            return "direction: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.offset != null && message.hasOwnProperty("offset"))
                        switch (message.offset) {
                        default:
                            return "offset: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.priceType != null && message.hasOwnProperty("priceType"))
                        switch (message.priceType) {
                        default:
                            return "priceType: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (message.timeConditionType != null && message.hasOwnProperty("timeConditionType"))
                        switch (message.timeConditionType) {
                        default:
                            return "timeConditionType: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates a SubmitOrderReqField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.SubmitOrderReqField} SubmitOrderReqField
                 */
                SubmitOrderReqField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.SubmitOrderReqField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.SubmitOrderReqField();
                    if (object.originOrderId != null)
                        message.originOrderId = String(object.originOrderId);
                    if (object.accountCode != null)
                        message.accountCode = String(object.accountCode);
                    switch (object.currency) {
                    case "UNKNOWN_CURRENCY":
                    case 0:
                        message.currency = 0;
                        break;
                    case "USD":
                    case 1:
                        message.currency = 1;
                        break;
                    case "CNY":
                    case 2:
                        message.currency = 2;
                        break;
                    case "CNH":
                    case 3:
                        message.currency = 3;
                        break;
                    case "HKD":
                    case 4:
                        message.currency = 4;
                        break;
                    case "JPY":
                    case 5:
                        message.currency = 5;
                        break;
                    case "EUR":
                    case 6:
                        message.currency = 6;
                        break;
                    case "GBP":
                    case 7:
                        message.currency = 7;
                        break;
                    case "DEM":
                    case 8:
                        message.currency = 8;
                        break;
                    case "CHF":
                    case 9:
                        message.currency = 9;
                        break;
                    case "FRF":
                    case 10:
                        message.currency = 10;
                        break;
                    case "CAD":
                    case 11:
                        message.currency = 11;
                        break;
                    case "AUD":
                    case 12:
                        message.currency = 12;
                        break;
                    case "ATS":
                    case 13:
                        message.currency = 13;
                        break;
                    case "FIM":
                    case 14:
                        message.currency = 14;
                        break;
                    case "BEF":
                    case 15:
                        message.currency = 15;
                        break;
                    case "THB":
                    case 16:
                        message.currency = 16;
                        break;
                    case "IEP":
                    case 17:
                        message.currency = 17;
                        break;
                    case "ITL":
                    case 18:
                        message.currency = 18;
                        break;
                    case "LUF":
                    case 19:
                        message.currency = 19;
                        break;
                    case "NLG":
                    case 20:
                        message.currency = 20;
                        break;
                    case "PTE":
                    case 21:
                        message.currency = 21;
                        break;
                    case "ESP":
                    case 22:
                        message.currency = 22;
                        break;
                    case "IDR":
                    case 23:
                        message.currency = 23;
                        break;
                    case "MYR":
                    case 24:
                        message.currency = 24;
                        break;
                    case "NZD":
                    case 25:
                        message.currency = 25;
                        break;
                    case "PHP":
                    case 26:
                        message.currency = 26;
                        break;
                    case "SUR":
                    case 27:
                        message.currency = 27;
                        break;
                    case "SGD":
                    case 28:
                        message.currency = 28;
                        break;
                    case "KRW":
                    case 29:
                        message.currency = 29;
                        break;
                    }
                    if (object.contract != null) {
                        if (typeof object.contract !== "object")
                            throw TypeError(".xyz.redtorch.pb.SubmitOrderReqField.contract: object expected");
                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);
                    }
                    if (object.gatewayId != null)
                        message.gatewayId = String(object.gatewayId);
                    if (object.price != null)
                        message.price = Number(object.price);
                    if (object.volume != null)
                        message.volume = object.volume >>> 0;
                    switch (object.direction) {
                    case "UNKNOWN_DIRECTION":
                    case 0:
                        message.direction = 0;
                        break;
                    case "LONG":
                    case 1:
                        message.direction = 1;
                        break;
                    case "SHORT":
                    case 2:
                        message.direction = 2;
                        break;
                    case "NET":
                    case 3:
                        message.direction = 3;
                        break;
                    }
                    switch (object.offset) {
                    case "UNKNOWN_OFFSET":
                    case 0:
                        message.offset = 0;
                        break;
                    case "OFFSET_NONE":
                    case 1:
                        message.offset = 1;
                        break;
                    case "OPEN":
                    case 2:
                        message.offset = 2;
                        break;
                    case "CLOSE":
                    case 3:
                        message.offset = 3;
                        break;
                    case "CLOSE_TODAY":
                    case 4:
                        message.offset = 4;
                        break;
                    case "CLOSE_YESTERDAY":
                    case 5:
                        message.offset = 5;
                        break;
                    }
                    switch (object.priceType) {
                    case "UNKNOWN_PRICE_TYPE":
                    case 0:
                        message.priceType = 0;
                        break;
                    case "LIMIT":
                    case 1:
                        message.priceType = 1;
                        break;
                    case "MARKET":
                    case 2:
                        message.priceType = 2;
                        break;
                    case "FAK":
                    case 3:
                        message.priceType = 3;
                        break;
                    case "FOK":
                    case 4:
                        message.priceType = 4;
                        break;
                    }
                    switch (object.timeConditionType) {
                    case "UNKNOWN_TIME_CONDITION_TYPE":
                    case 0:
                        message.timeConditionType = 0;
                        break;
                    case "GTC":
                    case 1:
                        message.timeConditionType = 1;
                        break;
                    case "GFD":
                    case 2:
                        message.timeConditionType = 2;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a SubmitOrderReqField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @static
                 * @param {xyz.redtorch.pb.SubmitOrderReqField} message SubmitOrderReqField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SubmitOrderReqField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.originOrderId = "";
                        object.accountCode = "";
                        object.currency = options.enums === String ? "UNKNOWN_CURRENCY" : 0;
                        object.contract = null;
                        object.gatewayId = "";
                        object.price = 0;
                        object.volume = 0;
                        object.direction = options.enums === String ? "UNKNOWN_DIRECTION" : 0;
                        object.offset = options.enums === String ? "UNKNOWN_OFFSET" : 0;
                        object.priceType = options.enums === String ? "UNKNOWN_PRICE_TYPE" : 0;
                        object.timeConditionType = options.enums === String ? "UNKNOWN_TIME_CONDITION_TYPE" : 0;
                    }
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        object.originOrderId = message.originOrderId;
                    if (message.accountCode != null && message.hasOwnProperty("accountCode"))
                        object.accountCode = message.accountCode;
                    if (message.currency != null && message.hasOwnProperty("currency"))
                        object.currency = options.enums === String ? $root.xyz.redtorch.pb.CurrencyEnum[message.currency] : message.currency;
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        object.gatewayId = message.gatewayId;
                    if (message.price != null && message.hasOwnProperty("price"))
                        object.price = options.json && !isFinite(message.price) ? String(message.price) : message.price;
                    if (message.volume != null && message.hasOwnProperty("volume"))
                        object.volume = message.volume;
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        object.direction = options.enums === String ? $root.xyz.redtorch.pb.DirectionEnum[message.direction] : message.direction;
                    if (message.offset != null && message.hasOwnProperty("offset"))
                        object.offset = options.enums === String ? $root.xyz.redtorch.pb.OffsetEnum[message.offset] : message.offset;
                    if (message.priceType != null && message.hasOwnProperty("priceType"))
                        object.priceType = options.enums === String ? $root.xyz.redtorch.pb.PriceTypeEnum[message.priceType] : message.priceType;
                    if (message.timeConditionType != null && message.hasOwnProperty("timeConditionType"))
                        object.timeConditionType = options.enums === String ? $root.xyz.redtorch.pb.TimeConditionTypeEnum[message.timeConditionType] : message.timeConditionType;
                    return object;
                };

                /**
                 * Converts this SubmitOrderReqField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.SubmitOrderReqField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SubmitOrderReqField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return SubmitOrderReqField;
            })();

            pb.CancelOrderReqField = (function() {

                /**
                 * Properties of a CancelOrderReqField.
                 * @memberof xyz.redtorch.pb
                 * @interface ICancelOrderReqField
                 * @property {string|null} [originOrderId] CancelOrderReqField originOrderId
                 * @property {string|null} [orderId] CancelOrderReqField orderId
                 */

                /**
                 * Constructs a new CancelOrderReqField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a CancelOrderReqField.
                 * @implements ICancelOrderReqField
                 * @constructor
                 * @param {xyz.redtorch.pb.ICancelOrderReqField=} [properties] Properties to set
                 */
                function CancelOrderReqField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CancelOrderReqField originOrderId.
                 * @member {string} originOrderId
                 * @memberof xyz.redtorch.pb.CancelOrderReqField
                 * @instance
                 */
                CancelOrderReqField.prototype.originOrderId = "";

                /**
                 * CancelOrderReqField orderId.
                 * @member {string} orderId
                 * @memberof xyz.redtorch.pb.CancelOrderReqField
                 * @instance
                 */
                CancelOrderReqField.prototype.orderId = "";

                /**
                 * Creates a new CancelOrderReqField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.CancelOrderReqField
                 * @static
                 * @param {xyz.redtorch.pb.ICancelOrderReqField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.CancelOrderReqField} CancelOrderReqField instance
                 */
                CancelOrderReqField.create = function create(properties) {
                    return new CancelOrderReqField(properties);
                };

                /**
                 * Encodes the specified CancelOrderReqField message. Does not implicitly {@link xyz.redtorch.pb.CancelOrderReqField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.CancelOrderReqField
                 * @static
                 * @param {xyz.redtorch.pb.ICancelOrderReqField} message CancelOrderReqField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOrderReqField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.originOrderId);
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);
                    return writer;
                };

                /**
                 * Encodes the specified CancelOrderReqField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.CancelOrderReqField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.CancelOrderReqField
                 * @static
                 * @param {xyz.redtorch.pb.ICancelOrderReqField} message CancelOrderReqField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOrderReqField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CancelOrderReqField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.CancelOrderReqField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.CancelOrderReqField} CancelOrderReqField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOrderReqField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.CancelOrderReqField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.originOrderId = reader.string();
                            break;
                        case 2:
                            message.orderId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CancelOrderReqField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.CancelOrderReqField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.CancelOrderReqField} CancelOrderReqField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOrderReqField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CancelOrderReqField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.CancelOrderReqField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CancelOrderReqField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        if (!$util.isString(message.originOrderId))
                            return "originOrderId: string expected";
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        if (!$util.isString(message.orderId))
                            return "orderId: string expected";
                    return null;
                };

                /**
                 * Creates a CancelOrderReqField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.CancelOrderReqField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.CancelOrderReqField} CancelOrderReqField
                 */
                CancelOrderReqField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.CancelOrderReqField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.CancelOrderReqField();
                    if (object.originOrderId != null)
                        message.originOrderId = String(object.originOrderId);
                    if (object.orderId != null)
                        message.orderId = String(object.orderId);
                    return message;
                };

                /**
                 * Creates a plain object from a CancelOrderReqField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.CancelOrderReqField
                 * @static
                 * @param {xyz.redtorch.pb.CancelOrderReqField} message CancelOrderReqField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CancelOrderReqField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.originOrderId = "";
                        object.orderId = "";
                    }
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        object.originOrderId = message.originOrderId;
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        object.orderId = message.orderId;
                    return object;
                };

                /**
                 * Converts this CancelOrderReqField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.CancelOrderReqField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CancelOrderReqField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CancelOrderReqField;
            })();

            pb.GatewaySettingField = (function() {

                /**
                 * Properties of a GatewaySettingField.
                 * @memberof xyz.redtorch.pb
                 * @interface IGatewaySettingField
                 * @property {string|null} [gatewayId] GatewaySettingField gatewayId
                 * @property {string|null} [gatewayName] GatewaySettingField gatewayName
                 * @property {string|null} [gatewayDescription] GatewaySettingField gatewayDescription
                 * @property {string|null} [implementClassName] GatewaySettingField implementClassName
                 * @property {xyz.redtorch.pb.GatewayTypeEnum|null} [gatewayType] GatewaySettingField gatewayType
                 * @property {xyz.redtorch.pb.GatewayAdapterTypeEnum|null} [gatewayAdapterType] GatewaySettingField gatewayAdapterType
                 * @property {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField|null} [ctpApiSetting] GatewaySettingField ctpApiSetting
                 * @property {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField|null} [ibApiSetting] GatewaySettingField ibApiSetting
                 * @property {xyz.redtorch.pb.ConnectStatusEnum|null} [status] GatewaySettingField status
                 * @property {number|Long|null} [version] GatewaySettingField version
                 */

                /**
                 * Constructs a new GatewaySettingField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a GatewaySettingField.
                 * @implements IGatewaySettingField
                 * @constructor
                 * @param {xyz.redtorch.pb.IGatewaySettingField=} [properties] Properties to set
                 */
                function GatewaySettingField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GatewaySettingField gatewayId.
                 * @member {string} gatewayId
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @instance
                 */
                GatewaySettingField.prototype.gatewayId = "";

                /**
                 * GatewaySettingField gatewayName.
                 * @member {string} gatewayName
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @instance
                 */
                GatewaySettingField.prototype.gatewayName = "";

                /**
                 * GatewaySettingField gatewayDescription.
                 * @member {string} gatewayDescription
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @instance
                 */
                GatewaySettingField.prototype.gatewayDescription = "";

                /**
                 * GatewaySettingField implementClassName.
                 * @member {string} implementClassName
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @instance
                 */
                GatewaySettingField.prototype.implementClassName = "";

                /**
                 * GatewaySettingField gatewayType.
                 * @member {xyz.redtorch.pb.GatewayTypeEnum} gatewayType
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @instance
                 */
                GatewaySettingField.prototype.gatewayType = 0;

                /**
                 * GatewaySettingField gatewayAdapterType.
                 * @member {xyz.redtorch.pb.GatewayAdapterTypeEnum} gatewayAdapterType
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @instance
                 */
                GatewaySettingField.prototype.gatewayAdapterType = 0;

                /**
                 * GatewaySettingField ctpApiSetting.
                 * @member {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField|null|undefined} ctpApiSetting
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @instance
                 */
                GatewaySettingField.prototype.ctpApiSetting = null;

                /**
                 * GatewaySettingField ibApiSetting.
                 * @member {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField|null|undefined} ibApiSetting
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @instance
                 */
                GatewaySettingField.prototype.ibApiSetting = null;

                /**
                 * GatewaySettingField status.
                 * @member {xyz.redtorch.pb.ConnectStatusEnum} status
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @instance
                 */
                GatewaySettingField.prototype.status = 0;

                /**
                 * GatewaySettingField version.
                 * @member {number|Long} version
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @instance
                 */
                GatewaySettingField.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Creates a new GatewaySettingField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @static
                 * @param {xyz.redtorch.pb.IGatewaySettingField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.GatewaySettingField} GatewaySettingField instance
                 */
                GatewaySettingField.create = function create(properties) {
                    return new GatewaySettingField(properties);
                };

                /**
                 * Encodes the specified GatewaySettingField message. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @static
                 * @param {xyz.redtorch.pb.IGatewaySettingField} message GatewaySettingField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GatewaySettingField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.gatewayId);
                    if (message.gatewayName != null && message.hasOwnProperty("gatewayName"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatewayName);
                    if (message.gatewayDescription != null && message.hasOwnProperty("gatewayDescription"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.gatewayDescription);
                    if (message.implementClassName != null && message.hasOwnProperty("implementClassName"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.implementClassName);
                    if (message.gatewayType != null && message.hasOwnProperty("gatewayType"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.gatewayType);
                    if (message.gatewayAdapterType != null && message.hasOwnProperty("gatewayAdapterType"))
                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.gatewayAdapterType);
                    if (message.ctpApiSetting != null && message.hasOwnProperty("ctpApiSetting"))
                        $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.encode(message.ctpApiSetting, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.ibApiSetting != null && message.hasOwnProperty("ibApiSetting"))
                        $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.encode(message.ibApiSetting, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.status != null && message.hasOwnProperty("status"))
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.status);
                    if (message.version != null && message.hasOwnProperty("version"))
                        writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.version);
                    return writer;
                };

                /**
                 * Encodes the specified GatewaySettingField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @static
                 * @param {xyz.redtorch.pb.IGatewaySettingField} message GatewaySettingField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GatewaySettingField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GatewaySettingField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.GatewaySettingField} GatewaySettingField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GatewaySettingField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.GatewaySettingField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.gatewayId = reader.string();
                            break;
                        case 2:
                            message.gatewayName = reader.string();
                            break;
                        case 4:
                            message.gatewayDescription = reader.string();
                            break;
                        case 5:
                            message.implementClassName = reader.string();
                            break;
                        case 6:
                            message.gatewayType = reader.int32();
                            break;
                        case 7:
                            message.gatewayAdapterType = reader.int32();
                            break;
                        case 8:
                            message.ctpApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.ibApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.decode(reader, reader.uint32());
                            break;
                        case 10:
                            message.status = reader.int32();
                            break;
                        case 11:
                            message.version = reader.fixed64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GatewaySettingField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.GatewaySettingField} GatewaySettingField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GatewaySettingField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GatewaySettingField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GatewaySettingField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        if (!$util.isString(message.gatewayId))
                            return "gatewayId: string expected";
                    if (message.gatewayName != null && message.hasOwnProperty("gatewayName"))
                        if (!$util.isString(message.gatewayName))
                            return "gatewayName: string expected";
                    if (message.gatewayDescription != null && message.hasOwnProperty("gatewayDescription"))
                        if (!$util.isString(message.gatewayDescription))
                            return "gatewayDescription: string expected";
                    if (message.implementClassName != null && message.hasOwnProperty("implementClassName"))
                        if (!$util.isString(message.implementClassName))
                            return "implementClassName: string expected";
                    if (message.gatewayType != null && message.hasOwnProperty("gatewayType"))
                        switch (message.gatewayType) {
                        default:
                            return "gatewayType: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.gatewayAdapterType != null && message.hasOwnProperty("gatewayAdapterType"))
                        switch (message.gatewayAdapterType) {
                        default:
                            return "gatewayAdapterType: enum value expected";
                        case 0:
                        case 1:
                            break;
                        }
                    if (message.ctpApiSetting != null && message.hasOwnProperty("ctpApiSetting")) {
                        var error = $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.verify(message.ctpApiSetting);
                        if (error)
                            return "ctpApiSetting." + error;
                    }
                    if (message.ibApiSetting != null && message.hasOwnProperty("ibApiSetting")) {
                        var error = $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.verify(message.ibApiSetting);
                        if (error)
                            return "ibApiSetting." + error;
                    }
                    if (message.status != null && message.hasOwnProperty("status"))
                        switch (message.status) {
                        default:
                            return "status: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))
                            return "version: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a GatewaySettingField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.GatewaySettingField} GatewaySettingField
                 */
                GatewaySettingField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.GatewaySettingField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.GatewaySettingField();
                    if (object.gatewayId != null)
                        message.gatewayId = String(object.gatewayId);
                    if (object.gatewayName != null)
                        message.gatewayName = String(object.gatewayName);
                    if (object.gatewayDescription != null)
                        message.gatewayDescription = String(object.gatewayDescription);
                    if (object.implementClassName != null)
                        message.implementClassName = String(object.implementClassName);
                    switch (object.gatewayType) {
                    case "TRADE_AND_MARKET_DATA":
                    case 0:
                        message.gatewayType = 0;
                        break;
                    case "MARKET_DATA":
                    case 1:
                        message.gatewayType = 1;
                        break;
                    case "TRADE_ONLY":
                    case 2:
                        message.gatewayType = 2;
                        break;
                    }
                    switch (object.gatewayAdapterType) {
                    case "CTP":
                    case 0:
                        message.gatewayAdapterType = 0;
                        break;
                    case "IB":
                    case 1:
                        message.gatewayAdapterType = 1;
                        break;
                    }
                    if (object.ctpApiSetting != null) {
                        if (typeof object.ctpApiSetting !== "object")
                            throw TypeError(".xyz.redtorch.pb.GatewaySettingField.ctpApiSetting: object expected");
                        message.ctpApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.fromObject(object.ctpApiSetting);
                    }
                    if (object.ibApiSetting != null) {
                        if (typeof object.ibApiSetting !== "object")
                            throw TypeError(".xyz.redtorch.pb.GatewaySettingField.ibApiSetting: object expected");
                        message.ibApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.fromObject(object.ibApiSetting);
                    }
                    switch (object.status) {
                    case "DISCONNECTED":
                    case 0:
                        message.status = 0;
                        break;
                    case "CONNECTED":
                    case 1:
                        message.status = 1;
                        break;
                    case "DISCONNECTING":
                    case 2:
                        message.status = 2;
                        break;
                    case "CONNECTING":
                    case 3:
                        message.status = 3;
                        break;
                    }
                    if (object.version != null)
                        if ($util.Long)
                            (message.version = $util.Long.fromValue(object.version)).unsigned = false;
                        else if (typeof object.version === "string")
                            message.version = parseInt(object.version, 10);
                        else if (typeof object.version === "number")
                            message.version = object.version;
                        else if (typeof object.version === "object")
                            message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();
                    return message;
                };

                /**
                 * Creates a plain object from a GatewaySettingField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @static
                 * @param {xyz.redtorch.pb.GatewaySettingField} message GatewaySettingField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GatewaySettingField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.gatewayId = "";
                        object.gatewayName = "";
                        object.gatewayDescription = "";
                        object.implementClassName = "";
                        object.gatewayType = options.enums === String ? "TRADE_AND_MARKET_DATA" : 0;
                        object.gatewayAdapterType = options.enums === String ? "CTP" : 0;
                        object.ctpApiSetting = null;
                        object.ibApiSetting = null;
                        object.status = options.enums === String ? "DISCONNECTED" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.version = options.longs === String ? "0" : 0;
                    }
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        object.gatewayId = message.gatewayId;
                    if (message.gatewayName != null && message.hasOwnProperty("gatewayName"))
                        object.gatewayName = message.gatewayName;
                    if (message.gatewayDescription != null && message.hasOwnProperty("gatewayDescription"))
                        object.gatewayDescription = message.gatewayDescription;
                    if (message.implementClassName != null && message.hasOwnProperty("implementClassName"))
                        object.implementClassName = message.implementClassName;
                    if (message.gatewayType != null && message.hasOwnProperty("gatewayType"))
                        object.gatewayType = options.enums === String ? $root.xyz.redtorch.pb.GatewayTypeEnum[message.gatewayType] : message.gatewayType;
                    if (message.gatewayAdapterType != null && message.hasOwnProperty("gatewayAdapterType"))
                        object.gatewayAdapterType = options.enums === String ? $root.xyz.redtorch.pb.GatewayAdapterTypeEnum[message.gatewayAdapterType] : message.gatewayAdapterType;
                    if (message.ctpApiSetting != null && message.hasOwnProperty("ctpApiSetting"))
                        object.ctpApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.toObject(message.ctpApiSetting, options);
                    if (message.ibApiSetting != null && message.hasOwnProperty("ibApiSetting"))
                        object.ibApiSetting = $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.toObject(message.ibApiSetting, options);
                    if (message.status != null && message.hasOwnProperty("status"))
                        object.status = options.enums === String ? $root.xyz.redtorch.pb.ConnectStatusEnum[message.status] : message.status;
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (typeof message.version === "number")
                            object.version = options.longs === String ? String(message.version) : message.version;
                        else
                            object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;
                    return object;
                };

                /**
                 * Converts this GatewaySettingField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.GatewaySettingField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GatewaySettingField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                GatewaySettingField.CtpApiSettingField = (function() {

                    /**
                     * Properties of a CtpApiSettingField.
                     * @memberof xyz.redtorch.pb.GatewaySettingField
                     * @interface ICtpApiSettingField
                     * @property {string|null} [userId] CtpApiSettingField userId
                     * @property {string|null} [password] CtpApiSettingField password
                     * @property {string|null} [brokerId] CtpApiSettingField brokerId
                     * @property {string|null} [tdHost] CtpApiSettingField tdHost
                     * @property {string|null} [tdPort] CtpApiSettingField tdPort
                     * @property {string|null} [mdHost] CtpApiSettingField mdHost
                     * @property {string|null} [mdPort] CtpApiSettingField mdPort
                     * @property {string|null} [authCode] CtpApiSettingField authCode
                     * @property {string|null} [userProductInfo] CtpApiSettingField userProductInfo
                     * @property {string|null} [appId] CtpApiSettingField appId
                     */

                    /**
                     * Constructs a new CtpApiSettingField.
                     * @memberof xyz.redtorch.pb.GatewaySettingField
                     * @classdesc Represents a CtpApiSettingField.
                     * @implements ICtpApiSettingField
                     * @constructor
                     * @param {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField=} [properties] Properties to set
                     */
                    function CtpApiSettingField(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CtpApiSettingField userId.
                     * @member {string} userId
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @instance
                     */
                    CtpApiSettingField.prototype.userId = "";

                    /**
                     * CtpApiSettingField password.
                     * @member {string} password
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @instance
                     */
                    CtpApiSettingField.prototype.password = "";

                    /**
                     * CtpApiSettingField brokerId.
                     * @member {string} brokerId
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @instance
                     */
                    CtpApiSettingField.prototype.brokerId = "";

                    /**
                     * CtpApiSettingField tdHost.
                     * @member {string} tdHost
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @instance
                     */
                    CtpApiSettingField.prototype.tdHost = "";

                    /**
                     * CtpApiSettingField tdPort.
                     * @member {string} tdPort
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @instance
                     */
                    CtpApiSettingField.prototype.tdPort = "";

                    /**
                     * CtpApiSettingField mdHost.
                     * @member {string} mdHost
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @instance
                     */
                    CtpApiSettingField.prototype.mdHost = "";

                    /**
                     * CtpApiSettingField mdPort.
                     * @member {string} mdPort
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @instance
                     */
                    CtpApiSettingField.prototype.mdPort = "";

                    /**
                     * CtpApiSettingField authCode.
                     * @member {string} authCode
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @instance
                     */
                    CtpApiSettingField.prototype.authCode = "";

                    /**
                     * CtpApiSettingField userProductInfo.
                     * @member {string} userProductInfo
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @instance
                     */
                    CtpApiSettingField.prototype.userProductInfo = "";

                    /**
                     * CtpApiSettingField appId.
                     * @member {string} appId
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @instance
                     */
                    CtpApiSettingField.prototype.appId = "";

                    /**
                     * Creates a new CtpApiSettingField instance using the specified properties.
                     * @function create
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @static
                     * @param {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField=} [properties] Properties to set
                     * @returns {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} CtpApiSettingField instance
                     */
                    CtpApiSettingField.create = function create(properties) {
                        return new CtpApiSettingField(properties);
                    };

                    /**
                     * Encodes the specified CtpApiSettingField message. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.verify|verify} messages.
                     * @function encode
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @static
                     * @param {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField} message CtpApiSettingField message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CtpApiSettingField.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.userId != null && message.hasOwnProperty("userId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);
                        if (message.password != null && message.hasOwnProperty("password"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
                        if (message.brokerId != null && message.hasOwnProperty("brokerId"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.brokerId);
                        if (message.tdHost != null && message.hasOwnProperty("tdHost"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.tdHost);
                        if (message.tdPort != null && message.hasOwnProperty("tdPort"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.tdPort);
                        if (message.mdHost != null && message.hasOwnProperty("mdHost"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.mdHost);
                        if (message.mdPort != null && message.hasOwnProperty("mdPort"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.mdPort);
                        if (message.authCode != null && message.hasOwnProperty("authCode"))
                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.authCode);
                        if (message.userProductInfo != null && message.hasOwnProperty("userProductInfo"))
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.userProductInfo);
                        if (message.appId != null && message.hasOwnProperty("appId"))
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.appId);
                        return writer;
                    };

                    /**
                     * Encodes the specified CtpApiSettingField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @static
                     * @param {xyz.redtorch.pb.GatewaySettingField.ICtpApiSettingField} message CtpApiSettingField message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CtpApiSettingField.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CtpApiSettingField message from the specified reader or buffer.
                     * @function decode
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} CtpApiSettingField
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CtpApiSettingField.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.userId = reader.string();
                                break;
                            case 2:
                                message.password = reader.string();
                                break;
                            case 3:
                                message.brokerId = reader.string();
                                break;
                            case 4:
                                message.tdHost = reader.string();
                                break;
                            case 5:
                                message.tdPort = reader.string();
                                break;
                            case 6:
                                message.mdHost = reader.string();
                                break;
                            case 7:
                                message.mdPort = reader.string();
                                break;
                            case 8:
                                message.authCode = reader.string();
                                break;
                            case 9:
                                message.userProductInfo = reader.string();
                                break;
                            case 10:
                                message.appId = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CtpApiSettingField message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} CtpApiSettingField
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CtpApiSettingField.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CtpApiSettingField message.
                     * @function verify
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CtpApiSettingField.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.userId != null && message.hasOwnProperty("userId"))
                            if (!$util.isString(message.userId))
                                return "userId: string expected";
                        if (message.password != null && message.hasOwnProperty("password"))
                            if (!$util.isString(message.password))
                                return "password: string expected";
                        if (message.brokerId != null && message.hasOwnProperty("brokerId"))
                            if (!$util.isString(message.brokerId))
                                return "brokerId: string expected";
                        if (message.tdHost != null && message.hasOwnProperty("tdHost"))
                            if (!$util.isString(message.tdHost))
                                return "tdHost: string expected";
                        if (message.tdPort != null && message.hasOwnProperty("tdPort"))
                            if (!$util.isString(message.tdPort))
                                return "tdPort: string expected";
                        if (message.mdHost != null && message.hasOwnProperty("mdHost"))
                            if (!$util.isString(message.mdHost))
                                return "mdHost: string expected";
                        if (message.mdPort != null && message.hasOwnProperty("mdPort"))
                            if (!$util.isString(message.mdPort))
                                return "mdPort: string expected";
                        if (message.authCode != null && message.hasOwnProperty("authCode"))
                            if (!$util.isString(message.authCode))
                                return "authCode: string expected";
                        if (message.userProductInfo != null && message.hasOwnProperty("userProductInfo"))
                            if (!$util.isString(message.userProductInfo))
                                return "userProductInfo: string expected";
                        if (message.appId != null && message.hasOwnProperty("appId"))
                            if (!$util.isString(message.appId))
                                return "appId: string expected";
                        return null;
                    };

                    /**
                     * Creates a CtpApiSettingField message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} CtpApiSettingField
                     */
                    CtpApiSettingField.fromObject = function fromObject(object) {
                        if (object instanceof $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField)
                            return object;
                        var message = new $root.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField();
                        if (object.userId != null)
                            message.userId = String(object.userId);
                        if (object.password != null)
                            message.password = String(object.password);
                        if (object.brokerId != null)
                            message.brokerId = String(object.brokerId);
                        if (object.tdHost != null)
                            message.tdHost = String(object.tdHost);
                        if (object.tdPort != null)
                            message.tdPort = String(object.tdPort);
                        if (object.mdHost != null)
                            message.mdHost = String(object.mdHost);
                        if (object.mdPort != null)
                            message.mdPort = String(object.mdPort);
                        if (object.authCode != null)
                            message.authCode = String(object.authCode);
                        if (object.userProductInfo != null)
                            message.userProductInfo = String(object.userProductInfo);
                        if (object.appId != null)
                            message.appId = String(object.appId);
                        return message;
                    };

                    /**
                     * Creates a plain object from a CtpApiSettingField message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @static
                     * @param {xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} message CtpApiSettingField
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CtpApiSettingField.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.userId = "";
                            object.password = "";
                            object.brokerId = "";
                            object.tdHost = "";
                            object.tdPort = "";
                            object.mdHost = "";
                            object.mdPort = "";
                            object.authCode = "";
                            object.userProductInfo = "";
                            object.appId = "";
                        }
                        if (message.userId != null && message.hasOwnProperty("userId"))
                            object.userId = message.userId;
                        if (message.password != null && message.hasOwnProperty("password"))
                            object.password = message.password;
                        if (message.brokerId != null && message.hasOwnProperty("brokerId"))
                            object.brokerId = message.brokerId;
                        if (message.tdHost != null && message.hasOwnProperty("tdHost"))
                            object.tdHost = message.tdHost;
                        if (message.tdPort != null && message.hasOwnProperty("tdPort"))
                            object.tdPort = message.tdPort;
                        if (message.mdHost != null && message.hasOwnProperty("mdHost"))
                            object.mdHost = message.mdHost;
                        if (message.mdPort != null && message.hasOwnProperty("mdPort"))
                            object.mdPort = message.mdPort;
                        if (message.authCode != null && message.hasOwnProperty("authCode"))
                            object.authCode = message.authCode;
                        if (message.userProductInfo != null && message.hasOwnProperty("userProductInfo"))
                            object.userProductInfo = message.userProductInfo;
                        if (message.appId != null && message.hasOwnProperty("appId"))
                            object.appId = message.appId;
                        return object;
                    };

                    /**
                     * Converts this CtpApiSettingField to JSON.
                     * @function toJSON
                     * @memberof xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CtpApiSettingField.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CtpApiSettingField;
                })();

                GatewaySettingField.IbApiSettingField = (function() {

                    /**
                     * Properties of an IbApiSettingField.
                     * @memberof xyz.redtorch.pb.GatewaySettingField
                     * @interface IIbApiSettingField
                     * @property {string|null} [host] IbApiSettingField host
                     * @property {number|null} [port] IbApiSettingField port
                     * @property {number|null} [clientId] IbApiSettingField clientId
                     */

                    /**
                     * Constructs a new IbApiSettingField.
                     * @memberof xyz.redtorch.pb.GatewaySettingField
                     * @classdesc Represents an IbApiSettingField.
                     * @implements IIbApiSettingField
                     * @constructor
                     * @param {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField=} [properties] Properties to set
                     */
                    function IbApiSettingField(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * IbApiSettingField host.
                     * @member {string} host
                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField
                     * @instance
                     */
                    IbApiSettingField.prototype.host = "";

                    /**
                     * IbApiSettingField port.
                     * @member {number} port
                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField
                     * @instance
                     */
                    IbApiSettingField.prototype.port = 0;

                    /**
                     * IbApiSettingField clientId.
                     * @member {number} clientId
                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField
                     * @instance
                     */
                    IbApiSettingField.prototype.clientId = 0;

                    /**
                     * Creates a new IbApiSettingField instance using the specified properties.
                     * @function create
                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField
                     * @static
                     * @param {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField=} [properties] Properties to set
                     * @returns {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} IbApiSettingField instance
                     */
                    IbApiSettingField.create = function create(properties) {
                        return new IbApiSettingField(properties);
                    };

                    /**
                     * Encodes the specified IbApiSettingField message. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.verify|verify} messages.
                     * @function encode
                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField
                     * @static
                     * @param {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField} message IbApiSettingField message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IbApiSettingField.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.host != null && message.hasOwnProperty("host"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.host);
                        if (message.port != null && message.hasOwnProperty("port"))
                            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.port);
                        if (message.clientId != null && message.hasOwnProperty("clientId"))
                            writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.clientId);
                        return writer;
                    };

                    /**
                     * Encodes the specified IbApiSettingField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField
                     * @static
                     * @param {xyz.redtorch.pb.GatewaySettingField.IIbApiSettingField} message IbApiSettingField message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IbApiSettingField.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an IbApiSettingField message from the specified reader or buffer.
                     * @function decode
                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} IbApiSettingField
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IbApiSettingField.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.host = reader.string();
                                break;
                            case 2:
                                message.port = reader.fixed32();
                                break;
                            case 3:
                                message.clientId = reader.fixed32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an IbApiSettingField message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} IbApiSettingField
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IbApiSettingField.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an IbApiSettingField message.
                     * @function verify
                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IbApiSettingField.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.host != null && message.hasOwnProperty("host"))
                            if (!$util.isString(message.host))
                                return "host: string expected";
                        if (message.port != null && message.hasOwnProperty("port"))
                            if (!$util.isInteger(message.port))
                                return "port: integer expected";
                        if (message.clientId != null && message.hasOwnProperty("clientId"))
                            if (!$util.isInteger(message.clientId))
                                return "clientId: integer expected";
                        return null;
                    };

                    /**
                     * Creates an IbApiSettingField message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} IbApiSettingField
                     */
                    IbApiSettingField.fromObject = function fromObject(object) {
                        if (object instanceof $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField)
                            return object;
                        var message = new $root.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField();
                        if (object.host != null)
                            message.host = String(object.host);
                        if (object.port != null)
                            message.port = object.port >>> 0;
                        if (object.clientId != null)
                            message.clientId = object.clientId >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from an IbApiSettingField message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField
                     * @static
                     * @param {xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} message IbApiSettingField
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IbApiSettingField.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.host = "";
                            object.port = 0;
                            object.clientId = 0;
                        }
                        if (message.host != null && message.hasOwnProperty("host"))
                            object.host = message.host;
                        if (message.port != null && message.hasOwnProperty("port"))
                            object.port = message.port;
                        if (message.clientId != null && message.hasOwnProperty("clientId"))
                            object.clientId = message.clientId;
                        return object;
                    };

                    /**
                     * Converts this IbApiSettingField to JSON.
                     * @function toJSON
                     * @memberof xyz.redtorch.pb.GatewaySettingField.IbApiSettingField
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IbApiSettingField.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return IbApiSettingField;
                })();

                return GatewaySettingField;
            })();

            pb.LogField = (function() {

                /**
                 * Properties of a LogField.
                 * @memberof xyz.redtorch.pb
                 * @interface ILogField
                 * @property {xyz.redtorch.pb.LogLevelEnum|null} [logLevel] LogField logLevel
                 * @property {number|Long|null} [timestamp] LogField timestamp
                 * @property {string|null} [content] LogField content
                 */

                /**
                 * Constructs a new LogField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a LogField.
                 * @implements ILogField
                 * @constructor
                 * @param {xyz.redtorch.pb.ILogField=} [properties] Properties to set
                 */
                function LogField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * LogField logLevel.
                 * @member {xyz.redtorch.pb.LogLevelEnum} logLevel
                 * @memberof xyz.redtorch.pb.LogField
                 * @instance
                 */
                LogField.prototype.logLevel = 0;

                /**
                 * LogField timestamp.
                 * @member {number|Long} timestamp
                 * @memberof xyz.redtorch.pb.LogField
                 * @instance
                 */
                LogField.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * LogField content.
                 * @member {string} content
                 * @memberof xyz.redtorch.pb.LogField
                 * @instance
                 */
                LogField.prototype.content = "";

                /**
                 * Creates a new LogField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.LogField
                 * @static
                 * @param {xyz.redtorch.pb.ILogField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.LogField} LogField instance
                 */
                LogField.create = function create(properties) {
                    return new LogField(properties);
                };

                /**
                 * Encodes the specified LogField message. Does not implicitly {@link xyz.redtorch.pb.LogField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.LogField
                 * @static
                 * @param {xyz.redtorch.pb.ILogField} message LogField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LogField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.logLevel != null && message.hasOwnProperty("logLevel"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.logLevel);
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.timestamp);
                    if (message.content != null && message.hasOwnProperty("content"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);
                    return writer;
                };

                /**
                 * Encodes the specified LogField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.LogField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.LogField
                 * @static
                 * @param {xyz.redtorch.pb.ILogField} message LogField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LogField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a LogField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.LogField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.LogField} LogField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LogField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.LogField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.logLevel = reader.int32();
                            break;
                        case 2:
                            message.timestamp = reader.fixed64();
                            break;
                        case 3:
                            message.content = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a LogField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.LogField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.LogField} LogField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LogField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a LogField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.LogField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LogField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.logLevel != null && message.hasOwnProperty("logLevel"))
                        switch (message.logLevel) {
                        default:
                            return "logLevel: enum value expected";
                        case 0:
                        case 40000:
                        case 30000:
                        case 20000:
                        case 10000:
                        case 5000:
                            break;
                        }
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                            return "timestamp: integer|Long expected";
                    if (message.content != null && message.hasOwnProperty("content"))
                        if (!$util.isString(message.content))
                            return "content: string expected";
                    return null;
                };

                /**
                 * Creates a LogField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.LogField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.LogField} LogField
                 */
                LogField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.LogField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.LogField();
                    switch (object.logLevel) {
                    case "ALL_LOG_LEVEL":
                    case 0:
                        message.logLevel = 0;
                        break;
                    case "ERROR_LOG_LEVEL":
                    case 40000:
                        message.logLevel = 40000;
                        break;
                    case "WARN_LOG_LEVEL":
                    case 30000:
                        message.logLevel = 30000;
                        break;
                    case "INFO_LOG_LEVEL":
                    case 20000:
                        message.logLevel = 20000;
                        break;
                    case "DEBUG_LOG_LEVEL":
                    case 10000:
                        message.logLevel = 10000;
                        break;
                    case "TRACE_LOG_LEVEL":
                    case 5000:
                        message.logLevel = 5000;
                        break;
                    }
                    if (object.timestamp != null)
                        if ($util.Long)
                            (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                        else if (typeof object.timestamp === "string")
                            message.timestamp = parseInt(object.timestamp, 10);
                        else if (typeof object.timestamp === "number")
                            message.timestamp = object.timestamp;
                        else if (typeof object.timestamp === "object")
                            message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
                    if (object.content != null)
                        message.content = String(object.content);
                    return message;
                };

                /**
                 * Creates a plain object from a LogField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.LogField
                 * @static
                 * @param {xyz.redtorch.pb.LogField} message LogField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LogField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.logLevel = options.enums === String ? "ALL_LOG_LEVEL" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.timestamp = options.longs === String ? "0" : 0;
                        object.content = "";
                    }
                    if (message.logLevel != null && message.hasOwnProperty("logLevel"))
                        object.logLevel = options.enums === String ? $root.xyz.redtorch.pb.LogLevelEnum[message.logLevel] : message.logLevel;
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        if (typeof message.timestamp === "number")
                            object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                        else
                            object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
                    if (message.content != null && message.hasOwnProperty("content"))
                        object.content = message.content;
                    return object;
                };

                /**
                 * Converts this LogField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.LogField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LogField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return LogField;
            })();

            pb.NoticeField = (function() {

                /**
                 * Properties of a NoticeField.
                 * @memberof xyz.redtorch.pb
                 * @interface INoticeField
                 * @property {xyz.redtorch.pb.CommonStatusEnum|null} [status] NoticeField status
                 * @property {number|Long|null} [timestamp] NoticeField timestamp
                 * @property {string|null} [content] NoticeField content
                 */

                /**
                 * Constructs a new NoticeField.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a NoticeField.
                 * @implements INoticeField
                 * @constructor
                 * @param {xyz.redtorch.pb.INoticeField=} [properties] Properties to set
                 */
                function NoticeField(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NoticeField status.
                 * @member {xyz.redtorch.pb.CommonStatusEnum} status
                 * @memberof xyz.redtorch.pb.NoticeField
                 * @instance
                 */
                NoticeField.prototype.status = 0;

                /**
                 * NoticeField timestamp.
                 * @member {number|Long} timestamp
                 * @memberof xyz.redtorch.pb.NoticeField
                 * @instance
                 */
                NoticeField.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * NoticeField content.
                 * @member {string} content
                 * @memberof xyz.redtorch.pb.NoticeField
                 * @instance
                 */
                NoticeField.prototype.content = "";

                /**
                 * Creates a new NoticeField instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.NoticeField
                 * @static
                 * @param {xyz.redtorch.pb.INoticeField=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.NoticeField} NoticeField instance
                 */
                NoticeField.create = function create(properties) {
                    return new NoticeField(properties);
                };

                /**
                 * Encodes the specified NoticeField message. Does not implicitly {@link xyz.redtorch.pb.NoticeField.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.NoticeField
                 * @static
                 * @param {xyz.redtorch.pb.INoticeField} message NoticeField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NoticeField.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.status != null && message.hasOwnProperty("status"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.timestamp);
                    if (message.content != null && message.hasOwnProperty("content"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);
                    return writer;
                };

                /**
                 * Encodes the specified NoticeField message, length delimited. Does not implicitly {@link xyz.redtorch.pb.NoticeField.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.NoticeField
                 * @static
                 * @param {xyz.redtorch.pb.INoticeField} message NoticeField message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NoticeField.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NoticeField message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.NoticeField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.NoticeField} NoticeField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NoticeField.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.NoticeField();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.status = reader.int32();
                            break;
                        case 2:
                            message.timestamp = reader.fixed64();
                            break;
                        case 3:
                            message.content = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a NoticeField message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.NoticeField
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.NoticeField} NoticeField
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NoticeField.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NoticeField message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.NoticeField
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NoticeField.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.status != null && message.hasOwnProperty("status"))
                        switch (message.status) {
                        default:
                            return "status: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                            return "timestamp: integer|Long expected";
                    if (message.content != null && message.hasOwnProperty("content"))
                        if (!$util.isString(message.content))
                            return "content: string expected";
                    return null;
                };

                /**
                 * Creates a NoticeField message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.NoticeField
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.NoticeField} NoticeField
                 */
                NoticeField.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.NoticeField)
                        return object;
                    var message = new $root.xyz.redtorch.pb.NoticeField();
                    switch (object.status) {
                    case "SUCCESS":
                    case 0:
                        message.status = 0;
                        break;
                    case "INFO":
                    case 1:
                        message.status = 1;
                        break;
                    case "WARN":
                    case 2:
                        message.status = 2;
                        break;
                    case "ERROR":
                    case 3:
                        message.status = 3;
                        break;
                    }
                    if (object.timestamp != null)
                        if ($util.Long)
                            (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                        else if (typeof object.timestamp === "string")
                            message.timestamp = parseInt(object.timestamp, 10);
                        else if (typeof object.timestamp === "number")
                            message.timestamp = object.timestamp;
                        else if (typeof object.timestamp === "object")
                            message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
                    if (object.content != null)
                        message.content = String(object.content);
                    return message;
                };

                /**
                 * Creates a plain object from a NoticeField message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.NoticeField
                 * @static
                 * @param {xyz.redtorch.pb.NoticeField} message NoticeField
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NoticeField.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.status = options.enums === String ? "SUCCESS" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.timestamp = options.longs === String ? "0" : 0;
                        object.content = "";
                    }
                    if (message.status != null && message.hasOwnProperty("status"))
                        object.status = options.enums === String ? $root.xyz.redtorch.pb.CommonStatusEnum[message.status] : message.status;
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        if (typeof message.timestamp === "number")
                            object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                        else
                            object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
                    if (message.content != null && message.hasOwnProperty("content"))
                        object.content = message.content;
                    return object;
                };

                /**
                 * Converts this NoticeField to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.NoticeField
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NoticeField.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NoticeField;
            })();

            pb.RpcSubscribeReq = (function() {

                /**
                 * Properties of a RpcSubscribeReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcSubscribeReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcSubscribeReq commonReq
                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcSubscribeReq contract
                 * @property {string|null} [gatewayId] RpcSubscribeReq gatewayId
                 */

                /**
                 * Constructs a new RpcSubscribeReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcSubscribeReq.
                 * @implements IRpcSubscribeReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcSubscribeReq=} [properties] Properties to set
                 */
                function RpcSubscribeReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcSubscribeReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcSubscribeReq
                 * @instance
                 */
                RpcSubscribeReq.prototype.commonReq = null;

                /**
                 * RpcSubscribeReq contract.
                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract
                 * @memberof xyz.redtorch.pb.RpcSubscribeReq
                 * @instance
                 */
                RpcSubscribeReq.prototype.contract = null;

                /**
                 * RpcSubscribeReq gatewayId.
                 * @member {string} gatewayId
                 * @memberof xyz.redtorch.pb.RpcSubscribeReq
                 * @instance
                 */
                RpcSubscribeReq.prototype.gatewayId = "";

                /**
                 * Creates a new RpcSubscribeReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcSubscribeReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSubscribeReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcSubscribeReq} RpcSubscribeReq instance
                 */
                RpcSubscribeReq.create = function create(properties) {
                    return new RpcSubscribeReq(properties);
                };

                /**
                 * Encodes the specified RpcSubscribeReq message. Does not implicitly {@link xyz.redtorch.pb.RpcSubscribeReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcSubscribeReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSubscribeReq} message RpcSubscribeReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSubscribeReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.gatewayId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcSubscribeReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSubscribeReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSubscribeReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSubscribeReq} message RpcSubscribeReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSubscribeReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcSubscribeReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcSubscribeReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcSubscribeReq} RpcSubscribeReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSubscribeReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSubscribeReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.gatewayId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcSubscribeReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSubscribeReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcSubscribeReq} RpcSubscribeReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSubscribeReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcSubscribeReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcSubscribeReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcSubscribeReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);
                        if (error)
                            return "contract." + error;
                    }
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        if (!$util.isString(message.gatewayId))
                            return "gatewayId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcSubscribeReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcSubscribeReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcSubscribeReq} RpcSubscribeReq
                 */
                RpcSubscribeReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcSubscribeReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcSubscribeReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcSubscribeReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.contract != null) {
                        if (typeof object.contract !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcSubscribeReq.contract: object expected");
                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);
                    }
                    if (object.gatewayId != null)
                        message.gatewayId = String(object.gatewayId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcSubscribeReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcSubscribeReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcSubscribeReq} message RpcSubscribeReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcSubscribeReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.contract = null;
                        object.gatewayId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        object.gatewayId = message.gatewayId;
                    return object;
                };

                /**
                 * Converts this RpcSubscribeReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcSubscribeReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcSubscribeReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcSubscribeReq;
            })();

            pb.RpcSubscribeRsp = (function() {

                /**
                 * Properties of a RpcSubscribeRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcSubscribeRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcSubscribeRsp commonRsp
                 */

                /**
                 * Constructs a new RpcSubscribeRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcSubscribeRsp.
                 * @implements IRpcSubscribeRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcSubscribeRsp=} [properties] Properties to set
                 */
                function RpcSubscribeRsp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcSubscribeRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp
                 * @instance
                 */
                RpcSubscribeRsp.prototype.commonRsp = null;

                /**
                 * Creates a new RpcSubscribeRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSubscribeRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcSubscribeRsp} RpcSubscribeRsp instance
                 */
                RpcSubscribeRsp.create = function create(properties) {
                    return new RpcSubscribeRsp(properties);
                };

                /**
                 * Encodes the specified RpcSubscribeRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcSubscribeRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSubscribeRsp} message RpcSubscribeRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSubscribeRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcSubscribeRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSubscribeRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSubscribeRsp} message RpcSubscribeRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSubscribeRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcSubscribeRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcSubscribeRsp} RpcSubscribeRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSubscribeRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSubscribeRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcSubscribeRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcSubscribeRsp} RpcSubscribeRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSubscribeRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcSubscribeRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcSubscribeRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcSubscribeRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcSubscribeRsp} RpcSubscribeRsp
                 */
                RpcSubscribeRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcSubscribeRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcSubscribeRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcSubscribeRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcSubscribeRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcSubscribeRsp} message RpcSubscribeRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcSubscribeRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    return object;
                };

                /**
                 * Converts this RpcSubscribeRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcSubscribeRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcSubscribeRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcSubscribeRsp;
            })();

            pb.RpcUnsubscribeReq = (function() {

                /**
                 * Properties of a RpcUnsubscribeReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcUnsubscribeReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcUnsubscribeReq commonReq
                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcUnsubscribeReq contract
                 * @property {string|null} [gatewayId] RpcUnsubscribeReq gatewayId
                 */

                /**
                 * Constructs a new RpcUnsubscribeReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcUnsubscribeReq.
                 * @implements IRpcUnsubscribeReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcUnsubscribeReq=} [properties] Properties to set
                 */
                function RpcUnsubscribeReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcUnsubscribeReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq
                 * @instance
                 */
                RpcUnsubscribeReq.prototype.commonReq = null;

                /**
                 * RpcUnsubscribeReq contract.
                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq
                 * @instance
                 */
                RpcUnsubscribeReq.prototype.contract = null;

                /**
                 * RpcUnsubscribeReq gatewayId.
                 * @member {string} gatewayId
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq
                 * @instance
                 */
                RpcUnsubscribeReq.prototype.gatewayId = "";

                /**
                 * Creates a new RpcUnsubscribeReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcUnsubscribeReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcUnsubscribeReq} RpcUnsubscribeReq instance
                 */
                RpcUnsubscribeReq.create = function create(properties) {
                    return new RpcUnsubscribeReq(properties);
                };

                /**
                 * Encodes the specified RpcUnsubscribeReq message. Does not implicitly {@link xyz.redtorch.pb.RpcUnsubscribeReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcUnsubscribeReq} message RpcUnsubscribeReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcUnsubscribeReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.gatewayId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcUnsubscribeReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcUnsubscribeReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcUnsubscribeReq} message RpcUnsubscribeReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcUnsubscribeReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcUnsubscribeReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcUnsubscribeReq} RpcUnsubscribeReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcUnsubscribeReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcUnsubscribeReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.gatewayId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcUnsubscribeReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcUnsubscribeReq} RpcUnsubscribeReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcUnsubscribeReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcUnsubscribeReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcUnsubscribeReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);
                        if (error)
                            return "contract." + error;
                    }
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        if (!$util.isString(message.gatewayId))
                            return "gatewayId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcUnsubscribeReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcUnsubscribeReq} RpcUnsubscribeReq
                 */
                RpcUnsubscribeReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcUnsubscribeReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcUnsubscribeReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcUnsubscribeReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.contract != null) {
                        if (typeof object.contract !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcUnsubscribeReq.contract: object expected");
                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);
                    }
                    if (object.gatewayId != null)
                        message.gatewayId = String(object.gatewayId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcUnsubscribeReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcUnsubscribeReq} message RpcUnsubscribeReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcUnsubscribeReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.contract = null;
                        object.gatewayId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        object.gatewayId = message.gatewayId;
                    return object;
                };

                /**
                 * Converts this RpcUnsubscribeReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcUnsubscribeReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcUnsubscribeReq;
            })();

            pb.RpcUnsubscribeRsp = (function() {

                /**
                 * Properties of a RpcUnsubscribeRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcUnsubscribeRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcUnsubscribeRsp commonRsp
                 */

                /**
                 * Constructs a new RpcUnsubscribeRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcUnsubscribeRsp.
                 * @implements IRpcUnsubscribeRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcUnsubscribeRsp=} [properties] Properties to set
                 */
                function RpcUnsubscribeRsp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcUnsubscribeRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp
                 * @instance
                 */
                RpcUnsubscribeRsp.prototype.commonRsp = null;

                /**
                 * Creates a new RpcUnsubscribeRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcUnsubscribeRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcUnsubscribeRsp} RpcUnsubscribeRsp instance
                 */
                RpcUnsubscribeRsp.create = function create(properties) {
                    return new RpcUnsubscribeRsp(properties);
                };

                /**
                 * Encodes the specified RpcUnsubscribeRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcUnsubscribeRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcUnsubscribeRsp} message RpcUnsubscribeRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcUnsubscribeRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcUnsubscribeRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcUnsubscribeRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcUnsubscribeRsp} message RpcUnsubscribeRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcUnsubscribeRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcUnsubscribeRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcUnsubscribeRsp} RpcUnsubscribeRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcUnsubscribeRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcUnsubscribeRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcUnsubscribeRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcUnsubscribeRsp} RpcUnsubscribeRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcUnsubscribeRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcUnsubscribeRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcUnsubscribeRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcUnsubscribeRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcUnsubscribeRsp} RpcUnsubscribeRsp
                 */
                RpcUnsubscribeRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcUnsubscribeRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcUnsubscribeRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcUnsubscribeRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcUnsubscribeRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcUnsubscribeRsp} message RpcUnsubscribeRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcUnsubscribeRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    return object;
                };

                /**
                 * Converts this RpcUnsubscribeRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcUnsubscribeRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcUnsubscribeRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcUnsubscribeRsp;
            })();

            pb.RpcSubmitOrderReq = (function() {

                /**
                 * Properties of a RpcSubmitOrderReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcSubmitOrderReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcSubmitOrderReq commonReq
                 * @property {xyz.redtorch.pb.ISubmitOrderReqField|null} [submitOrderReq] RpcSubmitOrderReq submitOrderReq
                 */

                /**
                 * Constructs a new RpcSubmitOrderReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcSubmitOrderReq.
                 * @implements IRpcSubmitOrderReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcSubmitOrderReq=} [properties] Properties to set
                 */
                function RpcSubmitOrderReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcSubmitOrderReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq
                 * @instance
                 */
                RpcSubmitOrderReq.prototype.commonReq = null;

                /**
                 * RpcSubmitOrderReq submitOrderReq.
                 * @member {xyz.redtorch.pb.ISubmitOrderReqField|null|undefined} submitOrderReq
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq
                 * @instance
                 */
                RpcSubmitOrderReq.prototype.submitOrderReq = null;

                /**
                 * Creates a new RpcSubmitOrderReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSubmitOrderReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcSubmitOrderReq} RpcSubmitOrderReq instance
                 */
                RpcSubmitOrderReq.create = function create(properties) {
                    return new RpcSubmitOrderReq(properties);
                };

                /**
                 * Encodes the specified RpcSubmitOrderReq message. Does not implicitly {@link xyz.redtorch.pb.RpcSubmitOrderReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSubmitOrderReq} message RpcSubmitOrderReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSubmitOrderReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.submitOrderReq != null && message.hasOwnProperty("submitOrderReq"))
                        $root.xyz.redtorch.pb.SubmitOrderReqField.encode(message.submitOrderReq, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcSubmitOrderReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSubmitOrderReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSubmitOrderReq} message RpcSubmitOrderReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSubmitOrderReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcSubmitOrderReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcSubmitOrderReq} RpcSubmitOrderReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSubmitOrderReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSubmitOrderReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.submitOrderReq = $root.xyz.redtorch.pb.SubmitOrderReqField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcSubmitOrderReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcSubmitOrderReq} RpcSubmitOrderReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSubmitOrderReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcSubmitOrderReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcSubmitOrderReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.submitOrderReq != null && message.hasOwnProperty("submitOrderReq")) {
                        var error = $root.xyz.redtorch.pb.SubmitOrderReqField.verify(message.submitOrderReq);
                        if (error)
                            return "submitOrderReq." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcSubmitOrderReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcSubmitOrderReq} RpcSubmitOrderReq
                 */
                RpcSubmitOrderReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcSubmitOrderReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcSubmitOrderReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcSubmitOrderReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.submitOrderReq != null) {
                        if (typeof object.submitOrderReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcSubmitOrderReq.submitOrderReq: object expected");
                        message.submitOrderReq = $root.xyz.redtorch.pb.SubmitOrderReqField.fromObject(object.submitOrderReq);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcSubmitOrderReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcSubmitOrderReq} message RpcSubmitOrderReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcSubmitOrderReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.submitOrderReq = null;
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.submitOrderReq != null && message.hasOwnProperty("submitOrderReq"))
                        object.submitOrderReq = $root.xyz.redtorch.pb.SubmitOrderReqField.toObject(message.submitOrderReq, options);
                    return object;
                };

                /**
                 * Converts this RpcSubmitOrderReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcSubmitOrderReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcSubmitOrderReq;
            })();

            pb.RpcSubmitOrderRsp = (function() {

                /**
                 * Properties of a RpcSubmitOrderRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcSubmitOrderRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcSubmitOrderRsp commonRsp
                 * @property {string|null} [orderId] RpcSubmitOrderRsp orderId
                 */

                /**
                 * Constructs a new RpcSubmitOrderRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcSubmitOrderRsp.
                 * @implements IRpcSubmitOrderRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcSubmitOrderRsp=} [properties] Properties to set
                 */
                function RpcSubmitOrderRsp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcSubmitOrderRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp
                 * @instance
                 */
                RpcSubmitOrderRsp.prototype.commonRsp = null;

                /**
                 * RpcSubmitOrderRsp orderId.
                 * @member {string} orderId
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp
                 * @instance
                 */
                RpcSubmitOrderRsp.prototype.orderId = "";

                /**
                 * Creates a new RpcSubmitOrderRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSubmitOrderRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcSubmitOrderRsp} RpcSubmitOrderRsp instance
                 */
                RpcSubmitOrderRsp.create = function create(properties) {
                    return new RpcSubmitOrderRsp(properties);
                };

                /**
                 * Encodes the specified RpcSubmitOrderRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcSubmitOrderRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSubmitOrderRsp} message RpcSubmitOrderRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSubmitOrderRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcSubmitOrderRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSubmitOrderRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSubmitOrderRsp} message RpcSubmitOrderRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSubmitOrderRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcSubmitOrderRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcSubmitOrderRsp} RpcSubmitOrderRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSubmitOrderRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSubmitOrderRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.orderId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcSubmitOrderRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcSubmitOrderRsp} RpcSubmitOrderRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSubmitOrderRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcSubmitOrderRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcSubmitOrderRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        if (!$util.isString(message.orderId))
                            return "orderId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcSubmitOrderRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcSubmitOrderRsp} RpcSubmitOrderRsp
                 */
                RpcSubmitOrderRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcSubmitOrderRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcSubmitOrderRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcSubmitOrderRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.orderId != null)
                        message.orderId = String(object.orderId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcSubmitOrderRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcSubmitOrderRsp} message RpcSubmitOrderRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcSubmitOrderRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRsp = null;
                        object.orderId = "";
                    }
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        object.orderId = message.orderId;
                    return object;
                };

                /**
                 * Converts this RpcSubmitOrderRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcSubmitOrderRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcSubmitOrderRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcSubmitOrderRsp;
            })();

            pb.RpcCancelOrderReq = (function() {

                /**
                 * Properties of a RpcCancelOrderReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcCancelOrderReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcCancelOrderReq commonReq
                 * @property {xyz.redtorch.pb.ICancelOrderReqField|null} [cancelOrderReq] RpcCancelOrderReq cancelOrderReq
                 */

                /**
                 * Constructs a new RpcCancelOrderReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcCancelOrderReq.
                 * @implements IRpcCancelOrderReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcCancelOrderReq=} [properties] Properties to set
                 */
                function RpcCancelOrderReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcCancelOrderReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq
                 * @instance
                 */
                RpcCancelOrderReq.prototype.commonReq = null;

                /**
                 * RpcCancelOrderReq cancelOrderReq.
                 * @member {xyz.redtorch.pb.ICancelOrderReqField|null|undefined} cancelOrderReq
                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq
                 * @instance
                 */
                RpcCancelOrderReq.prototype.cancelOrderReq = null;

                /**
                 * Creates a new RpcCancelOrderReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcCancelOrderReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcCancelOrderReq} RpcCancelOrderReq instance
                 */
                RpcCancelOrderReq.create = function create(properties) {
                    return new RpcCancelOrderReq(properties);
                };

                /**
                 * Encodes the specified RpcCancelOrderReq message. Does not implicitly {@link xyz.redtorch.pb.RpcCancelOrderReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcCancelOrderReq} message RpcCancelOrderReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcCancelOrderReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.cancelOrderReq != null && message.hasOwnProperty("cancelOrderReq"))
                        $root.xyz.redtorch.pb.CancelOrderReqField.encode(message.cancelOrderReq, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcCancelOrderReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcCancelOrderReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcCancelOrderReq} message RpcCancelOrderReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcCancelOrderReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcCancelOrderReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcCancelOrderReq} RpcCancelOrderReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcCancelOrderReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcCancelOrderReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.cancelOrderReq = $root.xyz.redtorch.pb.CancelOrderReqField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcCancelOrderReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcCancelOrderReq} RpcCancelOrderReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcCancelOrderReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcCancelOrderReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcCancelOrderReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.cancelOrderReq != null && message.hasOwnProperty("cancelOrderReq")) {
                        var error = $root.xyz.redtorch.pb.CancelOrderReqField.verify(message.cancelOrderReq);
                        if (error)
                            return "cancelOrderReq." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcCancelOrderReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcCancelOrderReq} RpcCancelOrderReq
                 */
                RpcCancelOrderReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcCancelOrderReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcCancelOrderReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcCancelOrderReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.cancelOrderReq != null) {
                        if (typeof object.cancelOrderReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcCancelOrderReq.cancelOrderReq: object expected");
                        message.cancelOrderReq = $root.xyz.redtorch.pb.CancelOrderReqField.fromObject(object.cancelOrderReq);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcCancelOrderReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcCancelOrderReq} message RpcCancelOrderReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcCancelOrderReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.cancelOrderReq = null;
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.cancelOrderReq != null && message.hasOwnProperty("cancelOrderReq"))
                        object.cancelOrderReq = $root.xyz.redtorch.pb.CancelOrderReqField.toObject(message.cancelOrderReq, options);
                    return object;
                };

                /**
                 * Converts this RpcCancelOrderReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcCancelOrderReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcCancelOrderReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcCancelOrderReq;
            })();

            pb.RpcCancelOrderRsp = (function() {

                /**
                 * Properties of a RpcCancelOrderRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcCancelOrderRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcCancelOrderRsp commonRsp
                 */

                /**
                 * Constructs a new RpcCancelOrderRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcCancelOrderRsp.
                 * @implements IRpcCancelOrderRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcCancelOrderRsp=} [properties] Properties to set
                 */
                function RpcCancelOrderRsp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcCancelOrderRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp
                 * @instance
                 */
                RpcCancelOrderRsp.prototype.commonRsp = null;

                /**
                 * Creates a new RpcCancelOrderRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcCancelOrderRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcCancelOrderRsp} RpcCancelOrderRsp instance
                 */
                RpcCancelOrderRsp.create = function create(properties) {
                    return new RpcCancelOrderRsp(properties);
                };

                /**
                 * Encodes the specified RpcCancelOrderRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcCancelOrderRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcCancelOrderRsp} message RpcCancelOrderRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcCancelOrderRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcCancelOrderRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcCancelOrderRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcCancelOrderRsp} message RpcCancelOrderRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcCancelOrderRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcCancelOrderRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcCancelOrderRsp} RpcCancelOrderRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcCancelOrderRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcCancelOrderRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcCancelOrderRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcCancelOrderRsp} RpcCancelOrderRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcCancelOrderRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcCancelOrderRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcCancelOrderRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcCancelOrderRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcCancelOrderRsp} RpcCancelOrderRsp
                 */
                RpcCancelOrderRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcCancelOrderRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcCancelOrderRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcCancelOrderRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcCancelOrderRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcCancelOrderRsp} message RpcCancelOrderRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcCancelOrderRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    return object;
                };

                /**
                 * Converts this RpcCancelOrderRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcCancelOrderRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcCancelOrderRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcCancelOrderRsp;
            })();

            pb.RpcSearchContractReq = (function() {

                /**
                 * Properties of a RpcSearchContractReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcSearchContractReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcSearchContractReq commonReq
                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcSearchContractReq contract
                 */

                /**
                 * Constructs a new RpcSearchContractReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcSearchContractReq.
                 * @implements IRpcSearchContractReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcSearchContractReq=} [properties] Properties to set
                 */
                function RpcSearchContractReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcSearchContractReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcSearchContractReq
                 * @instance
                 */
                RpcSearchContractReq.prototype.commonReq = null;

                /**
                 * RpcSearchContractReq contract.
                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract
                 * @memberof xyz.redtorch.pb.RpcSearchContractReq
                 * @instance
                 */
                RpcSearchContractReq.prototype.contract = null;

                /**
                 * Creates a new RpcSearchContractReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcSearchContractReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSearchContractReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcSearchContractReq} RpcSearchContractReq instance
                 */
                RpcSearchContractReq.create = function create(properties) {
                    return new RpcSearchContractReq(properties);
                };

                /**
                 * Encodes the specified RpcSearchContractReq message. Does not implicitly {@link xyz.redtorch.pb.RpcSearchContractReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcSearchContractReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSearchContractReq} message RpcSearchContractReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSearchContractReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcSearchContractReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSearchContractReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSearchContractReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSearchContractReq} message RpcSearchContractReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSearchContractReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcSearchContractReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcSearchContractReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcSearchContractReq} RpcSearchContractReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSearchContractReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSearchContractReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcSearchContractReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSearchContractReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcSearchContractReq} RpcSearchContractReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSearchContractReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcSearchContractReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcSearchContractReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcSearchContractReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);
                        if (error)
                            return "contract." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcSearchContractReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcSearchContractReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcSearchContractReq} RpcSearchContractReq
                 */
                RpcSearchContractReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcSearchContractReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcSearchContractReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcSearchContractReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.contract != null) {
                        if (typeof object.contract !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcSearchContractReq.contract: object expected");
                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcSearchContractReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcSearchContractReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcSearchContractReq} message RpcSearchContractReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcSearchContractReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.contract = null;
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);
                    return object;
                };

                /**
                 * Converts this RpcSearchContractReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcSearchContractReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcSearchContractReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcSearchContractReq;
            })();

            pb.RpcSearchContractRsp = (function() {

                /**
                 * Properties of a RpcSearchContractRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcSearchContractRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcSearchContractRsp commonRsp
                 */

                /**
                 * Constructs a new RpcSearchContractRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcSearchContractRsp.
                 * @implements IRpcSearchContractRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcSearchContractRsp=} [properties] Properties to set
                 */
                function RpcSearchContractRsp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcSearchContractRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp
                 * @instance
                 */
                RpcSearchContractRsp.prototype.commonRsp = null;

                /**
                 * Creates a new RpcSearchContractRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSearchContractRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcSearchContractRsp} RpcSearchContractRsp instance
                 */
                RpcSearchContractRsp.create = function create(properties) {
                    return new RpcSearchContractRsp(properties);
                };

                /**
                 * Encodes the specified RpcSearchContractRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcSearchContractRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSearchContractRsp} message RpcSearchContractRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSearchContractRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcSearchContractRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSearchContractRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSearchContractRsp} message RpcSearchContractRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSearchContractRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcSearchContractRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcSearchContractRsp} RpcSearchContractRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSearchContractRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSearchContractRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcSearchContractRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcSearchContractRsp} RpcSearchContractRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSearchContractRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcSearchContractRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcSearchContractRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcSearchContractRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcSearchContractRsp} RpcSearchContractRsp
                 */
                RpcSearchContractRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcSearchContractRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcSearchContractRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcSearchContractRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcSearchContractRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcSearchContractRsp} message RpcSearchContractRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcSearchContractRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    return object;
                };

                /**
                 * Converts this RpcSearchContractRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcSearchContractRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcSearchContractRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcSearchContractRsp;
            })();

            pb.RpcGetOrderListReq = (function() {

                /**
                 * Properties of a RpcGetOrderListReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetOrderListReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetOrderListReq commonReq
                 */

                /**
                 * Constructs a new RpcGetOrderListReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetOrderListReq.
                 * @implements IRpcGetOrderListReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetOrderListReq=} [properties] Properties to set
                 */
                function RpcGetOrderListReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetOrderListReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq
                 * @instance
                 */
                RpcGetOrderListReq.prototype.commonReq = null;

                /**
                 * Creates a new RpcGetOrderListReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetOrderListReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetOrderListReq} RpcGetOrderListReq instance
                 */
                RpcGetOrderListReq.create = function create(properties) {
                    return new RpcGetOrderListReq(properties);
                };

                /**
                 * Encodes the specified RpcGetOrderListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetOrderListReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetOrderListReq} message RpcGetOrderListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetOrderListReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetOrderListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetOrderListReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetOrderListReq} message RpcGetOrderListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetOrderListReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetOrderListReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetOrderListReq} RpcGetOrderListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetOrderListReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetOrderListReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetOrderListReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetOrderListReq} RpcGetOrderListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetOrderListReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetOrderListReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetOrderListReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetOrderListReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetOrderListReq} RpcGetOrderListReq
                 */
                RpcGetOrderListReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetOrderListReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetOrderListReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetOrderListReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetOrderListReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetOrderListReq} message RpcGetOrderListReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetOrderListReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.commonReq = null;
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    return object;
                };

                /**
                 * Converts this RpcGetOrderListReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetOrderListReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetOrderListReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetOrderListReq;
            })();

            pb.RpcGetOrderListRsp = (function() {

                /**
                 * Properties of a RpcGetOrderListRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetOrderListRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetOrderListRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcGetOrderListRsp order
                 */

                /**
                 * Constructs a new RpcGetOrderListRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetOrderListRsp.
                 * @implements IRpcGetOrderListRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetOrderListRsp=} [properties] Properties to set
                 */
                function RpcGetOrderListRsp(properties) {
                    this.order = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetOrderListRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp
                 * @instance
                 */
                RpcGetOrderListRsp.prototype.commonRsp = null;

                /**
                 * RpcGetOrderListRsp order.
                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order
                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp
                 * @instance
                 */
                RpcGetOrderListRsp.prototype.order = $util.emptyArray;

                /**
                 * Creates a new RpcGetOrderListRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetOrderListRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetOrderListRsp} RpcGetOrderListRsp instance
                 */
                RpcGetOrderListRsp.create = function create(properties) {
                    return new RpcGetOrderListRsp(properties);
                };

                /**
                 * Encodes the specified RpcGetOrderListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetOrderListRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetOrderListRsp} message RpcGetOrderListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetOrderListRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.order != null && message.order.length)
                        for (var i = 0; i < message.order.length; ++i)
                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetOrderListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetOrderListRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetOrderListRsp} message RpcGetOrderListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetOrderListRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetOrderListRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetOrderListRsp} RpcGetOrderListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetOrderListRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetOrderListRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.order && message.order.length))
                                message.order = [];
                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetOrderListRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetOrderListRsp} RpcGetOrderListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetOrderListRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetOrderListRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetOrderListRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.order != null && message.hasOwnProperty("order")) {
                        if (!Array.isArray(message.order))
                            return "order: array expected";
                        for (var i = 0; i < message.order.length; ++i) {
                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);
                            if (error)
                                return "order." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetOrderListRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetOrderListRsp} RpcGetOrderListRsp
                 */
                RpcGetOrderListRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetOrderListRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetOrderListRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetOrderListRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.order) {
                        if (!Array.isArray(object.order))
                            throw TypeError(".xyz.redtorch.pb.RpcGetOrderListRsp.order: array expected");
                        message.order = [];
                        for (var i = 0; i < object.order.length; ++i) {
                            if (typeof object.order[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcGetOrderListRsp.order: object expected");
                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetOrderListRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetOrderListRsp} message RpcGetOrderListRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetOrderListRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.order = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.order && message.order.length) {
                        object.order = [];
                        for (var j = 0; j < message.order.length; ++j)
                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcGetOrderListRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetOrderListRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetOrderListRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetOrderListRsp;
            })();

            pb.RpcGetWorkingOrderListReq = (function() {

                /**
                 * Properties of a RpcGetWorkingOrderListReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetWorkingOrderListReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetWorkingOrderListReq commonReq
                 */

                /**
                 * Constructs a new RpcGetWorkingOrderListReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetWorkingOrderListReq.
                 * @implements IRpcGetWorkingOrderListReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListReq=} [properties] Properties to set
                 */
                function RpcGetWorkingOrderListReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetWorkingOrderListReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq
                 * @instance
                 */
                RpcGetWorkingOrderListReq.prototype.commonReq = null;

                /**
                 * Creates a new RpcGetWorkingOrderListReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListReq} RpcGetWorkingOrderListReq instance
                 */
                RpcGetWorkingOrderListReq.create = function create(properties) {
                    return new RpcGetWorkingOrderListReq(properties);
                };

                /**
                 * Encodes the specified RpcGetWorkingOrderListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetWorkingOrderListReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListReq} message RpcGetWorkingOrderListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetWorkingOrderListReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetWorkingOrderListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetWorkingOrderListReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListReq} message RpcGetWorkingOrderListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetWorkingOrderListReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetWorkingOrderListReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListReq} RpcGetWorkingOrderListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetWorkingOrderListReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetWorkingOrderListReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetWorkingOrderListReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListReq} RpcGetWorkingOrderListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetWorkingOrderListReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetWorkingOrderListReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetWorkingOrderListReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetWorkingOrderListReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListReq} RpcGetWorkingOrderListReq
                 */
                RpcGetWorkingOrderListReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetWorkingOrderListReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetWorkingOrderListReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetWorkingOrderListReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetWorkingOrderListReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetWorkingOrderListReq} message RpcGetWorkingOrderListReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetWorkingOrderListReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.commonReq = null;
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    return object;
                };

                /**
                 * Converts this RpcGetWorkingOrderListReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetWorkingOrderListReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetWorkingOrderListReq;
            })();

            pb.RpcGetWorkingOrderListRsp = (function() {

                /**
                 * Properties of a RpcGetWorkingOrderListRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetWorkingOrderListRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetWorkingOrderListRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcGetWorkingOrderListRsp order
                 */

                /**
                 * Constructs a new RpcGetWorkingOrderListRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetWorkingOrderListRsp.
                 * @implements IRpcGetWorkingOrderListRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListRsp=} [properties] Properties to set
                 */
                function RpcGetWorkingOrderListRsp(properties) {
                    this.order = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetWorkingOrderListRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp
                 * @instance
                 */
                RpcGetWorkingOrderListRsp.prototype.commonRsp = null;

                /**
                 * RpcGetWorkingOrderListRsp order.
                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp
                 * @instance
                 */
                RpcGetWorkingOrderListRsp.prototype.order = $util.emptyArray;

                /**
                 * Creates a new RpcGetWorkingOrderListRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} RpcGetWorkingOrderListRsp instance
                 */
                RpcGetWorkingOrderListRsp.create = function create(properties) {
                    return new RpcGetWorkingOrderListRsp(properties);
                };

                /**
                 * Encodes the specified RpcGetWorkingOrderListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetWorkingOrderListRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListRsp} message RpcGetWorkingOrderListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetWorkingOrderListRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.order != null && message.order.length)
                        for (var i = 0; i < message.order.length; ++i)
                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetWorkingOrderListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetWorkingOrderListRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetWorkingOrderListRsp} message RpcGetWorkingOrderListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetWorkingOrderListRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetWorkingOrderListRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} RpcGetWorkingOrderListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetWorkingOrderListRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetWorkingOrderListRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.order && message.order.length))
                                message.order = [];
                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetWorkingOrderListRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} RpcGetWorkingOrderListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetWorkingOrderListRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetWorkingOrderListRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetWorkingOrderListRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.order != null && message.hasOwnProperty("order")) {
                        if (!Array.isArray(message.order))
                            return "order: array expected";
                        for (var i = 0; i < message.order.length; ++i) {
                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);
                            if (error)
                                return "order." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetWorkingOrderListRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} RpcGetWorkingOrderListRsp
                 */
                RpcGetWorkingOrderListRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetWorkingOrderListRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetWorkingOrderListRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetWorkingOrderListRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.order) {
                        if (!Array.isArray(object.order))
                            throw TypeError(".xyz.redtorch.pb.RpcGetWorkingOrderListRsp.order: array expected");
                        message.order = [];
                        for (var i = 0; i < object.order.length; ++i) {
                            if (typeof object.order[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcGetWorkingOrderListRsp.order: object expected");
                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetWorkingOrderListRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetWorkingOrderListRsp} message RpcGetWorkingOrderListRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetWorkingOrderListRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.order = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.order && message.order.length) {
                        object.order = [];
                        for (var j = 0; j < message.order.length; ++j)
                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcGetWorkingOrderListRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetWorkingOrderListRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetWorkingOrderListRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetWorkingOrderListRsp;
            })();

            pb.RpcQueryOrderByOrderIdReq = (function() {

                /**
                 * Properties of a RpcQueryOrderByOrderIdReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryOrderByOrderIdReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryOrderByOrderIdReq commonReq
                 * @property {string|null} [orderId] RpcQueryOrderByOrderIdReq orderId
                 */

                /**
                 * Constructs a new RpcQueryOrderByOrderIdReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryOrderByOrderIdReq.
                 * @implements IRpcQueryOrderByOrderIdReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdReq=} [properties] Properties to set
                 */
                function RpcQueryOrderByOrderIdReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryOrderByOrderIdReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq
                 * @instance
                 */
                RpcQueryOrderByOrderIdReq.prototype.commonReq = null;

                /**
                 * RpcQueryOrderByOrderIdReq orderId.
                 * @member {string} orderId
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq
                 * @instance
                 */
                RpcQueryOrderByOrderIdReq.prototype.orderId = "";

                /**
                 * Creates a new RpcQueryOrderByOrderIdReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} RpcQueryOrderByOrderIdReq instance
                 */
                RpcQueryOrderByOrderIdReq.create = function create(properties) {
                    return new RpcQueryOrderByOrderIdReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryOrderByOrderIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOrderIdReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdReq} message RpcQueryOrderByOrderIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderByOrderIdReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryOrderByOrderIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOrderIdReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdReq} message RpcQueryOrderByOrderIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderByOrderIdReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryOrderByOrderIdReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} RpcQueryOrderByOrderIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderByOrderIdReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.orderId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryOrderByOrderIdReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} RpcQueryOrderByOrderIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderByOrderIdReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryOrderByOrderIdReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryOrderByOrderIdReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        if (!$util.isString(message.orderId))
                            return "orderId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryOrderByOrderIdReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} RpcQueryOrderByOrderIdReq
                 */
                RpcQueryOrderByOrderIdReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryOrderByOrderIdReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.orderId != null)
                        message.orderId = String(object.orderId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryOrderByOrderIdReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryOrderByOrderIdReq} message RpcQueryOrderByOrderIdReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryOrderByOrderIdReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.orderId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        object.orderId = message.orderId;
                    return object;
                };

                /**
                 * Converts this RpcQueryOrderByOrderIdReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryOrderByOrderIdReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryOrderByOrderIdReq;
            })();

            pb.RpcQueryOrderByOrderIdRsp = (function() {

                /**
                 * Properties of a RpcQueryOrderByOrderIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryOrderByOrderIdRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryOrderByOrderIdRsp commonRsp
                 * @property {xyz.redtorch.pb.IOrderField|null} [order] RpcQueryOrderByOrderIdRsp order
                 */

                /**
                 * Constructs a new RpcQueryOrderByOrderIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryOrderByOrderIdRsp.
                 * @implements IRpcQueryOrderByOrderIdRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdRsp=} [properties] Properties to set
                 */
                function RpcQueryOrderByOrderIdRsp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryOrderByOrderIdRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp
                 * @instance
                 */
                RpcQueryOrderByOrderIdRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryOrderByOrderIdRsp order.
                 * @member {xyz.redtorch.pb.IOrderField|null|undefined} order
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp
                 * @instance
                 */
                RpcQueryOrderByOrderIdRsp.prototype.order = null;

                /**
                 * Creates a new RpcQueryOrderByOrderIdRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} RpcQueryOrderByOrderIdRsp instance
                 */
                RpcQueryOrderByOrderIdRsp.create = function create(properties) {
                    return new RpcQueryOrderByOrderIdRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryOrderByOrderIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdRsp} message RpcQueryOrderByOrderIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderByOrderIdRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.order != null && message.hasOwnProperty("order"))
                        $root.xyz.redtorch.pb.OrderField.encode(message.order, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryOrderByOrderIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOrderIdRsp} message RpcQueryOrderByOrderIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderByOrderIdRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryOrderByOrderIdRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} RpcQueryOrderByOrderIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderByOrderIdRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.order = $root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryOrderByOrderIdRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} RpcQueryOrderByOrderIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderByOrderIdRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryOrderByOrderIdRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryOrderByOrderIdRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.order != null && message.hasOwnProperty("order")) {
                        var error = $root.xyz.redtorch.pb.OrderField.verify(message.order);
                        if (error)
                            return "order." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryOrderByOrderIdRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} RpcQueryOrderByOrderIdRsp
                 */
                RpcQueryOrderByOrderIdRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.order != null) {
                        if (typeof object.order !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp.order: object expected");
                        message.order = $root.xyz.redtorch.pb.OrderField.fromObject(object.order);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryOrderByOrderIdRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp} message RpcQueryOrderByOrderIdRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryOrderByOrderIdRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRsp = null;
                        object.order = null;
                    }
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.order != null && message.hasOwnProperty("order"))
                        object.order = $root.xyz.redtorch.pb.OrderField.toObject(message.order, options);
                    return object;
                };

                /**
                 * Converts this RpcQueryOrderByOrderIdRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOrderIdRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryOrderByOrderIdRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryOrderByOrderIdRsp;
            })();

            pb.RpcQueryOrderByOriginOrderIdReq = (function() {

                /**
                 * Properties of a RpcQueryOrderByOriginOrderIdReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryOrderByOriginOrderIdReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryOrderByOriginOrderIdReq commonReq
                 * @property {string|null} [originOrderId] RpcQueryOrderByOriginOrderIdReq originOrderId
                 */

                /**
                 * Constructs a new RpcQueryOrderByOriginOrderIdReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryOrderByOriginOrderIdReq.
                 * @implements IRpcQueryOrderByOriginOrderIdReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdReq=} [properties] Properties to set
                 */
                function RpcQueryOrderByOriginOrderIdReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryOrderByOriginOrderIdReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq
                 * @instance
                 */
                RpcQueryOrderByOriginOrderIdReq.prototype.commonReq = null;

                /**
                 * RpcQueryOrderByOriginOrderIdReq originOrderId.
                 * @member {string} originOrderId
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq
                 * @instance
                 */
                RpcQueryOrderByOriginOrderIdReq.prototype.originOrderId = "";

                /**
                 * Creates a new RpcQueryOrderByOriginOrderIdReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} RpcQueryOrderByOriginOrderIdReq instance
                 */
                RpcQueryOrderByOriginOrderIdReq.create = function create(properties) {
                    return new RpcQueryOrderByOriginOrderIdReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryOrderByOriginOrderIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdReq} message RpcQueryOrderByOriginOrderIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderByOriginOrderIdReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.originOrderId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryOrderByOriginOrderIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdReq} message RpcQueryOrderByOriginOrderIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderByOriginOrderIdReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryOrderByOriginOrderIdReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} RpcQueryOrderByOriginOrderIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderByOriginOrderIdReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.originOrderId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryOrderByOriginOrderIdReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} RpcQueryOrderByOriginOrderIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderByOriginOrderIdReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryOrderByOriginOrderIdReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryOrderByOriginOrderIdReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        if (!$util.isString(message.originOrderId))
                            return "originOrderId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryOrderByOriginOrderIdReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} RpcQueryOrderByOriginOrderIdReq
                 */
                RpcQueryOrderByOriginOrderIdReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.originOrderId != null)
                        message.originOrderId = String(object.originOrderId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryOrderByOriginOrderIdReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq} message RpcQueryOrderByOriginOrderIdReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryOrderByOriginOrderIdReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.originOrderId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        object.originOrderId = message.originOrderId;
                    return object;
                };

                /**
                 * Converts this RpcQueryOrderByOriginOrderIdReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryOrderByOriginOrderIdReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryOrderByOriginOrderIdReq;
            })();

            pb.RpcQueryOrderByOriginOrderIdRsp = (function() {

                /**
                 * Properties of a RpcQueryOrderByOriginOrderIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryOrderByOriginOrderIdRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryOrderByOriginOrderIdRsp commonRsp
                 * @property {xyz.redtorch.pb.IOrderField|null} [order] RpcQueryOrderByOriginOrderIdRsp order
                 */

                /**
                 * Constructs a new RpcQueryOrderByOriginOrderIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryOrderByOriginOrderIdRsp.
                 * @implements IRpcQueryOrderByOriginOrderIdRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdRsp=} [properties] Properties to set
                 */
                function RpcQueryOrderByOriginOrderIdRsp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryOrderByOriginOrderIdRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp
                 * @instance
                 */
                RpcQueryOrderByOriginOrderIdRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryOrderByOriginOrderIdRsp order.
                 * @member {xyz.redtorch.pb.IOrderField|null|undefined} order
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp
                 * @instance
                 */
                RpcQueryOrderByOriginOrderIdRsp.prototype.order = null;

                /**
                 * Creates a new RpcQueryOrderByOriginOrderIdRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} RpcQueryOrderByOriginOrderIdRsp instance
                 */
                RpcQueryOrderByOriginOrderIdRsp.create = function create(properties) {
                    return new RpcQueryOrderByOriginOrderIdRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryOrderByOriginOrderIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdRsp} message RpcQueryOrderByOriginOrderIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderByOriginOrderIdRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.order != null && message.hasOwnProperty("order"))
                        $root.xyz.redtorch.pb.OrderField.encode(message.order, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryOrderByOriginOrderIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderByOriginOrderIdRsp} message RpcQueryOrderByOriginOrderIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderByOriginOrderIdRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryOrderByOriginOrderIdRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} RpcQueryOrderByOriginOrderIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderByOriginOrderIdRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.order = $root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryOrderByOriginOrderIdRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} RpcQueryOrderByOriginOrderIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderByOriginOrderIdRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryOrderByOriginOrderIdRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryOrderByOriginOrderIdRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.order != null && message.hasOwnProperty("order")) {
                        var error = $root.xyz.redtorch.pb.OrderField.verify(message.order);
                        if (error)
                            return "order." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryOrderByOriginOrderIdRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} RpcQueryOrderByOriginOrderIdRsp
                 */
                RpcQueryOrderByOriginOrderIdRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.order != null) {
                        if (typeof object.order !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp.order: object expected");
                        message.order = $root.xyz.redtorch.pb.OrderField.fromObject(object.order);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryOrderByOriginOrderIdRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp} message RpcQueryOrderByOriginOrderIdRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryOrderByOriginOrderIdRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRsp = null;
                        object.order = null;
                    }
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.order != null && message.hasOwnProperty("order"))
                        object.order = $root.xyz.redtorch.pb.OrderField.toObject(message.order, options);
                    return object;
                };

                /**
                 * Converts this RpcQueryOrderByOriginOrderIdRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryOrderByOriginOrderIdRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryOrderByOriginOrderIdRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryOrderByOriginOrderIdRsp;
            })();

            pb.RpcQueryOrderListByAccountIdReq = (function() {

                /**
                 * Properties of a RpcQueryOrderListByAccountIdReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryOrderListByAccountIdReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryOrderListByAccountIdReq commonReq
                 * @property {string|null} [accountId] RpcQueryOrderListByAccountIdReq accountId
                 */

                /**
                 * Constructs a new RpcQueryOrderListByAccountIdReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryOrderListByAccountIdReq.
                 * @implements IRpcQueryOrderListByAccountIdReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdReq=} [properties] Properties to set
                 */
                function RpcQueryOrderListByAccountIdReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryOrderListByAccountIdReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq
                 * @instance
                 */
                RpcQueryOrderListByAccountIdReq.prototype.commonReq = null;

                /**
                 * RpcQueryOrderListByAccountIdReq accountId.
                 * @member {string} accountId
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq
                 * @instance
                 */
                RpcQueryOrderListByAccountIdReq.prototype.accountId = "";

                /**
                 * Creates a new RpcQueryOrderListByAccountIdReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} RpcQueryOrderListByAccountIdReq instance
                 */
                RpcQueryOrderListByAccountIdReq.create = function create(properties) {
                    return new RpcQueryOrderListByAccountIdReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryOrderListByAccountIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdReq} message RpcQueryOrderListByAccountIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderListByAccountIdReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryOrderListByAccountIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdReq} message RpcQueryOrderListByAccountIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderListByAccountIdReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryOrderListByAccountIdReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} RpcQueryOrderListByAccountIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderListByAccountIdReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.accountId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryOrderListByAccountIdReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} RpcQueryOrderListByAccountIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderListByAccountIdReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryOrderListByAccountIdReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryOrderListByAccountIdReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        if (!$util.isString(message.accountId))
                            return "accountId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryOrderListByAccountIdReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} RpcQueryOrderListByAccountIdReq
                 */
                RpcQueryOrderListByAccountIdReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.accountId != null)
                        message.accountId = String(object.accountId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryOrderListByAccountIdReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq} message RpcQueryOrderListByAccountIdReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryOrderListByAccountIdReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.accountId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        object.accountId = message.accountId;
                    return object;
                };

                /**
                 * Converts this RpcQueryOrderListByAccountIdReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryOrderListByAccountIdReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryOrderListByAccountIdReq;
            })();

            pb.RpcQueryOrderListByAccountIdRsp = (function() {

                /**
                 * Properties of a RpcQueryOrderListByAccountIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryOrderListByAccountIdRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryOrderListByAccountIdRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcQueryOrderListByAccountIdRsp order
                 */

                /**
                 * Constructs a new RpcQueryOrderListByAccountIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryOrderListByAccountIdRsp.
                 * @implements IRpcQueryOrderListByAccountIdRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdRsp=} [properties] Properties to set
                 */
                function RpcQueryOrderListByAccountIdRsp(properties) {
                    this.order = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryOrderListByAccountIdRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp
                 * @instance
                 */
                RpcQueryOrderListByAccountIdRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryOrderListByAccountIdRsp order.
                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp
                 * @instance
                 */
                RpcQueryOrderListByAccountIdRsp.prototype.order = $util.emptyArray;

                /**
                 * Creates a new RpcQueryOrderListByAccountIdRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} RpcQueryOrderListByAccountIdRsp instance
                 */
                RpcQueryOrderListByAccountIdRsp.create = function create(properties) {
                    return new RpcQueryOrderListByAccountIdRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryOrderListByAccountIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdRsp} message RpcQueryOrderListByAccountIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderListByAccountIdRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.order != null && message.order.length)
                        for (var i = 0; i < message.order.length; ++i)
                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryOrderListByAccountIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByAccountIdRsp} message RpcQueryOrderListByAccountIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderListByAccountIdRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryOrderListByAccountIdRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} RpcQueryOrderListByAccountIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderListByAccountIdRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.order && message.order.length))
                                message.order = [];
                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryOrderListByAccountIdRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} RpcQueryOrderListByAccountIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderListByAccountIdRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryOrderListByAccountIdRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryOrderListByAccountIdRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.order != null && message.hasOwnProperty("order")) {
                        if (!Array.isArray(message.order))
                            return "order: array expected";
                        for (var i = 0; i < message.order.length; ++i) {
                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);
                            if (error)
                                return "order." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryOrderListByAccountIdRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} RpcQueryOrderListByAccountIdRsp
                 */
                RpcQueryOrderListByAccountIdRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.order) {
                        if (!Array.isArray(object.order))
                            throw TypeError(".xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.order: array expected");
                        message.order = [];
                        for (var i = 0; i < object.order.length; ++i) {
                            if (typeof object.order[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp.order: object expected");
                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryOrderListByAccountIdRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp} message RpcQueryOrderListByAccountIdRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryOrderListByAccountIdRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.order = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.order && message.order.length) {
                        object.order = [];
                        for (var j = 0; j < message.order.length; ++j)
                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcQueryOrderListByAccountIdRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByAccountIdRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryOrderListByAccountIdRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryOrderListByAccountIdRsp;
            })();

            pb.RpcQueryOrderListByUnifiedSymbolReq = (function() {

                /**
                 * Properties of a RpcQueryOrderListByUnifiedSymbolReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryOrderListByUnifiedSymbolReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryOrderListByUnifiedSymbolReq commonReq
                 * @property {string|null} [unifiedSymbol] RpcQueryOrderListByUnifiedSymbolReq unifiedSymbol
                 */

                /**
                 * Constructs a new RpcQueryOrderListByUnifiedSymbolReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryOrderListByUnifiedSymbolReq.
                 * @implements IRpcQueryOrderListByUnifiedSymbolReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolReq=} [properties] Properties to set
                 */
                function RpcQueryOrderListByUnifiedSymbolReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryOrderListByUnifiedSymbolReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq
                 * @instance
                 */
                RpcQueryOrderListByUnifiedSymbolReq.prototype.commonReq = null;

                /**
                 * RpcQueryOrderListByUnifiedSymbolReq unifiedSymbol.
                 * @member {string} unifiedSymbol
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq
                 * @instance
                 */
                RpcQueryOrderListByUnifiedSymbolReq.prototype.unifiedSymbol = "";

                /**
                 * Creates a new RpcQueryOrderListByUnifiedSymbolReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq} RpcQueryOrderListByUnifiedSymbolReq instance
                 */
                RpcQueryOrderListByUnifiedSymbolReq.create = function create(properties) {
                    return new RpcQueryOrderListByUnifiedSymbolReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryOrderListByUnifiedSymbolReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolReq} message RpcQueryOrderListByUnifiedSymbolReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderListByUnifiedSymbolReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.unifiedSymbol);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryOrderListByUnifiedSymbolReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolReq} message RpcQueryOrderListByUnifiedSymbolReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderListByUnifiedSymbolReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryOrderListByUnifiedSymbolReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq} RpcQueryOrderListByUnifiedSymbolReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderListByUnifiedSymbolReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.unifiedSymbol = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryOrderListByUnifiedSymbolReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq} RpcQueryOrderListByUnifiedSymbolReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderListByUnifiedSymbolReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryOrderListByUnifiedSymbolReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryOrderListByUnifiedSymbolReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        if (!$util.isString(message.unifiedSymbol))
                            return "unifiedSymbol: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryOrderListByUnifiedSymbolReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq} RpcQueryOrderListByUnifiedSymbolReq
                 */
                RpcQueryOrderListByUnifiedSymbolReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.unifiedSymbol != null)
                        message.unifiedSymbol = String(object.unifiedSymbol);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryOrderListByUnifiedSymbolReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq} message RpcQueryOrderListByUnifiedSymbolReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryOrderListByUnifiedSymbolReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.unifiedSymbol = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        object.unifiedSymbol = message.unifiedSymbol;
                    return object;
                };

                /**
                 * Converts this RpcQueryOrderListByUnifiedSymbolReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryOrderListByUnifiedSymbolReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryOrderListByUnifiedSymbolReq;
            })();

            pb.RpcQueryOrderListByUnifiedSymbolRsp = (function() {

                /**
                 * Properties of a RpcQueryOrderListByUnifiedSymbolRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryOrderListByUnifiedSymbolRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryOrderListByUnifiedSymbolRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcQueryOrderListByUnifiedSymbolRsp order
                 */

                /**
                 * Constructs a new RpcQueryOrderListByUnifiedSymbolRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryOrderListByUnifiedSymbolRsp.
                 * @implements IRpcQueryOrderListByUnifiedSymbolRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolRsp=} [properties] Properties to set
                 */
                function RpcQueryOrderListByUnifiedSymbolRsp(properties) {
                    this.order = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryOrderListByUnifiedSymbolRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp
                 * @instance
                 */
                RpcQueryOrderListByUnifiedSymbolRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryOrderListByUnifiedSymbolRsp order.
                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp
                 * @instance
                 */
                RpcQueryOrderListByUnifiedSymbolRsp.prototype.order = $util.emptyArray;

                /**
                 * Creates a new RpcQueryOrderListByUnifiedSymbolRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp} RpcQueryOrderListByUnifiedSymbolRsp instance
                 */
                RpcQueryOrderListByUnifiedSymbolRsp.create = function create(properties) {
                    return new RpcQueryOrderListByUnifiedSymbolRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryOrderListByUnifiedSymbolRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolRsp} message RpcQueryOrderListByUnifiedSymbolRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderListByUnifiedSymbolRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.order != null && message.order.length)
                        for (var i = 0; i < message.order.length; ++i)
                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryOrderListByUnifiedSymbolRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryOrderListByUnifiedSymbolRsp} message RpcQueryOrderListByUnifiedSymbolRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryOrderListByUnifiedSymbolRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryOrderListByUnifiedSymbolRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp} RpcQueryOrderListByUnifiedSymbolRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderListByUnifiedSymbolRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.order && message.order.length))
                                message.order = [];
                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryOrderListByUnifiedSymbolRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp} RpcQueryOrderListByUnifiedSymbolRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryOrderListByUnifiedSymbolRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryOrderListByUnifiedSymbolRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryOrderListByUnifiedSymbolRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.order != null && message.hasOwnProperty("order")) {
                        if (!Array.isArray(message.order))
                            return "order: array expected";
                        for (var i = 0; i < message.order.length; ++i) {
                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);
                            if (error)
                                return "order." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryOrderListByUnifiedSymbolRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp} RpcQueryOrderListByUnifiedSymbolRsp
                 */
                RpcQueryOrderListByUnifiedSymbolRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.order) {
                        if (!Array.isArray(object.order))
                            throw TypeError(".xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp.order: array expected");
                        message.order = [];
                        for (var i = 0; i < object.order.length; ++i) {
                            if (typeof object.order[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp.order: object expected");
                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryOrderListByUnifiedSymbolRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp} message RpcQueryOrderListByUnifiedSymbolRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryOrderListByUnifiedSymbolRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.order = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.order && message.order.length) {
                        object.order = [];
                        for (var j = 0; j < message.order.length; ++j)
                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcQueryOrderListByUnifiedSymbolRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryOrderListByUnifiedSymbolRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryOrderListByUnifiedSymbolRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryOrderListByUnifiedSymbolRsp;
            })();

            pb.RpcGetTradeListReq = (function() {

                /**
                 * Properties of a RpcGetTradeListReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetTradeListReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetTradeListReq commonReq
                 */

                /**
                 * Constructs a new RpcGetTradeListReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetTradeListReq.
                 * @implements IRpcGetTradeListReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetTradeListReq=} [properties] Properties to set
                 */
                function RpcGetTradeListReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetTradeListReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq
                 * @instance
                 */
                RpcGetTradeListReq.prototype.commonReq = null;

                /**
                 * Creates a new RpcGetTradeListReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetTradeListReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetTradeListReq} RpcGetTradeListReq instance
                 */
                RpcGetTradeListReq.create = function create(properties) {
                    return new RpcGetTradeListReq(properties);
                };

                /**
                 * Encodes the specified RpcGetTradeListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetTradeListReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetTradeListReq} message RpcGetTradeListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetTradeListReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetTradeListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetTradeListReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetTradeListReq} message RpcGetTradeListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetTradeListReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetTradeListReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetTradeListReq} RpcGetTradeListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetTradeListReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetTradeListReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetTradeListReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetTradeListReq} RpcGetTradeListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetTradeListReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetTradeListReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetTradeListReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetTradeListReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetTradeListReq} RpcGetTradeListReq
                 */
                RpcGetTradeListReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetTradeListReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetTradeListReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetTradeListReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetTradeListReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetTradeListReq} message RpcGetTradeListReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetTradeListReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.commonReq = null;
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    return object;
                };

                /**
                 * Converts this RpcGetTradeListReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetTradeListReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetTradeListReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetTradeListReq;
            })();

            pb.RpcGetTradeListRsp = (function() {

                /**
                 * Properties of a RpcGetTradeListRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetTradeListRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetTradeListRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcGetTradeListRsp trade
                 */

                /**
                 * Constructs a new RpcGetTradeListRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetTradeListRsp.
                 * @implements IRpcGetTradeListRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetTradeListRsp=} [properties] Properties to set
                 */
                function RpcGetTradeListRsp(properties) {
                    this.trade = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetTradeListRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp
                 * @instance
                 */
                RpcGetTradeListRsp.prototype.commonRsp = null;

                /**
                 * RpcGetTradeListRsp trade.
                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade
                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp
                 * @instance
                 */
                RpcGetTradeListRsp.prototype.trade = $util.emptyArray;

                /**
                 * Creates a new RpcGetTradeListRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetTradeListRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetTradeListRsp} RpcGetTradeListRsp instance
                 */
                RpcGetTradeListRsp.create = function create(properties) {
                    return new RpcGetTradeListRsp(properties);
                };

                /**
                 * Encodes the specified RpcGetTradeListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetTradeListRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetTradeListRsp} message RpcGetTradeListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetTradeListRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.trade != null && message.trade.length)
                        for (var i = 0; i < message.trade.length; ++i)
                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetTradeListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetTradeListRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetTradeListRsp} message RpcGetTradeListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetTradeListRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetTradeListRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetTradeListRsp} RpcGetTradeListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetTradeListRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetTradeListRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.trade && message.trade.length))
                                message.trade = [];
                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetTradeListRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetTradeListRsp} RpcGetTradeListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetTradeListRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetTradeListRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetTradeListRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.trade != null && message.hasOwnProperty("trade")) {
                        if (!Array.isArray(message.trade))
                            return "trade: array expected";
                        for (var i = 0; i < message.trade.length; ++i) {
                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);
                            if (error)
                                return "trade." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetTradeListRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetTradeListRsp} RpcGetTradeListRsp
                 */
                RpcGetTradeListRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetTradeListRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetTradeListRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetTradeListRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.trade) {
                        if (!Array.isArray(object.trade))
                            throw TypeError(".xyz.redtorch.pb.RpcGetTradeListRsp.trade: array expected");
                        message.trade = [];
                        for (var i = 0; i < object.trade.length; ++i) {
                            if (typeof object.trade[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcGetTradeListRsp.trade: object expected");
                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetTradeListRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetTradeListRsp} message RpcGetTradeListRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetTradeListRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.trade = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.trade && message.trade.length) {
                        object.trade = [];
                        for (var j = 0; j < message.trade.length; ++j)
                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcGetTradeListRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetTradeListRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetTradeListRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetTradeListRsp;
            })();

            pb.RpcQueryTradeByTradeIdReq = (function() {

                /**
                 * Properties of a RpcQueryTradeByTradeIdReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryTradeByTradeIdReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeByTradeIdReq commonReq
                 * @property {string|null} [tradeId] RpcQueryTradeByTradeIdReq tradeId
                 */

                /**
                 * Constructs a new RpcQueryTradeByTradeIdReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryTradeByTradeIdReq.
                 * @implements IRpcQueryTradeByTradeIdReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdReq=} [properties] Properties to set
                 */
                function RpcQueryTradeByTradeIdReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryTradeByTradeIdReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq
                 * @instance
                 */
                RpcQueryTradeByTradeIdReq.prototype.commonReq = null;

                /**
                 * RpcQueryTradeByTradeIdReq tradeId.
                 * @member {string} tradeId
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq
                 * @instance
                 */
                RpcQueryTradeByTradeIdReq.prototype.tradeId = "";

                /**
                 * Creates a new RpcQueryTradeByTradeIdReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} RpcQueryTradeByTradeIdReq instance
                 */
                RpcQueryTradeByTradeIdReq.create = function create(properties) {
                    return new RpcQueryTradeByTradeIdReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryTradeByTradeIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeByTradeIdReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdReq} message RpcQueryTradeByTradeIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeByTradeIdReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.tradeId != null && message.hasOwnProperty("tradeId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.tradeId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryTradeByTradeIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeByTradeIdReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdReq} message RpcQueryTradeByTradeIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeByTradeIdReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryTradeByTradeIdReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} RpcQueryTradeByTradeIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeByTradeIdReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.tradeId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryTradeByTradeIdReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} RpcQueryTradeByTradeIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeByTradeIdReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryTradeByTradeIdReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryTradeByTradeIdReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.tradeId != null && message.hasOwnProperty("tradeId"))
                        if (!$util.isString(message.tradeId))
                            return "tradeId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryTradeByTradeIdReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} RpcQueryTradeByTradeIdReq
                 */
                RpcQueryTradeByTradeIdReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeByTradeIdReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.tradeId != null)
                        message.tradeId = String(object.tradeId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryTradeByTradeIdReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryTradeByTradeIdReq} message RpcQueryTradeByTradeIdReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryTradeByTradeIdReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.tradeId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.tradeId != null && message.hasOwnProperty("tradeId"))
                        object.tradeId = message.tradeId;
                    return object;
                };

                /**
                 * Converts this RpcQueryTradeByTradeIdReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryTradeByTradeIdReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryTradeByTradeIdReq;
            })();

            pb.RpcQueryTradeByTradeIdRsp = (function() {

                /**
                 * Properties of a RpcQueryTradeByTradeIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryTradeByTradeIdRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeByTradeIdRsp commonRsp
                 * @property {xyz.redtorch.pb.ITradeField|null} [trade] RpcQueryTradeByTradeIdRsp trade
                 */

                /**
                 * Constructs a new RpcQueryTradeByTradeIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryTradeByTradeIdRsp.
                 * @implements IRpcQueryTradeByTradeIdRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdRsp=} [properties] Properties to set
                 */
                function RpcQueryTradeByTradeIdRsp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryTradeByTradeIdRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp
                 * @instance
                 */
                RpcQueryTradeByTradeIdRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryTradeByTradeIdRsp trade.
                 * @member {xyz.redtorch.pb.ITradeField|null|undefined} trade
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp
                 * @instance
                 */
                RpcQueryTradeByTradeIdRsp.prototype.trade = null;

                /**
                 * Creates a new RpcQueryTradeByTradeIdRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} RpcQueryTradeByTradeIdRsp instance
                 */
                RpcQueryTradeByTradeIdRsp.create = function create(properties) {
                    return new RpcQueryTradeByTradeIdRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryTradeByTradeIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdRsp} message RpcQueryTradeByTradeIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeByTradeIdRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.trade != null && message.hasOwnProperty("trade"))
                        $root.xyz.redtorch.pb.TradeField.encode(message.trade, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryTradeByTradeIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeByTradeIdRsp} message RpcQueryTradeByTradeIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeByTradeIdRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryTradeByTradeIdRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} RpcQueryTradeByTradeIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeByTradeIdRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.trade = $root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryTradeByTradeIdRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} RpcQueryTradeByTradeIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeByTradeIdRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryTradeByTradeIdRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryTradeByTradeIdRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.trade != null && message.hasOwnProperty("trade")) {
                        var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade);
                        if (error)
                            return "trade." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryTradeByTradeIdRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} RpcQueryTradeByTradeIdRsp
                 */
                RpcQueryTradeByTradeIdRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.trade != null) {
                        if (typeof object.trade !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp.trade: object expected");
                        message.trade = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryTradeByTradeIdRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp} message RpcQueryTradeByTradeIdRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryTradeByTradeIdRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRsp = null;
                        object.trade = null;
                    }
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.trade != null && message.hasOwnProperty("trade"))
                        object.trade = $root.xyz.redtorch.pb.TradeField.toObject(message.trade, options);
                    return object;
                };

                /**
                 * Converts this RpcQueryTradeByTradeIdRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryTradeByTradeIdRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryTradeByTradeIdRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryTradeByTradeIdRsp;
            })();

            pb.RpcQueryTradeListByUnifiedSymbolReq = (function() {

                /**
                 * Properties of a RpcQueryTradeListByUnifiedSymbolReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryTradeListByUnifiedSymbolReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeListByUnifiedSymbolReq commonReq
                 * @property {string|null} [unifiedSymbol] RpcQueryTradeListByUnifiedSymbolReq unifiedSymbol
                 */

                /**
                 * Constructs a new RpcQueryTradeListByUnifiedSymbolReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryTradeListByUnifiedSymbolReq.
                 * @implements IRpcQueryTradeListByUnifiedSymbolReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolReq=} [properties] Properties to set
                 */
                function RpcQueryTradeListByUnifiedSymbolReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryTradeListByUnifiedSymbolReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq
                 * @instance
                 */
                RpcQueryTradeListByUnifiedSymbolReq.prototype.commonReq = null;

                /**
                 * RpcQueryTradeListByUnifiedSymbolReq unifiedSymbol.
                 * @member {string} unifiedSymbol
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq
                 * @instance
                 */
                RpcQueryTradeListByUnifiedSymbolReq.prototype.unifiedSymbol = "";

                /**
                 * Creates a new RpcQueryTradeListByUnifiedSymbolReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq} RpcQueryTradeListByUnifiedSymbolReq instance
                 */
                RpcQueryTradeListByUnifiedSymbolReq.create = function create(properties) {
                    return new RpcQueryTradeListByUnifiedSymbolReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryTradeListByUnifiedSymbolReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolReq} message RpcQueryTradeListByUnifiedSymbolReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByUnifiedSymbolReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.unifiedSymbol);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryTradeListByUnifiedSymbolReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolReq} message RpcQueryTradeListByUnifiedSymbolReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByUnifiedSymbolReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryTradeListByUnifiedSymbolReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq} RpcQueryTradeListByUnifiedSymbolReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByUnifiedSymbolReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.unifiedSymbol = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryTradeListByUnifiedSymbolReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq} RpcQueryTradeListByUnifiedSymbolReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByUnifiedSymbolReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryTradeListByUnifiedSymbolReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryTradeListByUnifiedSymbolReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        if (!$util.isString(message.unifiedSymbol))
                            return "unifiedSymbol: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryTradeListByUnifiedSymbolReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq} RpcQueryTradeListByUnifiedSymbolReq
                 */
                RpcQueryTradeListByUnifiedSymbolReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.unifiedSymbol != null)
                        message.unifiedSymbol = String(object.unifiedSymbol);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryTradeListByUnifiedSymbolReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq} message RpcQueryTradeListByUnifiedSymbolReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryTradeListByUnifiedSymbolReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.unifiedSymbol = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        object.unifiedSymbol = message.unifiedSymbol;
                    return object;
                };

                /**
                 * Converts this RpcQueryTradeListByUnifiedSymbolReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryTradeListByUnifiedSymbolReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryTradeListByUnifiedSymbolReq;
            })();

            pb.RpcQueryTradeListByUnifiedSymbolRsp = (function() {

                /**
                 * Properties of a RpcQueryTradeListByUnifiedSymbolRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryTradeListByUnifiedSymbolRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeListByUnifiedSymbolRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcQueryTradeListByUnifiedSymbolRsp trade
                 */

                /**
                 * Constructs a new RpcQueryTradeListByUnifiedSymbolRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryTradeListByUnifiedSymbolRsp.
                 * @implements IRpcQueryTradeListByUnifiedSymbolRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolRsp=} [properties] Properties to set
                 */
                function RpcQueryTradeListByUnifiedSymbolRsp(properties) {
                    this.trade = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryTradeListByUnifiedSymbolRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp
                 * @instance
                 */
                RpcQueryTradeListByUnifiedSymbolRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryTradeListByUnifiedSymbolRsp trade.
                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp
                 * @instance
                 */
                RpcQueryTradeListByUnifiedSymbolRsp.prototype.trade = $util.emptyArray;

                /**
                 * Creates a new RpcQueryTradeListByUnifiedSymbolRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp} RpcQueryTradeListByUnifiedSymbolRsp instance
                 */
                RpcQueryTradeListByUnifiedSymbolRsp.create = function create(properties) {
                    return new RpcQueryTradeListByUnifiedSymbolRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryTradeListByUnifiedSymbolRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolRsp} message RpcQueryTradeListByUnifiedSymbolRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByUnifiedSymbolRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.trade != null && message.trade.length)
                        for (var i = 0; i < message.trade.length; ++i)
                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryTradeListByUnifiedSymbolRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByUnifiedSymbolRsp} message RpcQueryTradeListByUnifiedSymbolRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByUnifiedSymbolRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryTradeListByUnifiedSymbolRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp} RpcQueryTradeListByUnifiedSymbolRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByUnifiedSymbolRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.trade && message.trade.length))
                                message.trade = [];
                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryTradeListByUnifiedSymbolRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp} RpcQueryTradeListByUnifiedSymbolRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByUnifiedSymbolRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryTradeListByUnifiedSymbolRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryTradeListByUnifiedSymbolRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.trade != null && message.hasOwnProperty("trade")) {
                        if (!Array.isArray(message.trade))
                            return "trade: array expected";
                        for (var i = 0; i < message.trade.length; ++i) {
                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);
                            if (error)
                                return "trade." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryTradeListByUnifiedSymbolRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp} RpcQueryTradeListByUnifiedSymbolRsp
                 */
                RpcQueryTradeListByUnifiedSymbolRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.trade) {
                        if (!Array.isArray(object.trade))
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp.trade: array expected");
                        message.trade = [];
                        for (var i = 0; i < object.trade.length; ++i) {
                            if (typeof object.trade[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp.trade: object expected");
                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryTradeListByUnifiedSymbolRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp} message RpcQueryTradeListByUnifiedSymbolRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryTradeListByUnifiedSymbolRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.trade = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.trade && message.trade.length) {
                        object.trade = [];
                        for (var j = 0; j < message.trade.length; ++j)
                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcQueryTradeListByUnifiedSymbolRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByUnifiedSymbolRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryTradeListByUnifiedSymbolRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryTradeListByUnifiedSymbolRsp;
            })();

            pb.RpcQueryTradeListByAccountIdReq = (function() {

                /**
                 * Properties of a RpcQueryTradeListByAccountIdReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryTradeListByAccountIdReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeListByAccountIdReq commonReq
                 * @property {string|null} [accountId] RpcQueryTradeListByAccountIdReq accountId
                 */

                /**
                 * Constructs a new RpcQueryTradeListByAccountIdReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryTradeListByAccountIdReq.
                 * @implements IRpcQueryTradeListByAccountIdReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdReq=} [properties] Properties to set
                 */
                function RpcQueryTradeListByAccountIdReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryTradeListByAccountIdReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq
                 * @instance
                 */
                RpcQueryTradeListByAccountIdReq.prototype.commonReq = null;

                /**
                 * RpcQueryTradeListByAccountIdReq accountId.
                 * @member {string} accountId
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq
                 * @instance
                 */
                RpcQueryTradeListByAccountIdReq.prototype.accountId = "";

                /**
                 * Creates a new RpcQueryTradeListByAccountIdReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} RpcQueryTradeListByAccountIdReq instance
                 */
                RpcQueryTradeListByAccountIdReq.create = function create(properties) {
                    return new RpcQueryTradeListByAccountIdReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryTradeListByAccountIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdReq} message RpcQueryTradeListByAccountIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByAccountIdReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryTradeListByAccountIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdReq} message RpcQueryTradeListByAccountIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByAccountIdReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryTradeListByAccountIdReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} RpcQueryTradeListByAccountIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByAccountIdReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.accountId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryTradeListByAccountIdReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} RpcQueryTradeListByAccountIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByAccountIdReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryTradeListByAccountIdReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryTradeListByAccountIdReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        if (!$util.isString(message.accountId))
                            return "accountId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryTradeListByAccountIdReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} RpcQueryTradeListByAccountIdReq
                 */
                RpcQueryTradeListByAccountIdReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.accountId != null)
                        message.accountId = String(object.accountId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryTradeListByAccountIdReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq} message RpcQueryTradeListByAccountIdReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryTradeListByAccountIdReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.accountId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        object.accountId = message.accountId;
                    return object;
                };

                /**
                 * Converts this RpcQueryTradeListByAccountIdReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryTradeListByAccountIdReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryTradeListByAccountIdReq;
            })();

            pb.RpcQueryTradeListByAccountIdRsp = (function() {

                /**
                 * Properties of a RpcQueryTradeListByAccountIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryTradeListByAccountIdRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeListByAccountIdRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcQueryTradeListByAccountIdRsp trade
                 */

                /**
                 * Constructs a new RpcQueryTradeListByAccountIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryTradeListByAccountIdRsp.
                 * @implements IRpcQueryTradeListByAccountIdRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdRsp=} [properties] Properties to set
                 */
                function RpcQueryTradeListByAccountIdRsp(properties) {
                    this.trade = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryTradeListByAccountIdRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp
                 * @instance
                 */
                RpcQueryTradeListByAccountIdRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryTradeListByAccountIdRsp trade.
                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp
                 * @instance
                 */
                RpcQueryTradeListByAccountIdRsp.prototype.trade = $util.emptyArray;

                /**
                 * Creates a new RpcQueryTradeListByAccountIdRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} RpcQueryTradeListByAccountIdRsp instance
                 */
                RpcQueryTradeListByAccountIdRsp.create = function create(properties) {
                    return new RpcQueryTradeListByAccountIdRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryTradeListByAccountIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdRsp} message RpcQueryTradeListByAccountIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByAccountIdRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.trade != null && message.trade.length)
                        for (var i = 0; i < message.trade.length; ++i)
                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryTradeListByAccountIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByAccountIdRsp} message RpcQueryTradeListByAccountIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByAccountIdRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryTradeListByAccountIdRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} RpcQueryTradeListByAccountIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByAccountIdRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.trade && message.trade.length))
                                message.trade = [];
                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryTradeListByAccountIdRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} RpcQueryTradeListByAccountIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByAccountIdRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryTradeListByAccountIdRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryTradeListByAccountIdRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.trade != null && message.hasOwnProperty("trade")) {
                        if (!Array.isArray(message.trade))
                            return "trade: array expected";
                        for (var i = 0; i < message.trade.length; ++i) {
                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);
                            if (error)
                                return "trade." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryTradeListByAccountIdRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} RpcQueryTradeListByAccountIdRsp
                 */
                RpcQueryTradeListByAccountIdRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.trade) {
                        if (!Array.isArray(object.trade))
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.trade: array expected");
                        message.trade = [];
                        for (var i = 0; i < object.trade.length; ++i) {
                            if (typeof object.trade[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp.trade: object expected");
                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryTradeListByAccountIdRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp} message RpcQueryTradeListByAccountIdRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryTradeListByAccountIdRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.trade = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.trade && message.trade.length) {
                        object.trade = [];
                        for (var j = 0; j < message.trade.length; ++j)
                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcQueryTradeListByAccountIdRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByAccountIdRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryTradeListByAccountIdRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryTradeListByAccountIdRsp;
            })();

            pb.RpcQueryTradeListByOrderIdReq = (function() {

                /**
                 * Properties of a RpcQueryTradeListByOrderIdReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryTradeListByOrderIdReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeListByOrderIdReq commonReq
                 * @property {string|null} [orderId] RpcQueryTradeListByOrderIdReq orderId
                 */

                /**
                 * Constructs a new RpcQueryTradeListByOrderIdReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryTradeListByOrderIdReq.
                 * @implements IRpcQueryTradeListByOrderIdReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdReq=} [properties] Properties to set
                 */
                function RpcQueryTradeListByOrderIdReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryTradeListByOrderIdReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq
                 * @instance
                 */
                RpcQueryTradeListByOrderIdReq.prototype.commonReq = null;

                /**
                 * RpcQueryTradeListByOrderIdReq orderId.
                 * @member {string} orderId
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq
                 * @instance
                 */
                RpcQueryTradeListByOrderIdReq.prototype.orderId = "";

                /**
                 * Creates a new RpcQueryTradeListByOrderIdReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} RpcQueryTradeListByOrderIdReq instance
                 */
                RpcQueryTradeListByOrderIdReq.create = function create(properties) {
                    return new RpcQueryTradeListByOrderIdReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryTradeListByOrderIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdReq} message RpcQueryTradeListByOrderIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByOrderIdReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.orderId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryTradeListByOrderIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdReq} message RpcQueryTradeListByOrderIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByOrderIdReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryTradeListByOrderIdReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} RpcQueryTradeListByOrderIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByOrderIdReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.orderId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryTradeListByOrderIdReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} RpcQueryTradeListByOrderIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByOrderIdReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryTradeListByOrderIdReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryTradeListByOrderIdReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        if (!$util.isString(message.orderId))
                            return "orderId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryTradeListByOrderIdReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} RpcQueryTradeListByOrderIdReq
                 */
                RpcQueryTradeListByOrderIdReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.orderId != null)
                        message.orderId = String(object.orderId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryTradeListByOrderIdReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq} message RpcQueryTradeListByOrderIdReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryTradeListByOrderIdReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.orderId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.orderId != null && message.hasOwnProperty("orderId"))
                        object.orderId = message.orderId;
                    return object;
                };

                /**
                 * Converts this RpcQueryTradeListByOrderIdReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryTradeListByOrderIdReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryTradeListByOrderIdReq;
            })();

            pb.RpcQueryTradeListByOrderIdRsp = (function() {

                /**
                 * Properties of a RpcQueryTradeListByOrderIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryTradeListByOrderIdRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeListByOrderIdRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcQueryTradeListByOrderIdRsp trade
                 */

                /**
                 * Constructs a new RpcQueryTradeListByOrderIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryTradeListByOrderIdRsp.
                 * @implements IRpcQueryTradeListByOrderIdRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdRsp=} [properties] Properties to set
                 */
                function RpcQueryTradeListByOrderIdRsp(properties) {
                    this.trade = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryTradeListByOrderIdRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp
                 * @instance
                 */
                RpcQueryTradeListByOrderIdRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryTradeListByOrderIdRsp trade.
                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp
                 * @instance
                 */
                RpcQueryTradeListByOrderIdRsp.prototype.trade = $util.emptyArray;

                /**
                 * Creates a new RpcQueryTradeListByOrderIdRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} RpcQueryTradeListByOrderIdRsp instance
                 */
                RpcQueryTradeListByOrderIdRsp.create = function create(properties) {
                    return new RpcQueryTradeListByOrderIdRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryTradeListByOrderIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdRsp} message RpcQueryTradeListByOrderIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByOrderIdRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.trade != null && message.trade.length)
                        for (var i = 0; i < message.trade.length; ++i)
                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryTradeListByOrderIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOrderIdRsp} message RpcQueryTradeListByOrderIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByOrderIdRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryTradeListByOrderIdRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} RpcQueryTradeListByOrderIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByOrderIdRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.trade && message.trade.length))
                                message.trade = [];
                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryTradeListByOrderIdRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} RpcQueryTradeListByOrderIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByOrderIdRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryTradeListByOrderIdRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryTradeListByOrderIdRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.trade != null && message.hasOwnProperty("trade")) {
                        if (!Array.isArray(message.trade))
                            return "trade: array expected";
                        for (var i = 0; i < message.trade.length; ++i) {
                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);
                            if (error)
                                return "trade." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryTradeListByOrderIdRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} RpcQueryTradeListByOrderIdRsp
                 */
                RpcQueryTradeListByOrderIdRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.trade) {
                        if (!Array.isArray(object.trade))
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.trade: array expected");
                        message.trade = [];
                        for (var i = 0; i < object.trade.length; ++i) {
                            if (typeof object.trade[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp.trade: object expected");
                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryTradeListByOrderIdRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp} message RpcQueryTradeListByOrderIdRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryTradeListByOrderIdRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.trade = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.trade && message.trade.length) {
                        object.trade = [];
                        for (var j = 0; j < message.trade.length; ++j)
                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcQueryTradeListByOrderIdRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOrderIdRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryTradeListByOrderIdRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryTradeListByOrderIdRsp;
            })();

            pb.RpcQueryTradeListByOriginOrderIdReq = (function() {

                /**
                 * Properties of a RpcQueryTradeListByOriginOrderIdReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryTradeListByOriginOrderIdReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryTradeListByOriginOrderIdReq commonReq
                 * @property {string|null} [originOrderId] RpcQueryTradeListByOriginOrderIdReq originOrderId
                 */

                /**
                 * Constructs a new RpcQueryTradeListByOriginOrderIdReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryTradeListByOriginOrderIdReq.
                 * @implements IRpcQueryTradeListByOriginOrderIdReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdReq=} [properties] Properties to set
                 */
                function RpcQueryTradeListByOriginOrderIdReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryTradeListByOriginOrderIdReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq
                 * @instance
                 */
                RpcQueryTradeListByOriginOrderIdReq.prototype.commonReq = null;

                /**
                 * RpcQueryTradeListByOriginOrderIdReq originOrderId.
                 * @member {string} originOrderId
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq
                 * @instance
                 */
                RpcQueryTradeListByOriginOrderIdReq.prototype.originOrderId = "";

                /**
                 * Creates a new RpcQueryTradeListByOriginOrderIdReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} RpcQueryTradeListByOriginOrderIdReq instance
                 */
                RpcQueryTradeListByOriginOrderIdReq.create = function create(properties) {
                    return new RpcQueryTradeListByOriginOrderIdReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryTradeListByOriginOrderIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdReq} message RpcQueryTradeListByOriginOrderIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByOriginOrderIdReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.originOrderId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryTradeListByOriginOrderIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdReq} message RpcQueryTradeListByOriginOrderIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByOriginOrderIdReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryTradeListByOriginOrderIdReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} RpcQueryTradeListByOriginOrderIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByOriginOrderIdReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.originOrderId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryTradeListByOriginOrderIdReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} RpcQueryTradeListByOriginOrderIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByOriginOrderIdReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryTradeListByOriginOrderIdReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryTradeListByOriginOrderIdReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        if (!$util.isString(message.originOrderId))
                            return "originOrderId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryTradeListByOriginOrderIdReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} RpcQueryTradeListByOriginOrderIdReq
                 */
                RpcQueryTradeListByOriginOrderIdReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.originOrderId != null)
                        message.originOrderId = String(object.originOrderId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryTradeListByOriginOrderIdReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq} message RpcQueryTradeListByOriginOrderIdReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryTradeListByOriginOrderIdReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.originOrderId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.originOrderId != null && message.hasOwnProperty("originOrderId"))
                        object.originOrderId = message.originOrderId;
                    return object;
                };

                /**
                 * Converts this RpcQueryTradeListByOriginOrderIdReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryTradeListByOriginOrderIdReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryTradeListByOriginOrderIdReq;
            })();

            pb.RpcQueryTradeListByOriginOrderIdRsp = (function() {

                /**
                 * Properties of a RpcQueryTradeListByOriginOrderIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryTradeListByOriginOrderIdRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryTradeListByOriginOrderIdRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcQueryTradeListByOriginOrderIdRsp trade
                 */

                /**
                 * Constructs a new RpcQueryTradeListByOriginOrderIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryTradeListByOriginOrderIdRsp.
                 * @implements IRpcQueryTradeListByOriginOrderIdRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdRsp=} [properties] Properties to set
                 */
                function RpcQueryTradeListByOriginOrderIdRsp(properties) {
                    this.trade = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryTradeListByOriginOrderIdRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp
                 * @instance
                 */
                RpcQueryTradeListByOriginOrderIdRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryTradeListByOriginOrderIdRsp trade.
                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp
                 * @instance
                 */
                RpcQueryTradeListByOriginOrderIdRsp.prototype.trade = $util.emptyArray;

                /**
                 * Creates a new RpcQueryTradeListByOriginOrderIdRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} RpcQueryTradeListByOriginOrderIdRsp instance
                 */
                RpcQueryTradeListByOriginOrderIdRsp.create = function create(properties) {
                    return new RpcQueryTradeListByOriginOrderIdRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryTradeListByOriginOrderIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdRsp} message RpcQueryTradeListByOriginOrderIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByOriginOrderIdRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.trade != null && message.trade.length)
                        for (var i = 0; i < message.trade.length; ++i)
                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryTradeListByOriginOrderIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryTradeListByOriginOrderIdRsp} message RpcQueryTradeListByOriginOrderIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryTradeListByOriginOrderIdRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryTradeListByOriginOrderIdRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} RpcQueryTradeListByOriginOrderIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByOriginOrderIdRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.trade && message.trade.length))
                                message.trade = [];
                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryTradeListByOriginOrderIdRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} RpcQueryTradeListByOriginOrderIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryTradeListByOriginOrderIdRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryTradeListByOriginOrderIdRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryTradeListByOriginOrderIdRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.trade != null && message.hasOwnProperty("trade")) {
                        if (!Array.isArray(message.trade))
                            return "trade: array expected";
                        for (var i = 0; i < message.trade.length; ++i) {
                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);
                            if (error)
                                return "trade." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryTradeListByOriginOrderIdRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} RpcQueryTradeListByOriginOrderIdRsp
                 */
                RpcQueryTradeListByOriginOrderIdRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.trade) {
                        if (!Array.isArray(object.trade))
                            throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.trade: array expected");
                        message.trade = [];
                        for (var i = 0; i < object.trade.length; ++i) {
                            if (typeof object.trade[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp.trade: object expected");
                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryTradeListByOriginOrderIdRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp} message RpcQueryTradeListByOriginOrderIdRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryTradeListByOriginOrderIdRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.trade = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.trade && message.trade.length) {
                        object.trade = [];
                        for (var j = 0; j < message.trade.length; ++j)
                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcQueryTradeListByOriginOrderIdRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryTradeListByOriginOrderIdRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryTradeListByOriginOrderIdRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryTradeListByOriginOrderIdRsp;
            })();

            pb.RpcGetPositionListReq = (function() {

                /**
                 * Properties of a RpcGetPositionListReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetPositionListReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetPositionListReq commonReq
                 */

                /**
                 * Constructs a new RpcGetPositionListReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetPositionListReq.
                 * @implements IRpcGetPositionListReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetPositionListReq=} [properties] Properties to set
                 */
                function RpcGetPositionListReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetPositionListReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq
                 * @instance
                 */
                RpcGetPositionListReq.prototype.commonReq = null;

                /**
                 * Creates a new RpcGetPositionListReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetPositionListReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetPositionListReq} RpcGetPositionListReq instance
                 */
                RpcGetPositionListReq.create = function create(properties) {
                    return new RpcGetPositionListReq(properties);
                };

                /**
                 * Encodes the specified RpcGetPositionListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetPositionListReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetPositionListReq} message RpcGetPositionListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetPositionListReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetPositionListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetPositionListReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetPositionListReq} message RpcGetPositionListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetPositionListReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetPositionListReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetPositionListReq} RpcGetPositionListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetPositionListReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetPositionListReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetPositionListReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetPositionListReq} RpcGetPositionListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetPositionListReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetPositionListReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetPositionListReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetPositionListReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetPositionListReq} RpcGetPositionListReq
                 */
                RpcGetPositionListReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetPositionListReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetPositionListReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetPositionListReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetPositionListReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetPositionListReq} message RpcGetPositionListReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetPositionListReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.commonReq = null;
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    return object;
                };

                /**
                 * Converts this RpcGetPositionListReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetPositionListReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetPositionListReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetPositionListReq;
            })();

            pb.RpcGetPositionListRsp = (function() {

                /**
                 * Properties of a RpcGetPositionListRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetPositionListRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetPositionListRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IPositionField>|null} [position] RpcGetPositionListRsp position
                 */

                /**
                 * Constructs a new RpcGetPositionListRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetPositionListRsp.
                 * @implements IRpcGetPositionListRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetPositionListRsp=} [properties] Properties to set
                 */
                function RpcGetPositionListRsp(properties) {
                    this.position = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetPositionListRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp
                 * @instance
                 */
                RpcGetPositionListRsp.prototype.commonRsp = null;

                /**
                 * RpcGetPositionListRsp position.
                 * @member {Array.<xyz.redtorch.pb.IPositionField>} position
                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp
                 * @instance
                 */
                RpcGetPositionListRsp.prototype.position = $util.emptyArray;

                /**
                 * Creates a new RpcGetPositionListRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetPositionListRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetPositionListRsp} RpcGetPositionListRsp instance
                 */
                RpcGetPositionListRsp.create = function create(properties) {
                    return new RpcGetPositionListRsp(properties);
                };

                /**
                 * Encodes the specified RpcGetPositionListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetPositionListRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetPositionListRsp} message RpcGetPositionListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetPositionListRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.position != null && message.position.length)
                        for (var i = 0; i < message.position.length; ++i)
                            $root.xyz.redtorch.pb.PositionField.encode(message.position[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetPositionListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetPositionListRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetPositionListRsp} message RpcGetPositionListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetPositionListRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetPositionListRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetPositionListRsp} RpcGetPositionListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetPositionListRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetPositionListRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.position && message.position.length))
                                message.position = [];
                            message.position.push($root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetPositionListRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetPositionListRsp} RpcGetPositionListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetPositionListRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetPositionListRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetPositionListRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.position != null && message.hasOwnProperty("position")) {
                        if (!Array.isArray(message.position))
                            return "position: array expected";
                        for (var i = 0; i < message.position.length; ++i) {
                            var error = $root.xyz.redtorch.pb.PositionField.verify(message.position[i]);
                            if (error)
                                return "position." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetPositionListRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetPositionListRsp} RpcGetPositionListRsp
                 */
                RpcGetPositionListRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetPositionListRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetPositionListRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetPositionListRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.position) {
                        if (!Array.isArray(object.position))
                            throw TypeError(".xyz.redtorch.pb.RpcGetPositionListRsp.position: array expected");
                        message.position = [];
                        for (var i = 0; i < object.position.length; ++i) {
                            if (typeof object.position[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcGetPositionListRsp.position: object expected");
                            message.position[i] = $root.xyz.redtorch.pb.PositionField.fromObject(object.position[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetPositionListRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetPositionListRsp} message RpcGetPositionListRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetPositionListRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.position = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.position && message.position.length) {
                        object.position = [];
                        for (var j = 0; j < message.position.length; ++j)
                            object.position[j] = $root.xyz.redtorch.pb.PositionField.toObject(message.position[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcGetPositionListRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetPositionListRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetPositionListRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetPositionListRsp;
            })();

            pb.RpcQueryPositionByPositionIdReq = (function() {

                /**
                 * Properties of a RpcQueryPositionByPositionIdReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryPositionByPositionIdReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryPositionByPositionIdReq commonReq
                 * @property {string|null} [positionId] RpcQueryPositionByPositionIdReq positionId
                 */

                /**
                 * Constructs a new RpcQueryPositionByPositionIdReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryPositionByPositionIdReq.
                 * @implements IRpcQueryPositionByPositionIdReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdReq=} [properties] Properties to set
                 */
                function RpcQueryPositionByPositionIdReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryPositionByPositionIdReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq
                 * @instance
                 */
                RpcQueryPositionByPositionIdReq.prototype.commonReq = null;

                /**
                 * RpcQueryPositionByPositionIdReq positionId.
                 * @member {string} positionId
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq
                 * @instance
                 */
                RpcQueryPositionByPositionIdReq.prototype.positionId = "";

                /**
                 * Creates a new RpcQueryPositionByPositionIdReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} RpcQueryPositionByPositionIdReq instance
                 */
                RpcQueryPositionByPositionIdReq.create = function create(properties) {
                    return new RpcQueryPositionByPositionIdReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryPositionByPositionIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionByPositionIdReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdReq} message RpcQueryPositionByPositionIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryPositionByPositionIdReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.positionId != null && message.hasOwnProperty("positionId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.positionId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryPositionByPositionIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionByPositionIdReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdReq} message RpcQueryPositionByPositionIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryPositionByPositionIdReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryPositionByPositionIdReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} RpcQueryPositionByPositionIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryPositionByPositionIdReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.positionId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryPositionByPositionIdReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} RpcQueryPositionByPositionIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryPositionByPositionIdReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryPositionByPositionIdReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryPositionByPositionIdReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.positionId != null && message.hasOwnProperty("positionId"))
                        if (!$util.isString(message.positionId))
                            return "positionId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryPositionByPositionIdReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} RpcQueryPositionByPositionIdReq
                 */
                RpcQueryPositionByPositionIdReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryPositionByPositionIdReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.positionId != null)
                        message.positionId = String(object.positionId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryPositionByPositionIdReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryPositionByPositionIdReq} message RpcQueryPositionByPositionIdReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryPositionByPositionIdReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.positionId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.positionId != null && message.hasOwnProperty("positionId"))
                        object.positionId = message.positionId;
                    return object;
                };

                /**
                 * Converts this RpcQueryPositionByPositionIdReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryPositionByPositionIdReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryPositionByPositionIdReq;
            })();

            pb.RpcQueryPositionByPositionIdRsp = (function() {

                /**
                 * Properties of a RpcQueryPositionByPositionIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryPositionByPositionIdRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryPositionByPositionIdRsp commonRsp
                 * @property {xyz.redtorch.pb.IPositionField|null} [position] RpcQueryPositionByPositionIdRsp position
                 */

                /**
                 * Constructs a new RpcQueryPositionByPositionIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryPositionByPositionIdRsp.
                 * @implements IRpcQueryPositionByPositionIdRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdRsp=} [properties] Properties to set
                 */
                function RpcQueryPositionByPositionIdRsp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryPositionByPositionIdRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp
                 * @instance
                 */
                RpcQueryPositionByPositionIdRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryPositionByPositionIdRsp position.
                 * @member {xyz.redtorch.pb.IPositionField|null|undefined} position
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp
                 * @instance
                 */
                RpcQueryPositionByPositionIdRsp.prototype.position = null;

                /**
                 * Creates a new RpcQueryPositionByPositionIdRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} RpcQueryPositionByPositionIdRsp instance
                 */
                RpcQueryPositionByPositionIdRsp.create = function create(properties) {
                    return new RpcQueryPositionByPositionIdRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryPositionByPositionIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdRsp} message RpcQueryPositionByPositionIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryPositionByPositionIdRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.position != null && message.hasOwnProperty("position"))
                        $root.xyz.redtorch.pb.PositionField.encode(message.position, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryPositionByPositionIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionByPositionIdRsp} message RpcQueryPositionByPositionIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryPositionByPositionIdRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryPositionByPositionIdRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} RpcQueryPositionByPositionIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryPositionByPositionIdRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.position = $root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryPositionByPositionIdRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} RpcQueryPositionByPositionIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryPositionByPositionIdRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryPositionByPositionIdRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryPositionByPositionIdRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.position != null && message.hasOwnProperty("position")) {
                        var error = $root.xyz.redtorch.pb.PositionField.verify(message.position);
                        if (error)
                            return "position." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryPositionByPositionIdRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} RpcQueryPositionByPositionIdRsp
                 */
                RpcQueryPositionByPositionIdRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.position != null) {
                        if (typeof object.position !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp.position: object expected");
                        message.position = $root.xyz.redtorch.pb.PositionField.fromObject(object.position);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryPositionByPositionIdRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp} message RpcQueryPositionByPositionIdRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryPositionByPositionIdRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRsp = null;
                        object.position = null;
                    }
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.position != null && message.hasOwnProperty("position"))
                        object.position = $root.xyz.redtorch.pb.PositionField.toObject(message.position, options);
                    return object;
                };

                /**
                 * Converts this RpcQueryPositionByPositionIdRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryPositionByPositionIdRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryPositionByPositionIdRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryPositionByPositionIdRsp;
            })();

            pb.RpcQueryPositionListByAccountIdReq = (function() {

                /**
                 * Properties of a RpcQueryPositionListByAccountIdReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryPositionListByAccountIdReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryPositionListByAccountIdReq commonReq
                 * @property {string|null} [accountId] RpcQueryPositionListByAccountIdReq accountId
                 */

                /**
                 * Constructs a new RpcQueryPositionListByAccountIdReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryPositionListByAccountIdReq.
                 * @implements IRpcQueryPositionListByAccountIdReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdReq=} [properties] Properties to set
                 */
                function RpcQueryPositionListByAccountIdReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryPositionListByAccountIdReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq
                 * @instance
                 */
                RpcQueryPositionListByAccountIdReq.prototype.commonReq = null;

                /**
                 * RpcQueryPositionListByAccountIdReq accountId.
                 * @member {string} accountId
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq
                 * @instance
                 */
                RpcQueryPositionListByAccountIdReq.prototype.accountId = "";

                /**
                 * Creates a new RpcQueryPositionListByAccountIdReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} RpcQueryPositionListByAccountIdReq instance
                 */
                RpcQueryPositionListByAccountIdReq.create = function create(properties) {
                    return new RpcQueryPositionListByAccountIdReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryPositionListByAccountIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdReq} message RpcQueryPositionListByAccountIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryPositionListByAccountIdReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryPositionListByAccountIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdReq} message RpcQueryPositionListByAccountIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryPositionListByAccountIdReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryPositionListByAccountIdReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} RpcQueryPositionListByAccountIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryPositionListByAccountIdReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.accountId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryPositionListByAccountIdReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} RpcQueryPositionListByAccountIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryPositionListByAccountIdReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryPositionListByAccountIdReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryPositionListByAccountIdReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        if (!$util.isString(message.accountId))
                            return "accountId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryPositionListByAccountIdReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} RpcQueryPositionListByAccountIdReq
                 */
                RpcQueryPositionListByAccountIdReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.accountId != null)
                        message.accountId = String(object.accountId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryPositionListByAccountIdReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq} message RpcQueryPositionListByAccountIdReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryPositionListByAccountIdReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.accountId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        object.accountId = message.accountId;
                    return object;
                };

                /**
                 * Converts this RpcQueryPositionListByAccountIdReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryPositionListByAccountIdReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryPositionListByAccountIdReq;
            })();

            pb.RpcQueryPositionListByAccountIdRsp = (function() {

                /**
                 * Properties of a RpcQueryPositionListByAccountIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryPositionListByAccountIdRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryPositionListByAccountIdRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IPositionField>|null} [position] RpcQueryPositionListByAccountIdRsp position
                 */

                /**
                 * Constructs a new RpcQueryPositionListByAccountIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryPositionListByAccountIdRsp.
                 * @implements IRpcQueryPositionListByAccountIdRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdRsp=} [properties] Properties to set
                 */
                function RpcQueryPositionListByAccountIdRsp(properties) {
                    this.position = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryPositionListByAccountIdRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp
                 * @instance
                 */
                RpcQueryPositionListByAccountIdRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryPositionListByAccountIdRsp position.
                 * @member {Array.<xyz.redtorch.pb.IPositionField>} position
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp
                 * @instance
                 */
                RpcQueryPositionListByAccountIdRsp.prototype.position = $util.emptyArray;

                /**
                 * Creates a new RpcQueryPositionListByAccountIdRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} RpcQueryPositionListByAccountIdRsp instance
                 */
                RpcQueryPositionListByAccountIdRsp.create = function create(properties) {
                    return new RpcQueryPositionListByAccountIdRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryPositionListByAccountIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdRsp} message RpcQueryPositionListByAccountIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryPositionListByAccountIdRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.position != null && message.position.length)
                        for (var i = 0; i < message.position.length; ++i)
                            $root.xyz.redtorch.pb.PositionField.encode(message.position[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryPositionListByAccountIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByAccountIdRsp} message RpcQueryPositionListByAccountIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryPositionListByAccountIdRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryPositionListByAccountIdRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} RpcQueryPositionListByAccountIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryPositionListByAccountIdRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.position && message.position.length))
                                message.position = [];
                            message.position.push($root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryPositionListByAccountIdRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} RpcQueryPositionListByAccountIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryPositionListByAccountIdRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryPositionListByAccountIdRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryPositionListByAccountIdRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.position != null && message.hasOwnProperty("position")) {
                        if (!Array.isArray(message.position))
                            return "position: array expected";
                        for (var i = 0; i < message.position.length; ++i) {
                            var error = $root.xyz.redtorch.pb.PositionField.verify(message.position[i]);
                            if (error)
                                return "position." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryPositionListByAccountIdRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} RpcQueryPositionListByAccountIdRsp
                 */
                RpcQueryPositionListByAccountIdRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.position) {
                        if (!Array.isArray(object.position))
                            throw TypeError(".xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.position: array expected");
                        message.position = [];
                        for (var i = 0; i < object.position.length; ++i) {
                            if (typeof object.position[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp.position: object expected");
                            message.position[i] = $root.xyz.redtorch.pb.PositionField.fromObject(object.position[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryPositionListByAccountIdRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp} message RpcQueryPositionListByAccountIdRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryPositionListByAccountIdRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.position = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.position && message.position.length) {
                        object.position = [];
                        for (var j = 0; j < message.position.length; ++j)
                            object.position[j] = $root.xyz.redtorch.pb.PositionField.toObject(message.position[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcQueryPositionListByAccountIdRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByAccountIdRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryPositionListByAccountIdRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryPositionListByAccountIdRsp;
            })();

            pb.RpcQueryPositionListByUnifiedSymbolReq = (function() {

                /**
                 * Properties of a RpcQueryPositionListByUnifiedSymbolReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryPositionListByUnifiedSymbolReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryPositionListByUnifiedSymbolReq commonReq
                 * @property {string|null} [unifiedSymbol] RpcQueryPositionListByUnifiedSymbolReq unifiedSymbol
                 */

                /**
                 * Constructs a new RpcQueryPositionListByUnifiedSymbolReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryPositionListByUnifiedSymbolReq.
                 * @implements IRpcQueryPositionListByUnifiedSymbolReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolReq=} [properties] Properties to set
                 */
                function RpcQueryPositionListByUnifiedSymbolReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryPositionListByUnifiedSymbolReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq
                 * @instance
                 */
                RpcQueryPositionListByUnifiedSymbolReq.prototype.commonReq = null;

                /**
                 * RpcQueryPositionListByUnifiedSymbolReq unifiedSymbol.
                 * @member {string} unifiedSymbol
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq
                 * @instance
                 */
                RpcQueryPositionListByUnifiedSymbolReq.prototype.unifiedSymbol = "";

                /**
                 * Creates a new RpcQueryPositionListByUnifiedSymbolReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq} RpcQueryPositionListByUnifiedSymbolReq instance
                 */
                RpcQueryPositionListByUnifiedSymbolReq.create = function create(properties) {
                    return new RpcQueryPositionListByUnifiedSymbolReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryPositionListByUnifiedSymbolReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolReq} message RpcQueryPositionListByUnifiedSymbolReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryPositionListByUnifiedSymbolReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.unifiedSymbol);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryPositionListByUnifiedSymbolReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolReq} message RpcQueryPositionListByUnifiedSymbolReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryPositionListByUnifiedSymbolReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryPositionListByUnifiedSymbolReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq} RpcQueryPositionListByUnifiedSymbolReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryPositionListByUnifiedSymbolReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.unifiedSymbol = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryPositionListByUnifiedSymbolReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq} RpcQueryPositionListByUnifiedSymbolReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryPositionListByUnifiedSymbolReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryPositionListByUnifiedSymbolReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryPositionListByUnifiedSymbolReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        if (!$util.isString(message.unifiedSymbol))
                            return "unifiedSymbol: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryPositionListByUnifiedSymbolReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq} RpcQueryPositionListByUnifiedSymbolReq
                 */
                RpcQueryPositionListByUnifiedSymbolReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.unifiedSymbol != null)
                        message.unifiedSymbol = String(object.unifiedSymbol);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryPositionListByUnifiedSymbolReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq} message RpcQueryPositionListByUnifiedSymbolReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryPositionListByUnifiedSymbolReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.unifiedSymbol = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        object.unifiedSymbol = message.unifiedSymbol;
                    return object;
                };

                /**
                 * Converts this RpcQueryPositionListByUnifiedSymbolReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryPositionListByUnifiedSymbolReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryPositionListByUnifiedSymbolReq;
            })();

            pb.RpcQueryPositionListByUnifiedSymbolRsp = (function() {

                /**
                 * Properties of a RpcQueryPositionListByUnifiedSymbolRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryPositionListByUnifiedSymbolRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryPositionListByUnifiedSymbolRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IPositionField>|null} [position] RpcQueryPositionListByUnifiedSymbolRsp position
                 */

                /**
                 * Constructs a new RpcQueryPositionListByUnifiedSymbolRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryPositionListByUnifiedSymbolRsp.
                 * @implements IRpcQueryPositionListByUnifiedSymbolRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolRsp=} [properties] Properties to set
                 */
                function RpcQueryPositionListByUnifiedSymbolRsp(properties) {
                    this.position = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryPositionListByUnifiedSymbolRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp
                 * @instance
                 */
                RpcQueryPositionListByUnifiedSymbolRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryPositionListByUnifiedSymbolRsp position.
                 * @member {Array.<xyz.redtorch.pb.IPositionField>} position
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp
                 * @instance
                 */
                RpcQueryPositionListByUnifiedSymbolRsp.prototype.position = $util.emptyArray;

                /**
                 * Creates a new RpcQueryPositionListByUnifiedSymbolRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp} RpcQueryPositionListByUnifiedSymbolRsp instance
                 */
                RpcQueryPositionListByUnifiedSymbolRsp.create = function create(properties) {
                    return new RpcQueryPositionListByUnifiedSymbolRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryPositionListByUnifiedSymbolRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolRsp} message RpcQueryPositionListByUnifiedSymbolRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryPositionListByUnifiedSymbolRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.position != null && message.position.length)
                        for (var i = 0; i < message.position.length; ++i)
                            $root.xyz.redtorch.pb.PositionField.encode(message.position[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryPositionListByUnifiedSymbolRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryPositionListByUnifiedSymbolRsp} message RpcQueryPositionListByUnifiedSymbolRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryPositionListByUnifiedSymbolRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryPositionListByUnifiedSymbolRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp} RpcQueryPositionListByUnifiedSymbolRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryPositionListByUnifiedSymbolRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.position && message.position.length))
                                message.position = [];
                            message.position.push($root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryPositionListByUnifiedSymbolRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp} RpcQueryPositionListByUnifiedSymbolRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryPositionListByUnifiedSymbolRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryPositionListByUnifiedSymbolRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryPositionListByUnifiedSymbolRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.position != null && message.hasOwnProperty("position")) {
                        if (!Array.isArray(message.position))
                            return "position: array expected";
                        for (var i = 0; i < message.position.length; ++i) {
                            var error = $root.xyz.redtorch.pb.PositionField.verify(message.position[i]);
                            if (error)
                                return "position." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryPositionListByUnifiedSymbolRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp} RpcQueryPositionListByUnifiedSymbolRsp
                 */
                RpcQueryPositionListByUnifiedSymbolRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.position) {
                        if (!Array.isArray(object.position))
                            throw TypeError(".xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp.position: array expected");
                        message.position = [];
                        for (var i = 0; i < object.position.length; ++i) {
                            if (typeof object.position[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp.position: object expected");
                            message.position[i] = $root.xyz.redtorch.pb.PositionField.fromObject(object.position[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryPositionListByUnifiedSymbolRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp} message RpcQueryPositionListByUnifiedSymbolRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryPositionListByUnifiedSymbolRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.position = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.position && message.position.length) {
                        object.position = [];
                        for (var j = 0; j < message.position.length; ++j)
                            object.position[j] = $root.xyz.redtorch.pb.PositionField.toObject(message.position[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcQueryPositionListByUnifiedSymbolRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryPositionListByUnifiedSymbolRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryPositionListByUnifiedSymbolRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryPositionListByUnifiedSymbolRsp;
            })();

            pb.RpcGetAccountListReq = (function() {

                /**
                 * Properties of a RpcGetAccountListReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetAccountListReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetAccountListReq commonReq
                 */

                /**
                 * Constructs a new RpcGetAccountListReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetAccountListReq.
                 * @implements IRpcGetAccountListReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetAccountListReq=} [properties] Properties to set
                 */
                function RpcGetAccountListReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetAccountListReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq
                 * @instance
                 */
                RpcGetAccountListReq.prototype.commonReq = null;

                /**
                 * Creates a new RpcGetAccountListReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetAccountListReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetAccountListReq} RpcGetAccountListReq instance
                 */
                RpcGetAccountListReq.create = function create(properties) {
                    return new RpcGetAccountListReq(properties);
                };

                /**
                 * Encodes the specified RpcGetAccountListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetAccountListReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetAccountListReq} message RpcGetAccountListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetAccountListReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetAccountListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetAccountListReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetAccountListReq} message RpcGetAccountListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetAccountListReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetAccountListReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetAccountListReq} RpcGetAccountListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetAccountListReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetAccountListReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetAccountListReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetAccountListReq} RpcGetAccountListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetAccountListReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetAccountListReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetAccountListReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetAccountListReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetAccountListReq} RpcGetAccountListReq
                 */
                RpcGetAccountListReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetAccountListReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetAccountListReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetAccountListReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetAccountListReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetAccountListReq} message RpcGetAccountListReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetAccountListReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.commonReq = null;
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    return object;
                };

                /**
                 * Converts this RpcGetAccountListReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetAccountListReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetAccountListReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetAccountListReq;
            })();

            pb.RpcGetAccountListRsp = (function() {

                /**
                 * Properties of a RpcGetAccountListRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetAccountListRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetAccountListRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IAccountField>|null} [account] RpcGetAccountListRsp account
                 */

                /**
                 * Constructs a new RpcGetAccountListRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetAccountListRsp.
                 * @implements IRpcGetAccountListRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetAccountListRsp=} [properties] Properties to set
                 */
                function RpcGetAccountListRsp(properties) {
                    this.account = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetAccountListRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp
                 * @instance
                 */
                RpcGetAccountListRsp.prototype.commonRsp = null;

                /**
                 * RpcGetAccountListRsp account.
                 * @member {Array.<xyz.redtorch.pb.IAccountField>} account
                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp
                 * @instance
                 */
                RpcGetAccountListRsp.prototype.account = $util.emptyArray;

                /**
                 * Creates a new RpcGetAccountListRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetAccountListRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetAccountListRsp} RpcGetAccountListRsp instance
                 */
                RpcGetAccountListRsp.create = function create(properties) {
                    return new RpcGetAccountListRsp(properties);
                };

                /**
                 * Encodes the specified RpcGetAccountListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetAccountListRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetAccountListRsp} message RpcGetAccountListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetAccountListRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.account != null && message.account.length)
                        for (var i = 0; i < message.account.length; ++i)
                            $root.xyz.redtorch.pb.AccountField.encode(message.account[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetAccountListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetAccountListRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetAccountListRsp} message RpcGetAccountListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetAccountListRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetAccountListRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetAccountListRsp} RpcGetAccountListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetAccountListRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetAccountListRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.account && message.account.length))
                                message.account = [];
                            message.account.push($root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetAccountListRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetAccountListRsp} RpcGetAccountListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetAccountListRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetAccountListRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetAccountListRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.account != null && message.hasOwnProperty("account")) {
                        if (!Array.isArray(message.account))
                            return "account: array expected";
                        for (var i = 0; i < message.account.length; ++i) {
                            var error = $root.xyz.redtorch.pb.AccountField.verify(message.account[i]);
                            if (error)
                                return "account." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetAccountListRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetAccountListRsp} RpcGetAccountListRsp
                 */
                RpcGetAccountListRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetAccountListRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetAccountListRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetAccountListRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.account) {
                        if (!Array.isArray(object.account))
                            throw TypeError(".xyz.redtorch.pb.RpcGetAccountListRsp.account: array expected");
                        message.account = [];
                        for (var i = 0; i < object.account.length; ++i) {
                            if (typeof object.account[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcGetAccountListRsp.account: object expected");
                            message.account[i] = $root.xyz.redtorch.pb.AccountField.fromObject(object.account[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetAccountListRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetAccountListRsp} message RpcGetAccountListRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetAccountListRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.account = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.account && message.account.length) {
                        object.account = [];
                        for (var j = 0; j < message.account.length; ++j)
                            object.account[j] = $root.xyz.redtorch.pb.AccountField.toObject(message.account[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcGetAccountListRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetAccountListRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetAccountListRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetAccountListRsp;
            })();

            pb.RpcQueryAccountByAccountIdReq = (function() {

                /**
                 * Properties of a RpcQueryAccountByAccountIdReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryAccountByAccountIdReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryAccountByAccountIdReq commonReq
                 * @property {string|null} [accountId] RpcQueryAccountByAccountIdReq accountId
                 */

                /**
                 * Constructs a new RpcQueryAccountByAccountIdReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryAccountByAccountIdReq.
                 * @implements IRpcQueryAccountByAccountIdReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdReq=} [properties] Properties to set
                 */
                function RpcQueryAccountByAccountIdReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryAccountByAccountIdReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq
                 * @instance
                 */
                RpcQueryAccountByAccountIdReq.prototype.commonReq = null;

                /**
                 * RpcQueryAccountByAccountIdReq accountId.
                 * @member {string} accountId
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq
                 * @instance
                 */
                RpcQueryAccountByAccountIdReq.prototype.accountId = "";

                /**
                 * Creates a new RpcQueryAccountByAccountIdReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} RpcQueryAccountByAccountIdReq instance
                 */
                RpcQueryAccountByAccountIdReq.create = function create(properties) {
                    return new RpcQueryAccountByAccountIdReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryAccountByAccountIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountByAccountIdReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdReq} message RpcQueryAccountByAccountIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryAccountByAccountIdReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryAccountByAccountIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountByAccountIdReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdReq} message RpcQueryAccountByAccountIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryAccountByAccountIdReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryAccountByAccountIdReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} RpcQueryAccountByAccountIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryAccountByAccountIdReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.accountId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryAccountByAccountIdReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} RpcQueryAccountByAccountIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryAccountByAccountIdReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryAccountByAccountIdReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryAccountByAccountIdReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        if (!$util.isString(message.accountId))
                            return "accountId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryAccountByAccountIdReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} RpcQueryAccountByAccountIdReq
                 */
                RpcQueryAccountByAccountIdReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryAccountByAccountIdReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.accountId != null)
                        message.accountId = String(object.accountId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryAccountByAccountIdReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryAccountByAccountIdReq} message RpcQueryAccountByAccountIdReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryAccountByAccountIdReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.accountId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                        object.accountId = message.accountId;
                    return object;
                };

                /**
                 * Converts this RpcQueryAccountByAccountIdReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryAccountByAccountIdReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryAccountByAccountIdReq;
            })();

            pb.RpcQueryAccountByAccountIdRsp = (function() {

                /**
                 * Properties of a RpcQueryAccountByAccountIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryAccountByAccountIdRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryAccountByAccountIdRsp commonRsp
                 * @property {xyz.redtorch.pb.IAccountField|null} [account] RpcQueryAccountByAccountIdRsp account
                 */

                /**
                 * Constructs a new RpcQueryAccountByAccountIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryAccountByAccountIdRsp.
                 * @implements IRpcQueryAccountByAccountIdRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdRsp=} [properties] Properties to set
                 */
                function RpcQueryAccountByAccountIdRsp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryAccountByAccountIdRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp
                 * @instance
                 */
                RpcQueryAccountByAccountIdRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryAccountByAccountIdRsp account.
                 * @member {xyz.redtorch.pb.IAccountField|null|undefined} account
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp
                 * @instance
                 */
                RpcQueryAccountByAccountIdRsp.prototype.account = null;

                /**
                 * Creates a new RpcQueryAccountByAccountIdRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} RpcQueryAccountByAccountIdRsp instance
                 */
                RpcQueryAccountByAccountIdRsp.create = function create(properties) {
                    return new RpcQueryAccountByAccountIdRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryAccountByAccountIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdRsp} message RpcQueryAccountByAccountIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryAccountByAccountIdRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.account != null && message.hasOwnProperty("account"))
                        $root.xyz.redtorch.pb.AccountField.encode(message.account, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryAccountByAccountIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryAccountByAccountIdRsp} message RpcQueryAccountByAccountIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryAccountByAccountIdRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryAccountByAccountIdRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} RpcQueryAccountByAccountIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryAccountByAccountIdRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.account = $root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryAccountByAccountIdRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} RpcQueryAccountByAccountIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryAccountByAccountIdRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryAccountByAccountIdRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryAccountByAccountIdRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.account != null && message.hasOwnProperty("account")) {
                        var error = $root.xyz.redtorch.pb.AccountField.verify(message.account);
                        if (error)
                            return "account." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryAccountByAccountIdRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} RpcQueryAccountByAccountIdRsp
                 */
                RpcQueryAccountByAccountIdRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.account != null) {
                        if (typeof object.account !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp.account: object expected");
                        message.account = $root.xyz.redtorch.pb.AccountField.fromObject(object.account);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryAccountByAccountIdRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp} message RpcQueryAccountByAccountIdRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryAccountByAccountIdRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRsp = null;
                        object.account = null;
                    }
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.account != null && message.hasOwnProperty("account"))
                        object.account = $root.xyz.redtorch.pb.AccountField.toObject(message.account, options);
                    return object;
                };

                /**
                 * Converts this RpcQueryAccountByAccountIdRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryAccountByAccountIdRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryAccountByAccountIdRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryAccountByAccountIdRsp;
            })();

            pb.RpcQueryAccountListByAccountCodeReq = (function() {

                /**
                 * Properties of a RpcQueryAccountListByAccountCodeReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryAccountListByAccountCodeReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryAccountListByAccountCodeReq commonReq
                 * @property {string|null} [accountCode] RpcQueryAccountListByAccountCodeReq accountCode
                 */

                /**
                 * Constructs a new RpcQueryAccountListByAccountCodeReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryAccountListByAccountCodeReq.
                 * @implements IRpcQueryAccountListByAccountCodeReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeReq=} [properties] Properties to set
                 */
                function RpcQueryAccountListByAccountCodeReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryAccountListByAccountCodeReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq
                 * @instance
                 */
                RpcQueryAccountListByAccountCodeReq.prototype.commonReq = null;

                /**
                 * RpcQueryAccountListByAccountCodeReq accountCode.
                 * @member {string} accountCode
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq
                 * @instance
                 */
                RpcQueryAccountListByAccountCodeReq.prototype.accountCode = "";

                /**
                 * Creates a new RpcQueryAccountListByAccountCodeReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} RpcQueryAccountListByAccountCodeReq instance
                 */
                RpcQueryAccountListByAccountCodeReq.create = function create(properties) {
                    return new RpcQueryAccountListByAccountCodeReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryAccountListByAccountCodeReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeReq} message RpcQueryAccountListByAccountCodeReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryAccountListByAccountCodeReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.accountCode != null && message.hasOwnProperty("accountCode"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accountCode);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryAccountListByAccountCodeReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeReq} message RpcQueryAccountListByAccountCodeReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryAccountListByAccountCodeReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryAccountListByAccountCodeReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} RpcQueryAccountListByAccountCodeReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryAccountListByAccountCodeReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.accountCode = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryAccountListByAccountCodeReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} RpcQueryAccountListByAccountCodeReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryAccountListByAccountCodeReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryAccountListByAccountCodeReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryAccountListByAccountCodeReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.accountCode != null && message.hasOwnProperty("accountCode"))
                        if (!$util.isString(message.accountCode))
                            return "accountCode: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryAccountListByAccountCodeReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} RpcQueryAccountListByAccountCodeReq
                 */
                RpcQueryAccountListByAccountCodeReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.accountCode != null)
                        message.accountCode = String(object.accountCode);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryAccountListByAccountCodeReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq} message RpcQueryAccountListByAccountCodeReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryAccountListByAccountCodeReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.accountCode = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.accountCode != null && message.hasOwnProperty("accountCode"))
                        object.accountCode = message.accountCode;
                    return object;
                };

                /**
                 * Converts this RpcQueryAccountListByAccountCodeReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryAccountListByAccountCodeReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryAccountListByAccountCodeReq;
            })();

            pb.RpcQueryAccountListByAccountCodeRsp = (function() {

                /**
                 * Properties of a RpcQueryAccountListByAccountCodeRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryAccountListByAccountCodeRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryAccountListByAccountCodeRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IAccountField>|null} [account] RpcQueryAccountListByAccountCodeRsp account
                 */

                /**
                 * Constructs a new RpcQueryAccountListByAccountCodeRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryAccountListByAccountCodeRsp.
                 * @implements IRpcQueryAccountListByAccountCodeRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeRsp=} [properties] Properties to set
                 */
                function RpcQueryAccountListByAccountCodeRsp(properties) {
                    this.account = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryAccountListByAccountCodeRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp
                 * @instance
                 */
                RpcQueryAccountListByAccountCodeRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryAccountListByAccountCodeRsp account.
                 * @member {Array.<xyz.redtorch.pb.IAccountField>} account
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp
                 * @instance
                 */
                RpcQueryAccountListByAccountCodeRsp.prototype.account = $util.emptyArray;

                /**
                 * Creates a new RpcQueryAccountListByAccountCodeRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} RpcQueryAccountListByAccountCodeRsp instance
                 */
                RpcQueryAccountListByAccountCodeRsp.create = function create(properties) {
                    return new RpcQueryAccountListByAccountCodeRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryAccountListByAccountCodeRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeRsp} message RpcQueryAccountListByAccountCodeRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryAccountListByAccountCodeRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.account != null && message.account.length)
                        for (var i = 0; i < message.account.length; ++i)
                            $root.xyz.redtorch.pb.AccountField.encode(message.account[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryAccountListByAccountCodeRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryAccountListByAccountCodeRsp} message RpcQueryAccountListByAccountCodeRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryAccountListByAccountCodeRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryAccountListByAccountCodeRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} RpcQueryAccountListByAccountCodeRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryAccountListByAccountCodeRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.account && message.account.length))
                                message.account = [];
                            message.account.push($root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryAccountListByAccountCodeRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} RpcQueryAccountListByAccountCodeRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryAccountListByAccountCodeRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryAccountListByAccountCodeRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryAccountListByAccountCodeRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.account != null && message.hasOwnProperty("account")) {
                        if (!Array.isArray(message.account))
                            return "account: array expected";
                        for (var i = 0; i < message.account.length; ++i) {
                            var error = $root.xyz.redtorch.pb.AccountField.verify(message.account[i]);
                            if (error)
                                return "account." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryAccountListByAccountCodeRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} RpcQueryAccountListByAccountCodeRsp
                 */
                RpcQueryAccountListByAccountCodeRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.account) {
                        if (!Array.isArray(object.account))
                            throw TypeError(".xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.account: array expected");
                        message.account = [];
                        for (var i = 0; i < object.account.length; ++i) {
                            if (typeof object.account[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp.account: object expected");
                            message.account[i] = $root.xyz.redtorch.pb.AccountField.fromObject(object.account[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryAccountListByAccountCodeRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp} message RpcQueryAccountListByAccountCodeRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryAccountListByAccountCodeRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.account = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.account && message.account.length) {
                        object.account = [];
                        for (var j = 0; j < message.account.length; ++j)
                            object.account[j] = $root.xyz.redtorch.pb.AccountField.toObject(message.account[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcQueryAccountListByAccountCodeRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryAccountListByAccountCodeRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryAccountListByAccountCodeRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryAccountListByAccountCodeRsp;
            })();

            pb.RpcGetContractListReq = (function() {

                /**
                 * Properties of a RpcGetContractListReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetContractListReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetContractListReq commonReq
                 */

                /**
                 * Constructs a new RpcGetContractListReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetContractListReq.
                 * @implements IRpcGetContractListReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetContractListReq=} [properties] Properties to set
                 */
                function RpcGetContractListReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetContractListReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcGetContractListReq
                 * @instance
                 */
                RpcGetContractListReq.prototype.commonReq = null;

                /**
                 * Creates a new RpcGetContractListReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetContractListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetContractListReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetContractListReq} RpcGetContractListReq instance
                 */
                RpcGetContractListReq.create = function create(properties) {
                    return new RpcGetContractListReq(properties);
                };

                /**
                 * Encodes the specified RpcGetContractListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetContractListReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetContractListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetContractListReq} message RpcGetContractListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetContractListReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetContractListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetContractListReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetContractListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetContractListReq} message RpcGetContractListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetContractListReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetContractListReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetContractListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetContractListReq} RpcGetContractListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetContractListReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetContractListReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetContractListReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetContractListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetContractListReq} RpcGetContractListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetContractListReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetContractListReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetContractListReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetContractListReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetContractListReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetContractListReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetContractListReq} RpcGetContractListReq
                 */
                RpcGetContractListReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetContractListReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetContractListReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetContractListReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetContractListReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetContractListReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetContractListReq} message RpcGetContractListReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetContractListReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.commonReq = null;
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    return object;
                };

                /**
                 * Converts this RpcGetContractListReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetContractListReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetContractListReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetContractListReq;
            })();

            pb.RpcGetContractListRsp = (function() {

                /**
                 * Properties of a RpcGetContractListRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetContractListRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetContractListRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [contract] RpcGetContractListRsp contract
                 */

                /**
                 * Constructs a new RpcGetContractListRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetContractListRsp.
                 * @implements IRpcGetContractListRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetContractListRsp=} [properties] Properties to set
                 */
                function RpcGetContractListRsp(properties) {
                    this.contract = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetContractListRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp
                 * @instance
                 */
                RpcGetContractListRsp.prototype.commonRsp = null;

                /**
                 * RpcGetContractListRsp contract.
                 * @member {Array.<xyz.redtorch.pb.IContractField>} contract
                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp
                 * @instance
                 */
                RpcGetContractListRsp.prototype.contract = $util.emptyArray;

                /**
                 * Creates a new RpcGetContractListRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetContractListRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetContractListRsp} RpcGetContractListRsp instance
                 */
                RpcGetContractListRsp.create = function create(properties) {
                    return new RpcGetContractListRsp(properties);
                };

                /**
                 * Encodes the specified RpcGetContractListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetContractListRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetContractListRsp} message RpcGetContractListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetContractListRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.contract != null && message.contract.length)
                        for (var i = 0; i < message.contract.length; ++i)
                            $root.xyz.redtorch.pb.ContractField.encode(message.contract[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetContractListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetContractListRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetContractListRsp} message RpcGetContractListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetContractListRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetContractListRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetContractListRsp} RpcGetContractListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetContractListRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetContractListRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.contract && message.contract.length))
                                message.contract = [];
                            message.contract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetContractListRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetContractListRsp} RpcGetContractListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetContractListRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetContractListRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetContractListRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        if (!Array.isArray(message.contract))
                            return "contract: array expected";
                        for (var i = 0; i < message.contract.length; ++i) {
                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract[i]);
                            if (error)
                                return "contract." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetContractListRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetContractListRsp} RpcGetContractListRsp
                 */
                RpcGetContractListRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetContractListRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetContractListRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetContractListRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.contract) {
                        if (!Array.isArray(object.contract))
                            throw TypeError(".xyz.redtorch.pb.RpcGetContractListRsp.contract: array expected");
                        message.contract = [];
                        for (var i = 0; i < object.contract.length; ++i) {
                            if (typeof object.contract[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcGetContractListRsp.contract: object expected");
                            message.contract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetContractListRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetContractListRsp} message RpcGetContractListRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetContractListRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.contract = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.contract && message.contract.length) {
                        object.contract = [];
                        for (var j = 0; j < message.contract.length; ++j)
                            object.contract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.contract[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcGetContractListRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetContractListRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetContractListRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetContractListRsp;
            })();

            pb.RpcQueryContractByContractIdReq = (function() {

                /**
                 * Properties of a RpcQueryContractByContractIdReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryContractByContractIdReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryContractByContractIdReq commonReq
                 * @property {string|null} [contractId] RpcQueryContractByContractIdReq contractId
                 */

                /**
                 * Constructs a new RpcQueryContractByContractIdReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryContractByContractIdReq.
                 * @implements IRpcQueryContractByContractIdReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdReq=} [properties] Properties to set
                 */
                function RpcQueryContractByContractIdReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryContractByContractIdReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq
                 * @instance
                 */
                RpcQueryContractByContractIdReq.prototype.commonReq = null;

                /**
                 * RpcQueryContractByContractIdReq contractId.
                 * @member {string} contractId
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq
                 * @instance
                 */
                RpcQueryContractByContractIdReq.prototype.contractId = "";

                /**
                 * Creates a new RpcQueryContractByContractIdReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdReq} RpcQueryContractByContractIdReq instance
                 */
                RpcQueryContractByContractIdReq.create = function create(properties) {
                    return new RpcQueryContractByContractIdReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryContractByContractIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractByContractIdReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdReq} message RpcQueryContractByContractIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryContractByContractIdReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.contractId != null && message.hasOwnProperty("contractId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.contractId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryContractByContractIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractByContractIdReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdReq} message RpcQueryContractByContractIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryContractByContractIdReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryContractByContractIdReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdReq} RpcQueryContractByContractIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryContractByContractIdReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractByContractIdReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.contractId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryContractByContractIdReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdReq} RpcQueryContractByContractIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryContractByContractIdReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryContractByContractIdReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryContractByContractIdReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.contractId != null && message.hasOwnProperty("contractId"))
                        if (!$util.isString(message.contractId))
                            return "contractId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryContractByContractIdReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdReq} RpcQueryContractByContractIdReq
                 */
                RpcQueryContractByContractIdReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractByContractIdReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryContractByContractIdReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryContractByContractIdReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.contractId != null)
                        message.contractId = String(object.contractId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryContractByContractIdReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryContractByContractIdReq} message RpcQueryContractByContractIdReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryContractByContractIdReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.contractId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.contractId != null && message.hasOwnProperty("contractId"))
                        object.contractId = message.contractId;
                    return object;
                };

                /**
                 * Converts this RpcQueryContractByContractIdReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryContractByContractIdReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryContractByContractIdReq;
            })();

            pb.RpcQueryContractByContractIdRsp = (function() {

                /**
                 * Properties of a RpcQueryContractByContractIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryContractByContractIdRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryContractByContractIdRsp commonRsp
                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcQueryContractByContractIdRsp contract
                 */

                /**
                 * Constructs a new RpcQueryContractByContractIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryContractByContractIdRsp.
                 * @implements IRpcQueryContractByContractIdRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdRsp=} [properties] Properties to set
                 */
                function RpcQueryContractByContractIdRsp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryContractByContractIdRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp
                 * @instance
                 */
                RpcQueryContractByContractIdRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryContractByContractIdRsp contract.
                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp
                 * @instance
                 */
                RpcQueryContractByContractIdRsp.prototype.contract = null;

                /**
                 * Creates a new RpcQueryContractByContractIdRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdRsp} RpcQueryContractByContractIdRsp instance
                 */
                RpcQueryContractByContractIdRsp.create = function create(properties) {
                    return new RpcQueryContractByContractIdRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryContractByContractIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractByContractIdRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdRsp} message RpcQueryContractByContractIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryContractByContractIdRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryContractByContractIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractByContractIdRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractByContractIdRsp} message RpcQueryContractByContractIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryContractByContractIdRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryContractByContractIdRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdRsp} RpcQueryContractByContractIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryContractByContractIdRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractByContractIdRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryContractByContractIdRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdRsp} RpcQueryContractByContractIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryContractByContractIdRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryContractByContractIdRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryContractByContractIdRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);
                        if (error)
                            return "contract." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryContractByContractIdRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryContractByContractIdRsp} RpcQueryContractByContractIdRsp
                 */
                RpcQueryContractByContractIdRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractByContractIdRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryContractByContractIdRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryContractByContractIdRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.contract != null) {
                        if (typeof object.contract !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryContractByContractIdRsp.contract: object expected");
                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryContractByContractIdRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryContractByContractIdRsp} message RpcQueryContractByContractIdRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryContractByContractIdRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRsp = null;
                        object.contract = null;
                    }
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);
                    return object;
                };

                /**
                 * Converts this RpcQueryContractByContractIdRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryContractByContractIdRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryContractByContractIdRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryContractByContractIdRsp;
            })();

            pb.RpcQueryContractListByUnifiedSymbolReq = (function() {

                /**
                 * Properties of a RpcQueryContractListByUnifiedSymbolReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryContractListByUnifiedSymbolReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryContractListByUnifiedSymbolReq commonReq
                 * @property {string|null} [unifiedSymbol] RpcQueryContractListByUnifiedSymbolReq unifiedSymbol
                 */

                /**
                 * Constructs a new RpcQueryContractListByUnifiedSymbolReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryContractListByUnifiedSymbolReq.
                 * @implements IRpcQueryContractListByUnifiedSymbolReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolReq=} [properties] Properties to set
                 */
                function RpcQueryContractListByUnifiedSymbolReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryContractListByUnifiedSymbolReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq
                 * @instance
                 */
                RpcQueryContractListByUnifiedSymbolReq.prototype.commonReq = null;

                /**
                 * RpcQueryContractListByUnifiedSymbolReq unifiedSymbol.
                 * @member {string} unifiedSymbol
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq
                 * @instance
                 */
                RpcQueryContractListByUnifiedSymbolReq.prototype.unifiedSymbol = "";

                /**
                 * Creates a new RpcQueryContractListByUnifiedSymbolReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq} RpcQueryContractListByUnifiedSymbolReq instance
                 */
                RpcQueryContractListByUnifiedSymbolReq.create = function create(properties) {
                    return new RpcQueryContractListByUnifiedSymbolReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryContractListByUnifiedSymbolReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolReq} message RpcQueryContractListByUnifiedSymbolReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryContractListByUnifiedSymbolReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.unifiedSymbol);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryContractListByUnifiedSymbolReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolReq} message RpcQueryContractListByUnifiedSymbolReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryContractListByUnifiedSymbolReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryContractListByUnifiedSymbolReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq} RpcQueryContractListByUnifiedSymbolReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryContractListByUnifiedSymbolReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.unifiedSymbol = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryContractListByUnifiedSymbolReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq} RpcQueryContractListByUnifiedSymbolReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryContractListByUnifiedSymbolReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryContractListByUnifiedSymbolReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryContractListByUnifiedSymbolReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        if (!$util.isString(message.unifiedSymbol))
                            return "unifiedSymbol: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryContractListByUnifiedSymbolReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq} RpcQueryContractListByUnifiedSymbolReq
                 */
                RpcQueryContractListByUnifiedSymbolReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.unifiedSymbol != null)
                        message.unifiedSymbol = String(object.unifiedSymbol);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryContractListByUnifiedSymbolReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq} message RpcQueryContractListByUnifiedSymbolReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryContractListByUnifiedSymbolReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.unifiedSymbol = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.unifiedSymbol != null && message.hasOwnProperty("unifiedSymbol"))
                        object.unifiedSymbol = message.unifiedSymbol;
                    return object;
                };

                /**
                 * Converts this RpcQueryContractListByUnifiedSymbolReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryContractListByUnifiedSymbolReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryContractListByUnifiedSymbolReq;
            })();

            pb.RpcQueryContractListByUnifiedSymbolRsp = (function() {

                /**
                 * Properties of a RpcQueryContractListByUnifiedSymbolRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryContractListByUnifiedSymbolRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryContractListByUnifiedSymbolRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [contract] RpcQueryContractListByUnifiedSymbolRsp contract
                 */

                /**
                 * Constructs a new RpcQueryContractListByUnifiedSymbolRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryContractListByUnifiedSymbolRsp.
                 * @implements IRpcQueryContractListByUnifiedSymbolRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolRsp=} [properties] Properties to set
                 */
                function RpcQueryContractListByUnifiedSymbolRsp(properties) {
                    this.contract = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryContractListByUnifiedSymbolRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp
                 * @instance
                 */
                RpcQueryContractListByUnifiedSymbolRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryContractListByUnifiedSymbolRsp contract.
                 * @member {Array.<xyz.redtorch.pb.IContractField>} contract
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp
                 * @instance
                 */
                RpcQueryContractListByUnifiedSymbolRsp.prototype.contract = $util.emptyArray;

                /**
                 * Creates a new RpcQueryContractListByUnifiedSymbolRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp} RpcQueryContractListByUnifiedSymbolRsp instance
                 */
                RpcQueryContractListByUnifiedSymbolRsp.create = function create(properties) {
                    return new RpcQueryContractListByUnifiedSymbolRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryContractListByUnifiedSymbolRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolRsp} message RpcQueryContractListByUnifiedSymbolRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryContractListByUnifiedSymbolRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.contract != null && message.contract.length)
                        for (var i = 0; i < message.contract.length; ++i)
                            $root.xyz.redtorch.pb.ContractField.encode(message.contract[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryContractListByUnifiedSymbolRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByUnifiedSymbolRsp} message RpcQueryContractListByUnifiedSymbolRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryContractListByUnifiedSymbolRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryContractListByUnifiedSymbolRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp} RpcQueryContractListByUnifiedSymbolRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryContractListByUnifiedSymbolRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.contract && message.contract.length))
                                message.contract = [];
                            message.contract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryContractListByUnifiedSymbolRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp} RpcQueryContractListByUnifiedSymbolRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryContractListByUnifiedSymbolRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryContractListByUnifiedSymbolRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryContractListByUnifiedSymbolRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        if (!Array.isArray(message.contract))
                            return "contract: array expected";
                        for (var i = 0; i < message.contract.length; ++i) {
                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract[i]);
                            if (error)
                                return "contract." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryContractListByUnifiedSymbolRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp} RpcQueryContractListByUnifiedSymbolRsp
                 */
                RpcQueryContractListByUnifiedSymbolRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.contract) {
                        if (!Array.isArray(object.contract))
                            throw TypeError(".xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp.contract: array expected");
                        message.contract = [];
                        for (var i = 0; i < object.contract.length; ++i) {
                            if (typeof object.contract[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp.contract: object expected");
                            message.contract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryContractListByUnifiedSymbolRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp} message RpcQueryContractListByUnifiedSymbolRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryContractListByUnifiedSymbolRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.contract = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.contract && message.contract.length) {
                        object.contract = [];
                        for (var j = 0; j < message.contract.length; ++j)
                            object.contract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.contract[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcQueryContractListByUnifiedSymbolRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByUnifiedSymbolRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryContractListByUnifiedSymbolRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryContractListByUnifiedSymbolRsp;
            })();

            pb.RpcQueryContractListByGatewayIdReq = (function() {

                /**
                 * Properties of a RpcQueryContractListByGatewayIdReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryContractListByGatewayIdReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcQueryContractListByGatewayIdReq commonReq
                 * @property {string|null} [gatewayId] RpcQueryContractListByGatewayIdReq gatewayId
                 */

                /**
                 * Constructs a new RpcQueryContractListByGatewayIdReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryContractListByGatewayIdReq.
                 * @implements IRpcQueryContractListByGatewayIdReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdReq=} [properties] Properties to set
                 */
                function RpcQueryContractListByGatewayIdReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryContractListByGatewayIdReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq
                 * @instance
                 */
                RpcQueryContractListByGatewayIdReq.prototype.commonReq = null;

                /**
                 * RpcQueryContractListByGatewayIdReq gatewayId.
                 * @member {string} gatewayId
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq
                 * @instance
                 */
                RpcQueryContractListByGatewayIdReq.prototype.gatewayId = "";

                /**
                 * Creates a new RpcQueryContractListByGatewayIdReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq} RpcQueryContractListByGatewayIdReq instance
                 */
                RpcQueryContractListByGatewayIdReq.create = function create(properties) {
                    return new RpcQueryContractListByGatewayIdReq(properties);
                };

                /**
                 * Encodes the specified RpcQueryContractListByGatewayIdReq message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdReq} message RpcQueryContractListByGatewayIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryContractListByGatewayIdReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.gatewayId);
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryContractListByGatewayIdReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdReq} message RpcQueryContractListByGatewayIdReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryContractListByGatewayIdReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryContractListByGatewayIdReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq} RpcQueryContractListByGatewayIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryContractListByGatewayIdReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.gatewayId = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryContractListByGatewayIdReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq} RpcQueryContractListByGatewayIdReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryContractListByGatewayIdReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryContractListByGatewayIdReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryContractListByGatewayIdReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        if (!$util.isString(message.gatewayId))
                            return "gatewayId: string expected";
                    return null;
                };

                /**
                 * Creates a RpcQueryContractListByGatewayIdReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq} RpcQueryContractListByGatewayIdReq
                 */
                RpcQueryContractListByGatewayIdReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.gatewayId != null)
                        message.gatewayId = String(object.gatewayId);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryContractListByGatewayIdReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq} message RpcQueryContractListByGatewayIdReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryContractListByGatewayIdReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonReq = null;
                        object.gatewayId = "";
                    }
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.gatewayId != null && message.hasOwnProperty("gatewayId"))
                        object.gatewayId = message.gatewayId;
                    return object;
                };

                /**
                 * Converts this RpcQueryContractListByGatewayIdReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryContractListByGatewayIdReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryContractListByGatewayIdReq;
            })();

            pb.RpcQueryContractListByGatewayIdRsp = (function() {

                /**
                 * Properties of a RpcQueryContractListByGatewayIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcQueryContractListByGatewayIdRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcQueryContractListByGatewayIdRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [contract] RpcQueryContractListByGatewayIdRsp contract
                 */

                /**
                 * Constructs a new RpcQueryContractListByGatewayIdRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcQueryContractListByGatewayIdRsp.
                 * @implements IRpcQueryContractListByGatewayIdRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdRsp=} [properties] Properties to set
                 */
                function RpcQueryContractListByGatewayIdRsp(properties) {
                    this.contract = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcQueryContractListByGatewayIdRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp
                 * @instance
                 */
                RpcQueryContractListByGatewayIdRsp.prototype.commonRsp = null;

                /**
                 * RpcQueryContractListByGatewayIdRsp contract.
                 * @member {Array.<xyz.redtorch.pb.IContractField>} contract
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp
                 * @instance
                 */
                RpcQueryContractListByGatewayIdRsp.prototype.contract = $util.emptyArray;

                /**
                 * Creates a new RpcQueryContractListByGatewayIdRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp} RpcQueryContractListByGatewayIdRsp instance
                 */
                RpcQueryContractListByGatewayIdRsp.create = function create(properties) {
                    return new RpcQueryContractListByGatewayIdRsp(properties);
                };

                /**
                 * Encodes the specified RpcQueryContractListByGatewayIdRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdRsp} message RpcQueryContractListByGatewayIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryContractListByGatewayIdRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.contract != null && message.contract.length)
                        for (var i = 0; i < message.contract.length; ++i)
                            $root.xyz.redtorch.pb.ContractField.encode(message.contract[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcQueryContractListByGatewayIdRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcQueryContractListByGatewayIdRsp} message RpcQueryContractListByGatewayIdRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcQueryContractListByGatewayIdRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcQueryContractListByGatewayIdRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp} RpcQueryContractListByGatewayIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryContractListByGatewayIdRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.contract && message.contract.length))
                                message.contract = [];
                            message.contract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcQueryContractListByGatewayIdRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp} RpcQueryContractListByGatewayIdRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcQueryContractListByGatewayIdRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcQueryContractListByGatewayIdRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcQueryContractListByGatewayIdRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        if (!Array.isArray(message.contract))
                            return "contract: array expected";
                        for (var i = 0; i < message.contract.length; ++i) {
                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract[i]);
                            if (error)
                                return "contract." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcQueryContractListByGatewayIdRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp} RpcQueryContractListByGatewayIdRsp
                 */
                RpcQueryContractListByGatewayIdRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.contract) {
                        if (!Array.isArray(object.contract))
                            throw TypeError(".xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp.contract: array expected");
                        message.contract = [];
                        for (var i = 0; i < object.contract.length; ++i) {
                            if (typeof object.contract[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp.contract: object expected");
                            message.contract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcQueryContractListByGatewayIdRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp} message RpcQueryContractListByGatewayIdRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcQueryContractListByGatewayIdRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.contract = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.contract && message.contract.length) {
                        object.contract = [];
                        for (var j = 0; j < message.contract.length; ++j)
                            object.contract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.contract[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcQueryContractListByGatewayIdRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcQueryContractListByGatewayIdRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcQueryContractListByGatewayIdRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcQueryContractListByGatewayIdRsp;
            })();

            pb.RpcSyncSlaveNodeRuntimeDataReq = (function() {

                /**
                 * Properties of a RpcSyncSlaveNodeRuntimeDataReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcSyncSlaveNodeRuntimeDataReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcSyncSlaveNodeRuntimeDataReq commonReq
                 * @property {Array.<xyz.redtorch.pb.IGatewayField>|null} [gateway] RpcSyncSlaveNodeRuntimeDataReq gateway
                 */

                /**
                 * Constructs a new RpcSyncSlaveNodeRuntimeDataReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcSyncSlaveNodeRuntimeDataReq.
                 * @implements IRpcSyncSlaveNodeRuntimeDataReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataReq=} [properties] Properties to set
                 */
                function RpcSyncSlaveNodeRuntimeDataReq(properties) {
                    this.gateway = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcSyncSlaveNodeRuntimeDataReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq
                 * @instance
                 */
                RpcSyncSlaveNodeRuntimeDataReq.prototype.commonReq = null;

                /**
                 * RpcSyncSlaveNodeRuntimeDataReq gateway.
                 * @member {Array.<xyz.redtorch.pb.IGatewayField>} gateway
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq
                 * @instance
                 */
                RpcSyncSlaveNodeRuntimeDataReq.prototype.gateway = $util.emptyArray;

                /**
                 * Creates a new RpcSyncSlaveNodeRuntimeDataReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} RpcSyncSlaveNodeRuntimeDataReq instance
                 */
                RpcSyncSlaveNodeRuntimeDataReq.create = function create(properties) {
                    return new RpcSyncSlaveNodeRuntimeDataReq(properties);
                };

                /**
                 * Encodes the specified RpcSyncSlaveNodeRuntimeDataReq message. Does not implicitly {@link xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataReq} message RpcSyncSlaveNodeRuntimeDataReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSyncSlaveNodeRuntimeDataReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.gateway != null && message.gateway.length)
                        for (var i = 0; i < message.gateway.length; ++i)
                            $root.xyz.redtorch.pb.GatewayField.encode(message.gateway[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcSyncSlaveNodeRuntimeDataReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataReq} message RpcSyncSlaveNodeRuntimeDataReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSyncSlaveNodeRuntimeDataReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcSyncSlaveNodeRuntimeDataReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} RpcSyncSlaveNodeRuntimeDataReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSyncSlaveNodeRuntimeDataReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.gateway && message.gateway.length))
                                message.gateway = [];
                            message.gateway.push($root.xyz.redtorch.pb.GatewayField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcSyncSlaveNodeRuntimeDataReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} RpcSyncSlaveNodeRuntimeDataReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSyncSlaveNodeRuntimeDataReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcSyncSlaveNodeRuntimeDataReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcSyncSlaveNodeRuntimeDataReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    if (message.gateway != null && message.hasOwnProperty("gateway")) {
                        if (!Array.isArray(message.gateway))
                            return "gateway: array expected";
                        for (var i = 0; i < message.gateway.length; ++i) {
                            var error = $root.xyz.redtorch.pb.GatewayField.verify(message.gateway[i]);
                            if (error)
                                return "gateway." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcSyncSlaveNodeRuntimeDataReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} RpcSyncSlaveNodeRuntimeDataReq
                 */
                RpcSyncSlaveNodeRuntimeDataReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    if (object.gateway) {
                        if (!Array.isArray(object.gateway))
                            throw TypeError(".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.gateway: array expected");
                        message.gateway = [];
                        for (var i = 0; i < object.gateway.length; ++i) {
                            if (typeof object.gateway[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq.gateway: object expected");
                            message.gateway[i] = $root.xyz.redtorch.pb.GatewayField.fromObject(object.gateway[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcSyncSlaveNodeRuntimeDataReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq} message RpcSyncSlaveNodeRuntimeDataReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcSyncSlaveNodeRuntimeDataReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.gateway = [];
                    if (options.defaults)
                        object.commonReq = null;
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    if (message.gateway && message.gateway.length) {
                        object.gateway = [];
                        for (var j = 0; j < message.gateway.length; ++j)
                            object.gateway[j] = $root.xyz.redtorch.pb.GatewayField.toObject(message.gateway[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcSyncSlaveNodeRuntimeDataReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcSyncSlaveNodeRuntimeDataReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcSyncSlaveNodeRuntimeDataReq;
            })();

            pb.RpcSyncSlaveNodeRuntimeDataRsp = (function() {

                /**
                 * Properties of a RpcSyncSlaveNodeRuntimeDataRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcSyncSlaveNodeRuntimeDataRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcSyncSlaveNodeRuntimeDataRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IGatewaySettingField>|null} [gatewaySetting] RpcSyncSlaveNodeRuntimeDataRsp gatewaySetting
                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [subscribedContract] RpcSyncSlaveNodeRuntimeDataRsp subscribedContract
                 */

                /**
                 * Constructs a new RpcSyncSlaveNodeRuntimeDataRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcSyncSlaveNodeRuntimeDataRsp.
                 * @implements IRpcSyncSlaveNodeRuntimeDataRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataRsp=} [properties] Properties to set
                 */
                function RpcSyncSlaveNodeRuntimeDataRsp(properties) {
                    this.gatewaySetting = [];
                    this.subscribedContract = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcSyncSlaveNodeRuntimeDataRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp
                 * @instance
                 */
                RpcSyncSlaveNodeRuntimeDataRsp.prototype.commonRsp = null;

                /**
                 * RpcSyncSlaveNodeRuntimeDataRsp gatewaySetting.
                 * @member {Array.<xyz.redtorch.pb.IGatewaySettingField>} gatewaySetting
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp
                 * @instance
                 */
                RpcSyncSlaveNodeRuntimeDataRsp.prototype.gatewaySetting = $util.emptyArray;

                /**
                 * RpcSyncSlaveNodeRuntimeDataRsp subscribedContract.
                 * @member {Array.<xyz.redtorch.pb.IContractField>} subscribedContract
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp
                 * @instance
                 */
                RpcSyncSlaveNodeRuntimeDataRsp.prototype.subscribedContract = $util.emptyArray;

                /**
                 * Creates a new RpcSyncSlaveNodeRuntimeDataRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} RpcSyncSlaveNodeRuntimeDataRsp instance
                 */
                RpcSyncSlaveNodeRuntimeDataRsp.create = function create(properties) {
                    return new RpcSyncSlaveNodeRuntimeDataRsp(properties);
                };

                /**
                 * Encodes the specified RpcSyncSlaveNodeRuntimeDataRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataRsp} message RpcSyncSlaveNodeRuntimeDataRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSyncSlaveNodeRuntimeDataRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.gatewaySetting != null && message.gatewaySetting.length)
                        for (var i = 0; i < message.gatewaySetting.length; ++i)
                            $root.xyz.redtorch.pb.GatewaySettingField.encode(message.gatewaySetting[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.subscribedContract != null && message.subscribedContract.length)
                        for (var i = 0; i < message.subscribedContract.length; ++i)
                            $root.xyz.redtorch.pb.ContractField.encode(message.subscribedContract[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcSyncSlaveNodeRuntimeDataRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcSyncSlaveNodeRuntimeDataRsp} message RpcSyncSlaveNodeRuntimeDataRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcSyncSlaveNodeRuntimeDataRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcSyncSlaveNodeRuntimeDataRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} RpcSyncSlaveNodeRuntimeDataRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSyncSlaveNodeRuntimeDataRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.gatewaySetting && message.gatewaySetting.length))
                                message.gatewaySetting = [];
                            message.gatewaySetting.push($root.xyz.redtorch.pb.GatewaySettingField.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.subscribedContract && message.subscribedContract.length))
                                message.subscribedContract = [];
                            message.subscribedContract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcSyncSlaveNodeRuntimeDataRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} RpcSyncSlaveNodeRuntimeDataRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcSyncSlaveNodeRuntimeDataRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcSyncSlaveNodeRuntimeDataRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcSyncSlaveNodeRuntimeDataRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.gatewaySetting != null && message.hasOwnProperty("gatewaySetting")) {
                        if (!Array.isArray(message.gatewaySetting))
                            return "gatewaySetting: array expected";
                        for (var i = 0; i < message.gatewaySetting.length; ++i) {
                            var error = $root.xyz.redtorch.pb.GatewaySettingField.verify(message.gatewaySetting[i]);
                            if (error)
                                return "gatewaySetting." + error;
                        }
                    }
                    if (message.subscribedContract != null && message.hasOwnProperty("subscribedContract")) {
                        if (!Array.isArray(message.subscribedContract))
                            return "subscribedContract: array expected";
                        for (var i = 0; i < message.subscribedContract.length; ++i) {
                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.subscribedContract[i]);
                            if (error)
                                return "subscribedContract." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcSyncSlaveNodeRuntimeDataRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} RpcSyncSlaveNodeRuntimeDataRsp
                 */
                RpcSyncSlaveNodeRuntimeDataRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.gatewaySetting) {
                        if (!Array.isArray(object.gatewaySetting))
                            throw TypeError(".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.gatewaySetting: array expected");
                        message.gatewaySetting = [];
                        for (var i = 0; i < object.gatewaySetting.length; ++i) {
                            if (typeof object.gatewaySetting[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.gatewaySetting: object expected");
                            message.gatewaySetting[i] = $root.xyz.redtorch.pb.GatewaySettingField.fromObject(object.gatewaySetting[i]);
                        }
                    }
                    if (object.subscribedContract) {
                        if (!Array.isArray(object.subscribedContract))
                            throw TypeError(".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.subscribedContract: array expected");
                        message.subscribedContract = [];
                        for (var i = 0; i < object.subscribedContract.length; ++i) {
                            if (typeof object.subscribedContract[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp.subscribedContract: object expected");
                            message.subscribedContract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.subscribedContract[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcSyncSlaveNodeRuntimeDataRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp} message RpcSyncSlaveNodeRuntimeDataRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcSyncSlaveNodeRuntimeDataRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.gatewaySetting = [];
                        object.subscribedContract = [];
                    }
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.gatewaySetting && message.gatewaySetting.length) {
                        object.gatewaySetting = [];
                        for (var j = 0; j < message.gatewaySetting.length; ++j)
                            object.gatewaySetting[j] = $root.xyz.redtorch.pb.GatewaySettingField.toObject(message.gatewaySetting[j], options);
                    }
                    if (message.subscribedContract && message.subscribedContract.length) {
                        object.subscribedContract = [];
                        for (var j = 0; j < message.subscribedContract.length; ++j)
                            object.subscribedContract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.subscribedContract[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcSyncSlaveNodeRuntimeDataRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcSyncSlaveNodeRuntimeDataRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcSyncSlaveNodeRuntimeDataRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcSyncSlaveNodeRuntimeDataRsp;
            })();

            pb.RpcGetMixContractListReq = (function() {

                /**
                 * Properties of a RpcGetMixContractListReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetMixContractListReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetMixContractListReq commonReq
                 */

                /**
                 * Constructs a new RpcGetMixContractListReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetMixContractListReq.
                 * @implements IRpcGetMixContractListReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetMixContractListReq=} [properties] Properties to set
                 */
                function RpcGetMixContractListReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetMixContractListReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq
                 * @instance
                 */
                RpcGetMixContractListReq.prototype.commonReq = null;

                /**
                 * Creates a new RpcGetMixContractListReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetMixContractListReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetMixContractListReq} RpcGetMixContractListReq instance
                 */
                RpcGetMixContractListReq.create = function create(properties) {
                    return new RpcGetMixContractListReq(properties);
                };

                /**
                 * Encodes the specified RpcGetMixContractListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetMixContractListReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetMixContractListReq} message RpcGetMixContractListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetMixContractListReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetMixContractListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetMixContractListReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetMixContractListReq} message RpcGetMixContractListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetMixContractListReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetMixContractListReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetMixContractListReq} RpcGetMixContractListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetMixContractListReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetMixContractListReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetMixContractListReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetMixContractListReq} RpcGetMixContractListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetMixContractListReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetMixContractListReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetMixContractListReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetMixContractListReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetMixContractListReq} RpcGetMixContractListReq
                 */
                RpcGetMixContractListReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetMixContractListReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetMixContractListReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetMixContractListReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetMixContractListReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetMixContractListReq} message RpcGetMixContractListReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetMixContractListReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.commonReq = null;
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    return object;
                };

                /**
                 * Converts this RpcGetMixContractListReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetMixContractListReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetMixContractListReq;
            })();

            pb.RpcGetMixContractListRsp = (function() {

                /**
                 * Properties of a RpcGetMixContractListRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetMixContractListRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetMixContractListRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [contract] RpcGetMixContractListRsp contract
                 */

                /**
                 * Constructs a new RpcGetMixContractListRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetMixContractListRsp.
                 * @implements IRpcGetMixContractListRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetMixContractListRsp=} [properties] Properties to set
                 */
                function RpcGetMixContractListRsp(properties) {
                    this.contract = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetMixContractListRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp
                 * @instance
                 */
                RpcGetMixContractListRsp.prototype.commonRsp = null;

                /**
                 * RpcGetMixContractListRsp contract.
                 * @member {Array.<xyz.redtorch.pb.IContractField>} contract
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp
                 * @instance
                 */
                RpcGetMixContractListRsp.prototype.contract = $util.emptyArray;

                /**
                 * Creates a new RpcGetMixContractListRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetMixContractListRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetMixContractListRsp} RpcGetMixContractListRsp instance
                 */
                RpcGetMixContractListRsp.create = function create(properties) {
                    return new RpcGetMixContractListRsp(properties);
                };

                /**
                 * Encodes the specified RpcGetMixContractListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetMixContractListRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetMixContractListRsp} message RpcGetMixContractListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetMixContractListRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.contract != null && message.contract.length)
                        for (var i = 0; i < message.contract.length; ++i)
                            $root.xyz.redtorch.pb.ContractField.encode(message.contract[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetMixContractListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetMixContractListRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetMixContractListRsp} message RpcGetMixContractListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetMixContractListRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetMixContractListRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetMixContractListRsp} RpcGetMixContractListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetMixContractListRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetMixContractListRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.contract && message.contract.length))
                                message.contract = [];
                            message.contract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetMixContractListRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetMixContractListRsp} RpcGetMixContractListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetMixContractListRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetMixContractListRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetMixContractListRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        if (!Array.isArray(message.contract))
                            return "contract: array expected";
                        for (var i = 0; i < message.contract.length; ++i) {
                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract[i]);
                            if (error)
                                return "contract." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetMixContractListRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetMixContractListRsp} RpcGetMixContractListRsp
                 */
                RpcGetMixContractListRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetMixContractListRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetMixContractListRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetMixContractListRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.contract) {
                        if (!Array.isArray(object.contract))
                            throw TypeError(".xyz.redtorch.pb.RpcGetMixContractListRsp.contract: array expected");
                        message.contract = [];
                        for (var i = 0; i < object.contract.length; ++i) {
                            if (typeof object.contract[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcGetMixContractListRsp.contract: object expected");
                            message.contract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetMixContractListRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetMixContractListRsp} message RpcGetMixContractListRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetMixContractListRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.contract = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.contract && message.contract.length) {
                        object.contract = [];
                        for (var j = 0; j < message.contract.length; ++j)
                            object.contract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.contract[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcGetMixContractListRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetMixContractListRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetMixContractListRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetMixContractListRsp;
            })();

            pb.RpcGetTickListReq = (function() {

                /**
                 * Properties of a RpcGetTickListReq.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetTickListReq
                 * @property {xyz.redtorch.pb.ICommonReqField|null} [commonReq] RpcGetTickListReq commonReq
                 */

                /**
                 * Constructs a new RpcGetTickListReq.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetTickListReq.
                 * @implements IRpcGetTickListReq
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetTickListReq=} [properties] Properties to set
                 */
                function RpcGetTickListReq(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetTickListReq commonReq.
                 * @member {xyz.redtorch.pb.ICommonReqField|null|undefined} commonReq
                 * @memberof xyz.redtorch.pb.RpcGetTickListReq
                 * @instance
                 */
                RpcGetTickListReq.prototype.commonReq = null;

                /**
                 * Creates a new RpcGetTickListReq instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetTickListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetTickListReq=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetTickListReq} RpcGetTickListReq instance
                 */
                RpcGetTickListReq.create = function create(properties) {
                    return new RpcGetTickListReq(properties);
                };

                /**
                 * Encodes the specified RpcGetTickListReq message. Does not implicitly {@link xyz.redtorch.pb.RpcGetTickListReq.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetTickListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetTickListReq} message RpcGetTickListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetTickListReq.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        $root.xyz.redtorch.pb.CommonReqField.encode(message.commonReq, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetTickListReq message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetTickListReq.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetTickListReq
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetTickListReq} message RpcGetTickListReq message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetTickListReq.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetTickListReq message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetTickListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetTickListReq} RpcGetTickListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetTickListReq.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetTickListReq();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonReq = $root.xyz.redtorch.pb.CommonReqField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetTickListReq message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetTickListReq
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetTickListReq} RpcGetTickListReq
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetTickListReq.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetTickListReq message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetTickListReq
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetTickListReq.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonReq != null && message.hasOwnProperty("commonReq")) {
                        var error = $root.xyz.redtorch.pb.CommonReqField.verify(message.commonReq);
                        if (error)
                            return "commonReq." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetTickListReq message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetTickListReq
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetTickListReq} RpcGetTickListReq
                 */
                RpcGetTickListReq.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetTickListReq)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetTickListReq();
                    if (object.commonReq != null) {
                        if (typeof object.commonReq !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetTickListReq.commonReq: object expected");
                        message.commonReq = $root.xyz.redtorch.pb.CommonReqField.fromObject(object.commonReq);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetTickListReq message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetTickListReq
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetTickListReq} message RpcGetTickListReq
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetTickListReq.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.commonReq = null;
                    if (message.commonReq != null && message.hasOwnProperty("commonReq"))
                        object.commonReq = $root.xyz.redtorch.pb.CommonReqField.toObject(message.commonReq, options);
                    return object;
                };

                /**
                 * Converts this RpcGetTickListReq to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetTickListReq
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetTickListReq.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetTickListReq;
            })();

            pb.RpcGetTickListRsp = (function() {

                /**
                 * Properties of a RpcGetTickListRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcGetTickListRsp
                 * @property {xyz.redtorch.pb.ICommonRspField|null} [commonRsp] RpcGetTickListRsp commonRsp
                 * @property {Array.<xyz.redtorch.pb.ITickField>|null} [tick] RpcGetTickListRsp tick
                 */

                /**
                 * Constructs a new RpcGetTickListRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcGetTickListRsp.
                 * @implements IRpcGetTickListRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcGetTickListRsp=} [properties] Properties to set
                 */
                function RpcGetTickListRsp(properties) {
                    this.tick = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcGetTickListRsp commonRsp.
                 * @member {xyz.redtorch.pb.ICommonRspField|null|undefined} commonRsp
                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp
                 * @instance
                 */
                RpcGetTickListRsp.prototype.commonRsp = null;

                /**
                 * RpcGetTickListRsp tick.
                 * @member {Array.<xyz.redtorch.pb.ITickField>} tick
                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp
                 * @instance
                 */
                RpcGetTickListRsp.prototype.tick = $util.emptyArray;

                /**
                 * Creates a new RpcGetTickListRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetTickListRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcGetTickListRsp} RpcGetTickListRsp instance
                 */
                RpcGetTickListRsp.create = function create(properties) {
                    return new RpcGetTickListRsp(properties);
                };

                /**
                 * Encodes the specified RpcGetTickListRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcGetTickListRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetTickListRsp} message RpcGetTickListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetTickListRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        $root.xyz.redtorch.pb.CommonRspField.encode(message.commonRsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.tick != null && message.tick.length)
                        for (var i = 0; i < message.tick.length; ++i)
                            $root.xyz.redtorch.pb.TickField.encode(message.tick[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcGetTickListRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcGetTickListRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcGetTickListRsp} message RpcGetTickListRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcGetTickListRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcGetTickListRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcGetTickListRsp} RpcGetTickListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetTickListRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcGetTickListRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.tick && message.tick.length))
                                message.tick = [];
                            message.tick.push($root.xyz.redtorch.pb.TickField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcGetTickListRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcGetTickListRsp} RpcGetTickListRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcGetTickListRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcGetTickListRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcGetTickListRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp")) {
                        var error = $root.xyz.redtorch.pb.CommonRspField.verify(message.commonRsp);
                        if (error)
                            return "commonRsp." + error;
                    }
                    if (message.tick != null && message.hasOwnProperty("tick")) {
                        if (!Array.isArray(message.tick))
                            return "tick: array expected";
                        for (var i = 0; i < message.tick.length; ++i) {
                            var error = $root.xyz.redtorch.pb.TickField.verify(message.tick[i]);
                            if (error)
                                return "tick." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcGetTickListRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcGetTickListRsp} RpcGetTickListRsp
                 */
                RpcGetTickListRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcGetTickListRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcGetTickListRsp();
                    if (object.commonRsp != null) {
                        if (typeof object.commonRsp !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcGetTickListRsp.commonRsp: object expected");
                        message.commonRsp = $root.xyz.redtorch.pb.CommonRspField.fromObject(object.commonRsp);
                    }
                    if (object.tick) {
                        if (!Array.isArray(object.tick))
                            throw TypeError(".xyz.redtorch.pb.RpcGetTickListRsp.tick: array expected");
                        message.tick = [];
                        for (var i = 0; i < object.tick.length; ++i) {
                            if (typeof object.tick[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcGetTickListRsp.tick: object expected");
                            message.tick[i] = $root.xyz.redtorch.pb.TickField.fromObject(object.tick[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcGetTickListRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcGetTickListRsp} message RpcGetTickListRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcGetTickListRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.tick = [];
                    if (options.defaults)
                        object.commonRsp = null;
                    if (message.commonRsp != null && message.hasOwnProperty("commonRsp"))
                        object.commonRsp = $root.xyz.redtorch.pb.CommonRspField.toObject(message.commonRsp, options);
                    if (message.tick && message.tick.length) {
                        object.tick = [];
                        for (var j = 0; j < message.tick.length; ++j)
                            object.tick[j] = $root.xyz.redtorch.pb.TickField.toObject(message.tick[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcGetTickListRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcGetTickListRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcGetTickListRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcGetTickListRsp;
            })();

            pb.RpcExceptionRsp = (function() {

                /**
                 * Properties of a RpcExceptionRsp.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcExceptionRsp
                 * @property {number|null} [originalRpcId] RpcExceptionRsp originalRpcId
                 * @property {string|null} [originalReqId] RpcExceptionRsp originalReqId
                 * @property {number|Long|null} [originalTimestamp] RpcExceptionRsp originalTimestamp
                 * @property {string|null} [info] RpcExceptionRsp info
                 */

                /**
                 * Constructs a new RpcExceptionRsp.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcExceptionRsp.
                 * @implements IRpcExceptionRsp
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcExceptionRsp=} [properties] Properties to set
                 */
                function RpcExceptionRsp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcExceptionRsp originalRpcId.
                 * @member {number} originalRpcId
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @instance
                 */
                RpcExceptionRsp.prototype.originalRpcId = 0;

                /**
                 * RpcExceptionRsp originalReqId.
                 * @member {string} originalReqId
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @instance
                 */
                RpcExceptionRsp.prototype.originalReqId = "";

                /**
                 * RpcExceptionRsp originalTimestamp.
                 * @member {number|Long} originalTimestamp
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @instance
                 */
                RpcExceptionRsp.prototype.originalTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * RpcExceptionRsp info.
                 * @member {string} info
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @instance
                 */
                RpcExceptionRsp.prototype.info = "";

                /**
                 * Creates a new RpcExceptionRsp instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcExceptionRsp=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcExceptionRsp} RpcExceptionRsp instance
                 */
                RpcExceptionRsp.create = function create(properties) {
                    return new RpcExceptionRsp(properties);
                };

                /**
                 * Encodes the specified RpcExceptionRsp message. Does not implicitly {@link xyz.redtorch.pb.RpcExceptionRsp.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcExceptionRsp} message RpcExceptionRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcExceptionRsp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.originalRpcId != null && message.hasOwnProperty("originalRpcId"))
                        writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.originalRpcId);
                    if (message.originalReqId != null && message.hasOwnProperty("originalReqId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.originalReqId);
                    if (message.originalTimestamp != null && message.hasOwnProperty("originalTimestamp"))
                        writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.originalTimestamp);
                    if (message.info != null && message.hasOwnProperty("info"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                    return writer;
                };

                /**
                 * Encodes the specified RpcExceptionRsp message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcExceptionRsp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @static
                 * @param {xyz.redtorch.pb.IRpcExceptionRsp} message RpcExceptionRsp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcExceptionRsp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcExceptionRsp message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcExceptionRsp} RpcExceptionRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcExceptionRsp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcExceptionRsp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.originalRpcId = reader.fixed32();
                            break;
                        case 2:
                            message.originalReqId = reader.string();
                            break;
                        case 3:
                            message.originalTimestamp = reader.fixed64();
                            break;
                        case 4:
                            message.info = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcExceptionRsp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcExceptionRsp} RpcExceptionRsp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcExceptionRsp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcExceptionRsp message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcExceptionRsp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.originalRpcId != null && message.hasOwnProperty("originalRpcId"))
                        if (!$util.isInteger(message.originalRpcId))
                            return "originalRpcId: integer expected";
                    if (message.originalReqId != null && message.hasOwnProperty("originalReqId"))
                        if (!$util.isString(message.originalReqId))
                            return "originalReqId: string expected";
                    if (message.originalTimestamp != null && message.hasOwnProperty("originalTimestamp"))
                        if (!$util.isInteger(message.originalTimestamp) && !(message.originalTimestamp && $util.isInteger(message.originalTimestamp.low) && $util.isInteger(message.originalTimestamp.high)))
                            return "originalTimestamp: integer|Long expected";
                    if (message.info != null && message.hasOwnProperty("info"))
                        if (!$util.isString(message.info))
                            return "info: string expected";
                    return null;
                };

                /**
                 * Creates a RpcExceptionRsp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcExceptionRsp} RpcExceptionRsp
                 */
                RpcExceptionRsp.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcExceptionRsp)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcExceptionRsp();
                    if (object.originalRpcId != null)
                        message.originalRpcId = object.originalRpcId >>> 0;
                    if (object.originalReqId != null)
                        message.originalReqId = String(object.originalReqId);
                    if (object.originalTimestamp != null)
                        if ($util.Long)
                            (message.originalTimestamp = $util.Long.fromValue(object.originalTimestamp)).unsigned = false;
                        else if (typeof object.originalTimestamp === "string")
                            message.originalTimestamp = parseInt(object.originalTimestamp, 10);
                        else if (typeof object.originalTimestamp === "number")
                            message.originalTimestamp = object.originalTimestamp;
                        else if (typeof object.originalTimestamp === "object")
                            message.originalTimestamp = new $util.LongBits(object.originalTimestamp.low >>> 0, object.originalTimestamp.high >>> 0).toNumber();
                    if (object.info != null)
                        message.info = String(object.info);
                    return message;
                };

                /**
                 * Creates a plain object from a RpcExceptionRsp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @static
                 * @param {xyz.redtorch.pb.RpcExceptionRsp} message RpcExceptionRsp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcExceptionRsp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.originalRpcId = 0;
                        object.originalReqId = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.originalTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.originalTimestamp = options.longs === String ? "0" : 0;
                        object.info = "";
                    }
                    if (message.originalRpcId != null && message.hasOwnProperty("originalRpcId"))
                        object.originalRpcId = message.originalRpcId;
                    if (message.originalReqId != null && message.hasOwnProperty("originalReqId"))
                        object.originalReqId = message.originalReqId;
                    if (message.originalTimestamp != null && message.hasOwnProperty("originalTimestamp"))
                        if (typeof message.originalTimestamp === "number")
                            object.originalTimestamp = options.longs === String ? String(message.originalTimestamp) : message.originalTimestamp;
                        else
                            object.originalTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.originalTimestamp) : options.longs === Number ? new $util.LongBits(message.originalTimestamp.low >>> 0, message.originalTimestamp.high >>> 0).toNumber() : message.originalTimestamp;
                    if (message.info != null && message.hasOwnProperty("info"))
                        object.info = message.info;
                    return object;
                };

                /**
                 * Converts this RpcExceptionRsp to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcExceptionRsp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcExceptionRsp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcExceptionRsp;
            })();

            pb.RpcOrderRtn = (function() {

                /**
                 * Properties of a RpcOrderRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcOrderRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcOrderRtn commonRtn
                 * @property {xyz.redtorch.pb.IOrderField|null} [order] RpcOrderRtn order
                 */

                /**
                 * Constructs a new RpcOrderRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcOrderRtn.
                 * @implements IRpcOrderRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcOrderRtn=} [properties] Properties to set
                 */
                function RpcOrderRtn(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcOrderRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcOrderRtn
                 * @instance
                 */
                RpcOrderRtn.prototype.commonRtn = null;

                /**
                 * RpcOrderRtn order.
                 * @member {xyz.redtorch.pb.IOrderField|null|undefined} order
                 * @memberof xyz.redtorch.pb.RpcOrderRtn
                 * @instance
                 */
                RpcOrderRtn.prototype.order = null;

                /**
                 * Creates a new RpcOrderRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcOrderRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcOrderRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcOrderRtn} RpcOrderRtn instance
                 */
                RpcOrderRtn.create = function create(properties) {
                    return new RpcOrderRtn(properties);
                };

                /**
                 * Encodes the specified RpcOrderRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcOrderRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcOrderRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcOrderRtn} message RpcOrderRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcOrderRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.order != null && message.hasOwnProperty("order"))
                        $root.xyz.redtorch.pb.OrderField.encode(message.order, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcOrderRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcOrderRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcOrderRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcOrderRtn} message RpcOrderRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcOrderRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcOrderRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcOrderRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcOrderRtn} RpcOrderRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcOrderRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcOrderRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.order = $root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcOrderRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcOrderRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcOrderRtn} RpcOrderRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcOrderRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcOrderRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcOrderRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcOrderRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.order != null && message.hasOwnProperty("order")) {
                        var error = $root.xyz.redtorch.pb.OrderField.verify(message.order);
                        if (error)
                            return "order." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcOrderRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcOrderRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcOrderRtn} RpcOrderRtn
                 */
                RpcOrderRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcOrderRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcOrderRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcOrderRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.order != null) {
                        if (typeof object.order !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcOrderRtn.order: object expected");
                        message.order = $root.xyz.redtorch.pb.OrderField.fromObject(object.order);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcOrderRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcOrderRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcOrderRtn} message RpcOrderRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcOrderRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRtn = null;
                        object.order = null;
                    }
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.order != null && message.hasOwnProperty("order"))
                        object.order = $root.xyz.redtorch.pb.OrderField.toObject(message.order, options);
                    return object;
                };

                /**
                 * Converts this RpcOrderRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcOrderRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcOrderRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcOrderRtn;
            })();

            pb.RpcTradeRtn = (function() {

                /**
                 * Properties of a RpcTradeRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcTradeRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcTradeRtn commonRtn
                 * @property {xyz.redtorch.pb.ITradeField|null} [trade] RpcTradeRtn trade
                 */

                /**
                 * Constructs a new RpcTradeRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcTradeRtn.
                 * @implements IRpcTradeRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcTradeRtn=} [properties] Properties to set
                 */
                function RpcTradeRtn(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcTradeRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcTradeRtn
                 * @instance
                 */
                RpcTradeRtn.prototype.commonRtn = null;

                /**
                 * RpcTradeRtn trade.
                 * @member {xyz.redtorch.pb.ITradeField|null|undefined} trade
                 * @memberof xyz.redtorch.pb.RpcTradeRtn
                 * @instance
                 */
                RpcTradeRtn.prototype.trade = null;

                /**
                 * Creates a new RpcTradeRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcTradeRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcTradeRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcTradeRtn} RpcTradeRtn instance
                 */
                RpcTradeRtn.create = function create(properties) {
                    return new RpcTradeRtn(properties);
                };

                /**
                 * Encodes the specified RpcTradeRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcTradeRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcTradeRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcTradeRtn} message RpcTradeRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcTradeRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.trade != null && message.hasOwnProperty("trade"))
                        $root.xyz.redtorch.pb.TradeField.encode(message.trade, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcTradeRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcTradeRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcTradeRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcTradeRtn} message RpcTradeRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcTradeRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcTradeRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcTradeRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcTradeRtn} RpcTradeRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcTradeRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcTradeRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.trade = $root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcTradeRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcTradeRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcTradeRtn} RpcTradeRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcTradeRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcTradeRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcTradeRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcTradeRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.trade != null && message.hasOwnProperty("trade")) {
                        var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade);
                        if (error)
                            return "trade." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcTradeRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcTradeRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcTradeRtn} RpcTradeRtn
                 */
                RpcTradeRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcTradeRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcTradeRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcTradeRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.trade != null) {
                        if (typeof object.trade !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcTradeRtn.trade: object expected");
                        message.trade = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcTradeRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcTradeRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcTradeRtn} message RpcTradeRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcTradeRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRtn = null;
                        object.trade = null;
                    }
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.trade != null && message.hasOwnProperty("trade"))
                        object.trade = $root.xyz.redtorch.pb.TradeField.toObject(message.trade, options);
                    return object;
                };

                /**
                 * Converts this RpcTradeRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcTradeRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcTradeRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcTradeRtn;
            })();

            pb.RpcContractRtn = (function() {

                /**
                 * Properties of a RpcContractRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcContractRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcContractRtn commonRtn
                 * @property {xyz.redtorch.pb.IContractField|null} [contract] RpcContractRtn contract
                 */

                /**
                 * Constructs a new RpcContractRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcContractRtn.
                 * @implements IRpcContractRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcContractRtn=} [properties] Properties to set
                 */
                function RpcContractRtn(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcContractRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcContractRtn
                 * @instance
                 */
                RpcContractRtn.prototype.commonRtn = null;

                /**
                 * RpcContractRtn contract.
                 * @member {xyz.redtorch.pb.IContractField|null|undefined} contract
                 * @memberof xyz.redtorch.pb.RpcContractRtn
                 * @instance
                 */
                RpcContractRtn.prototype.contract = null;

                /**
                 * Creates a new RpcContractRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcContractRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcContractRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcContractRtn} RpcContractRtn instance
                 */
                RpcContractRtn.create = function create(properties) {
                    return new RpcContractRtn(properties);
                };

                /**
                 * Encodes the specified RpcContractRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcContractRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcContractRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcContractRtn} message RpcContractRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcContractRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        $root.xyz.redtorch.pb.ContractField.encode(message.contract, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcContractRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcContractRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcContractRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcContractRtn} message RpcContractRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcContractRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcContractRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcContractRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcContractRtn} RpcContractRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcContractRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcContractRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.contract = $root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcContractRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcContractRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcContractRtn} RpcContractRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcContractRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcContractRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcContractRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcContractRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract);
                        if (error)
                            return "contract." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcContractRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcContractRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcContractRtn} RpcContractRtn
                 */
                RpcContractRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcContractRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcContractRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcContractRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.contract != null) {
                        if (typeof object.contract !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcContractRtn.contract: object expected");
                        message.contract = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcContractRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcContractRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcContractRtn} message RpcContractRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcContractRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRtn = null;
                        object.contract = null;
                    }
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = $root.xyz.redtorch.pb.ContractField.toObject(message.contract, options);
                    return object;
                };

                /**
                 * Converts this RpcContractRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcContractRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcContractRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcContractRtn;
            })();

            pb.RpcPositionRtn = (function() {

                /**
                 * Properties of a RpcPositionRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcPositionRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcPositionRtn commonRtn
                 * @property {xyz.redtorch.pb.IPositionField|null} [position] RpcPositionRtn position
                 */

                /**
                 * Constructs a new RpcPositionRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcPositionRtn.
                 * @implements IRpcPositionRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcPositionRtn=} [properties] Properties to set
                 */
                function RpcPositionRtn(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcPositionRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcPositionRtn
                 * @instance
                 */
                RpcPositionRtn.prototype.commonRtn = null;

                /**
                 * RpcPositionRtn position.
                 * @member {xyz.redtorch.pb.IPositionField|null|undefined} position
                 * @memberof xyz.redtorch.pb.RpcPositionRtn
                 * @instance
                 */
                RpcPositionRtn.prototype.position = null;

                /**
                 * Creates a new RpcPositionRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcPositionRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcPositionRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcPositionRtn} RpcPositionRtn instance
                 */
                RpcPositionRtn.create = function create(properties) {
                    return new RpcPositionRtn(properties);
                };

                /**
                 * Encodes the specified RpcPositionRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcPositionRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcPositionRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcPositionRtn} message RpcPositionRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcPositionRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.position != null && message.hasOwnProperty("position"))
                        $root.xyz.redtorch.pb.PositionField.encode(message.position, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcPositionRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcPositionRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcPositionRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcPositionRtn} message RpcPositionRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcPositionRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcPositionRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcPositionRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcPositionRtn} RpcPositionRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcPositionRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcPositionRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.position = $root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcPositionRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcPositionRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcPositionRtn} RpcPositionRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcPositionRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcPositionRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcPositionRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcPositionRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.position != null && message.hasOwnProperty("position")) {
                        var error = $root.xyz.redtorch.pb.PositionField.verify(message.position);
                        if (error)
                            return "position." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcPositionRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcPositionRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcPositionRtn} RpcPositionRtn
                 */
                RpcPositionRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcPositionRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcPositionRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcPositionRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.position != null) {
                        if (typeof object.position !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcPositionRtn.position: object expected");
                        message.position = $root.xyz.redtorch.pb.PositionField.fromObject(object.position);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcPositionRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcPositionRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcPositionRtn} message RpcPositionRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcPositionRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRtn = null;
                        object.position = null;
                    }
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.position != null && message.hasOwnProperty("position"))
                        object.position = $root.xyz.redtorch.pb.PositionField.toObject(message.position, options);
                    return object;
                };

                /**
                 * Converts this RpcPositionRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcPositionRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcPositionRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcPositionRtn;
            })();

            pb.RpcAccountRtn = (function() {

                /**
                 * Properties of a RpcAccountRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcAccountRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcAccountRtn commonRtn
                 * @property {xyz.redtorch.pb.IAccountField|null} [account] RpcAccountRtn account
                 */

                /**
                 * Constructs a new RpcAccountRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcAccountRtn.
                 * @implements IRpcAccountRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcAccountRtn=} [properties] Properties to set
                 */
                function RpcAccountRtn(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcAccountRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcAccountRtn
                 * @instance
                 */
                RpcAccountRtn.prototype.commonRtn = null;

                /**
                 * RpcAccountRtn account.
                 * @member {xyz.redtorch.pb.IAccountField|null|undefined} account
                 * @memberof xyz.redtorch.pb.RpcAccountRtn
                 * @instance
                 */
                RpcAccountRtn.prototype.account = null;

                /**
                 * Creates a new RpcAccountRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcAccountRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcAccountRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcAccountRtn} RpcAccountRtn instance
                 */
                RpcAccountRtn.create = function create(properties) {
                    return new RpcAccountRtn(properties);
                };

                /**
                 * Encodes the specified RpcAccountRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcAccountRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcAccountRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcAccountRtn} message RpcAccountRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcAccountRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.account != null && message.hasOwnProperty("account"))
                        $root.xyz.redtorch.pb.AccountField.encode(message.account, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcAccountRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcAccountRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcAccountRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcAccountRtn} message RpcAccountRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcAccountRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcAccountRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcAccountRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcAccountRtn} RpcAccountRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcAccountRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcAccountRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.account = $root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcAccountRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcAccountRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcAccountRtn} RpcAccountRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcAccountRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcAccountRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcAccountRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcAccountRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.account != null && message.hasOwnProperty("account")) {
                        var error = $root.xyz.redtorch.pb.AccountField.verify(message.account);
                        if (error)
                            return "account." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcAccountRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcAccountRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcAccountRtn} RpcAccountRtn
                 */
                RpcAccountRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcAccountRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcAccountRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcAccountRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.account != null) {
                        if (typeof object.account !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcAccountRtn.account: object expected");
                        message.account = $root.xyz.redtorch.pb.AccountField.fromObject(object.account);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcAccountRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcAccountRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcAccountRtn} message RpcAccountRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcAccountRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRtn = null;
                        object.account = null;
                    }
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.account != null && message.hasOwnProperty("account"))
                        object.account = $root.xyz.redtorch.pb.AccountField.toObject(message.account, options);
                    return object;
                };

                /**
                 * Converts this RpcAccountRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcAccountRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcAccountRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcAccountRtn;
            })();

            pb.RpcTickRtn = (function() {

                /**
                 * Properties of a RpcTickRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcTickRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcTickRtn commonRtn
                 * @property {xyz.redtorch.pb.ITickField|null} [tick] RpcTickRtn tick
                 */

                /**
                 * Constructs a new RpcTickRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcTickRtn.
                 * @implements IRpcTickRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcTickRtn=} [properties] Properties to set
                 */
                function RpcTickRtn(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcTickRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcTickRtn
                 * @instance
                 */
                RpcTickRtn.prototype.commonRtn = null;

                /**
                 * RpcTickRtn tick.
                 * @member {xyz.redtorch.pb.ITickField|null|undefined} tick
                 * @memberof xyz.redtorch.pb.RpcTickRtn
                 * @instance
                 */
                RpcTickRtn.prototype.tick = null;

                /**
                 * Creates a new RpcTickRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcTickRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcTickRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcTickRtn} RpcTickRtn instance
                 */
                RpcTickRtn.create = function create(properties) {
                    return new RpcTickRtn(properties);
                };

                /**
                 * Encodes the specified RpcTickRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcTickRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcTickRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcTickRtn} message RpcTickRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcTickRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.tick != null && message.hasOwnProperty("tick"))
                        $root.xyz.redtorch.pb.TickField.encode(message.tick, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcTickRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcTickRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcTickRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcTickRtn} message RpcTickRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcTickRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcTickRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcTickRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcTickRtn} RpcTickRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcTickRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcTickRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.tick = $root.xyz.redtorch.pb.TickField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcTickRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcTickRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcTickRtn} RpcTickRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcTickRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcTickRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcTickRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcTickRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.tick != null && message.hasOwnProperty("tick")) {
                        var error = $root.xyz.redtorch.pb.TickField.verify(message.tick);
                        if (error)
                            return "tick." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcTickRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcTickRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcTickRtn} RpcTickRtn
                 */
                RpcTickRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcTickRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcTickRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcTickRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.tick != null) {
                        if (typeof object.tick !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcTickRtn.tick: object expected");
                        message.tick = $root.xyz.redtorch.pb.TickField.fromObject(object.tick);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcTickRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcTickRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcTickRtn} message RpcTickRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcTickRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRtn = null;
                        object.tick = null;
                    }
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.tick != null && message.hasOwnProperty("tick"))
                        object.tick = $root.xyz.redtorch.pb.TickField.toObject(message.tick, options);
                    return object;
                };

                /**
                 * Converts this RpcTickRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcTickRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcTickRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcTickRtn;
            })();

            pb.RpcOrderListRtn = (function() {

                /**
                 * Properties of a RpcOrderListRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcOrderListRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcOrderListRtn commonRtn
                 * @property {Array.<xyz.redtorch.pb.IOrderField>|null} [order] RpcOrderListRtn order
                 */

                /**
                 * Constructs a new RpcOrderListRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcOrderListRtn.
                 * @implements IRpcOrderListRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcOrderListRtn=} [properties] Properties to set
                 */
                function RpcOrderListRtn(properties) {
                    this.order = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcOrderListRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcOrderListRtn
                 * @instance
                 */
                RpcOrderListRtn.prototype.commonRtn = null;

                /**
                 * RpcOrderListRtn order.
                 * @member {Array.<xyz.redtorch.pb.IOrderField>} order
                 * @memberof xyz.redtorch.pb.RpcOrderListRtn
                 * @instance
                 */
                RpcOrderListRtn.prototype.order = $util.emptyArray;

                /**
                 * Creates a new RpcOrderListRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcOrderListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcOrderListRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcOrderListRtn} RpcOrderListRtn instance
                 */
                RpcOrderListRtn.create = function create(properties) {
                    return new RpcOrderListRtn(properties);
                };

                /**
                 * Encodes the specified RpcOrderListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcOrderListRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcOrderListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcOrderListRtn} message RpcOrderListRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcOrderListRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.order != null && message.order.length)
                        for (var i = 0; i < message.order.length; ++i)
                            $root.xyz.redtorch.pb.OrderField.encode(message.order[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcOrderListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcOrderListRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcOrderListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcOrderListRtn} message RpcOrderListRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcOrderListRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcOrderListRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcOrderListRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcOrderListRtn} RpcOrderListRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcOrderListRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcOrderListRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.order && message.order.length))
                                message.order = [];
                            message.order.push($root.xyz.redtorch.pb.OrderField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcOrderListRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcOrderListRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcOrderListRtn} RpcOrderListRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcOrderListRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcOrderListRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcOrderListRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcOrderListRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.order != null && message.hasOwnProperty("order")) {
                        if (!Array.isArray(message.order))
                            return "order: array expected";
                        for (var i = 0; i < message.order.length; ++i) {
                            var error = $root.xyz.redtorch.pb.OrderField.verify(message.order[i]);
                            if (error)
                                return "order." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcOrderListRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcOrderListRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcOrderListRtn} RpcOrderListRtn
                 */
                RpcOrderListRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcOrderListRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcOrderListRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcOrderListRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.order) {
                        if (!Array.isArray(object.order))
                            throw TypeError(".xyz.redtorch.pb.RpcOrderListRtn.order: array expected");
                        message.order = [];
                        for (var i = 0; i < object.order.length; ++i) {
                            if (typeof object.order[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcOrderListRtn.order: object expected");
                            message.order[i] = $root.xyz.redtorch.pb.OrderField.fromObject(object.order[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcOrderListRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcOrderListRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcOrderListRtn} message RpcOrderListRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcOrderListRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.order = [];
                    if (options.defaults)
                        object.commonRtn = null;
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.order && message.order.length) {
                        object.order = [];
                        for (var j = 0; j < message.order.length; ++j)
                            object.order[j] = $root.xyz.redtorch.pb.OrderField.toObject(message.order[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcOrderListRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcOrderListRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcOrderListRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcOrderListRtn;
            })();

            pb.RpcTradeListRtn = (function() {

                /**
                 * Properties of a RpcTradeListRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcTradeListRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcTradeListRtn commonRtn
                 * @property {Array.<xyz.redtorch.pb.ITradeField>|null} [trade] RpcTradeListRtn trade
                 */

                /**
                 * Constructs a new RpcTradeListRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcTradeListRtn.
                 * @implements IRpcTradeListRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcTradeListRtn=} [properties] Properties to set
                 */
                function RpcTradeListRtn(properties) {
                    this.trade = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcTradeListRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcTradeListRtn
                 * @instance
                 */
                RpcTradeListRtn.prototype.commonRtn = null;

                /**
                 * RpcTradeListRtn trade.
                 * @member {Array.<xyz.redtorch.pb.ITradeField>} trade
                 * @memberof xyz.redtorch.pb.RpcTradeListRtn
                 * @instance
                 */
                RpcTradeListRtn.prototype.trade = $util.emptyArray;

                /**
                 * Creates a new RpcTradeListRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcTradeListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcTradeListRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcTradeListRtn} RpcTradeListRtn instance
                 */
                RpcTradeListRtn.create = function create(properties) {
                    return new RpcTradeListRtn(properties);
                };

                /**
                 * Encodes the specified RpcTradeListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcTradeListRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcTradeListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcTradeListRtn} message RpcTradeListRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcTradeListRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.trade != null && message.trade.length)
                        for (var i = 0; i < message.trade.length; ++i)
                            $root.xyz.redtorch.pb.TradeField.encode(message.trade[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcTradeListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcTradeListRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcTradeListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcTradeListRtn} message RpcTradeListRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcTradeListRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcTradeListRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcTradeListRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcTradeListRtn} RpcTradeListRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcTradeListRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcTradeListRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.trade && message.trade.length))
                                message.trade = [];
                            message.trade.push($root.xyz.redtorch.pb.TradeField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcTradeListRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcTradeListRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcTradeListRtn} RpcTradeListRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcTradeListRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcTradeListRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcTradeListRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcTradeListRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.trade != null && message.hasOwnProperty("trade")) {
                        if (!Array.isArray(message.trade))
                            return "trade: array expected";
                        for (var i = 0; i < message.trade.length; ++i) {
                            var error = $root.xyz.redtorch.pb.TradeField.verify(message.trade[i]);
                            if (error)
                                return "trade." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcTradeListRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcTradeListRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcTradeListRtn} RpcTradeListRtn
                 */
                RpcTradeListRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcTradeListRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcTradeListRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcTradeListRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.trade) {
                        if (!Array.isArray(object.trade))
                            throw TypeError(".xyz.redtorch.pb.RpcTradeListRtn.trade: array expected");
                        message.trade = [];
                        for (var i = 0; i < object.trade.length; ++i) {
                            if (typeof object.trade[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcTradeListRtn.trade: object expected");
                            message.trade[i] = $root.xyz.redtorch.pb.TradeField.fromObject(object.trade[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcTradeListRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcTradeListRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcTradeListRtn} message RpcTradeListRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcTradeListRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.trade = [];
                    if (options.defaults)
                        object.commonRtn = null;
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.trade && message.trade.length) {
                        object.trade = [];
                        for (var j = 0; j < message.trade.length; ++j)
                            object.trade[j] = $root.xyz.redtorch.pb.TradeField.toObject(message.trade[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcTradeListRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcTradeListRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcTradeListRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcTradeListRtn;
            })();

            pb.RpcContractListRtn = (function() {

                /**
                 * Properties of a RpcContractListRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcContractListRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcContractListRtn commonRtn
                 * @property {Array.<xyz.redtorch.pb.IContractField>|null} [contract] RpcContractListRtn contract
                 */

                /**
                 * Constructs a new RpcContractListRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcContractListRtn.
                 * @implements IRpcContractListRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcContractListRtn=} [properties] Properties to set
                 */
                function RpcContractListRtn(properties) {
                    this.contract = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcContractListRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcContractListRtn
                 * @instance
                 */
                RpcContractListRtn.prototype.commonRtn = null;

                /**
                 * RpcContractListRtn contract.
                 * @member {Array.<xyz.redtorch.pb.IContractField>} contract
                 * @memberof xyz.redtorch.pb.RpcContractListRtn
                 * @instance
                 */
                RpcContractListRtn.prototype.contract = $util.emptyArray;

                /**
                 * Creates a new RpcContractListRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcContractListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcContractListRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcContractListRtn} RpcContractListRtn instance
                 */
                RpcContractListRtn.create = function create(properties) {
                    return new RpcContractListRtn(properties);
                };

                /**
                 * Encodes the specified RpcContractListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcContractListRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcContractListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcContractListRtn} message RpcContractListRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcContractListRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.contract != null && message.contract.length)
                        for (var i = 0; i < message.contract.length; ++i)
                            $root.xyz.redtorch.pb.ContractField.encode(message.contract[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcContractListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcContractListRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcContractListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcContractListRtn} message RpcContractListRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcContractListRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcContractListRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcContractListRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcContractListRtn} RpcContractListRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcContractListRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcContractListRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.contract && message.contract.length))
                                message.contract = [];
                            message.contract.push($root.xyz.redtorch.pb.ContractField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcContractListRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcContractListRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcContractListRtn} RpcContractListRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcContractListRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcContractListRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcContractListRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcContractListRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.contract != null && message.hasOwnProperty("contract")) {
                        if (!Array.isArray(message.contract))
                            return "contract: array expected";
                        for (var i = 0; i < message.contract.length; ++i) {
                            var error = $root.xyz.redtorch.pb.ContractField.verify(message.contract[i]);
                            if (error)
                                return "contract." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcContractListRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcContractListRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcContractListRtn} RpcContractListRtn
                 */
                RpcContractListRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcContractListRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcContractListRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcContractListRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.contract) {
                        if (!Array.isArray(object.contract))
                            throw TypeError(".xyz.redtorch.pb.RpcContractListRtn.contract: array expected");
                        message.contract = [];
                        for (var i = 0; i < object.contract.length; ++i) {
                            if (typeof object.contract[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcContractListRtn.contract: object expected");
                            message.contract[i] = $root.xyz.redtorch.pb.ContractField.fromObject(object.contract[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcContractListRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcContractListRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcContractListRtn} message RpcContractListRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcContractListRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.contract = [];
                    if (options.defaults)
                        object.commonRtn = null;
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.contract && message.contract.length) {
                        object.contract = [];
                        for (var j = 0; j < message.contract.length; ++j)
                            object.contract[j] = $root.xyz.redtorch.pb.ContractField.toObject(message.contract[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcContractListRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcContractListRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcContractListRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcContractListRtn;
            })();

            pb.RpcPositionListRtn = (function() {

                /**
                 * Properties of a RpcPositionListRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcPositionListRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcPositionListRtn commonRtn
                 * @property {Array.<xyz.redtorch.pb.IPositionField>|null} [position] RpcPositionListRtn position
                 */

                /**
                 * Constructs a new RpcPositionListRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcPositionListRtn.
                 * @implements IRpcPositionListRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcPositionListRtn=} [properties] Properties to set
                 */
                function RpcPositionListRtn(properties) {
                    this.position = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcPositionListRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcPositionListRtn
                 * @instance
                 */
                RpcPositionListRtn.prototype.commonRtn = null;

                /**
                 * RpcPositionListRtn position.
                 * @member {Array.<xyz.redtorch.pb.IPositionField>} position
                 * @memberof xyz.redtorch.pb.RpcPositionListRtn
                 * @instance
                 */
                RpcPositionListRtn.prototype.position = $util.emptyArray;

                /**
                 * Creates a new RpcPositionListRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcPositionListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcPositionListRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcPositionListRtn} RpcPositionListRtn instance
                 */
                RpcPositionListRtn.create = function create(properties) {
                    return new RpcPositionListRtn(properties);
                };

                /**
                 * Encodes the specified RpcPositionListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcPositionListRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcPositionListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcPositionListRtn} message RpcPositionListRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcPositionListRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.position != null && message.position.length)
                        for (var i = 0; i < message.position.length; ++i)
                            $root.xyz.redtorch.pb.PositionField.encode(message.position[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcPositionListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcPositionListRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcPositionListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcPositionListRtn} message RpcPositionListRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcPositionListRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcPositionListRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcPositionListRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcPositionListRtn} RpcPositionListRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcPositionListRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcPositionListRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.position && message.position.length))
                                message.position = [];
                            message.position.push($root.xyz.redtorch.pb.PositionField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcPositionListRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcPositionListRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcPositionListRtn} RpcPositionListRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcPositionListRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcPositionListRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcPositionListRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcPositionListRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.position != null && message.hasOwnProperty("position")) {
                        if (!Array.isArray(message.position))
                            return "position: array expected";
                        for (var i = 0; i < message.position.length; ++i) {
                            var error = $root.xyz.redtorch.pb.PositionField.verify(message.position[i]);
                            if (error)
                                return "position." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcPositionListRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcPositionListRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcPositionListRtn} RpcPositionListRtn
                 */
                RpcPositionListRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcPositionListRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcPositionListRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcPositionListRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.position) {
                        if (!Array.isArray(object.position))
                            throw TypeError(".xyz.redtorch.pb.RpcPositionListRtn.position: array expected");
                        message.position = [];
                        for (var i = 0; i < object.position.length; ++i) {
                            if (typeof object.position[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcPositionListRtn.position: object expected");
                            message.position[i] = $root.xyz.redtorch.pb.PositionField.fromObject(object.position[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcPositionListRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcPositionListRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcPositionListRtn} message RpcPositionListRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcPositionListRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.position = [];
                    if (options.defaults)
                        object.commonRtn = null;
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.position && message.position.length) {
                        object.position = [];
                        for (var j = 0; j < message.position.length; ++j)
                            object.position[j] = $root.xyz.redtorch.pb.PositionField.toObject(message.position[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcPositionListRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcPositionListRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcPositionListRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcPositionListRtn;
            })();

            pb.RpcAccountListRtn = (function() {

                /**
                 * Properties of a RpcAccountListRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcAccountListRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcAccountListRtn commonRtn
                 * @property {Array.<xyz.redtorch.pb.IAccountField>|null} [account] RpcAccountListRtn account
                 */

                /**
                 * Constructs a new RpcAccountListRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcAccountListRtn.
                 * @implements IRpcAccountListRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcAccountListRtn=} [properties] Properties to set
                 */
                function RpcAccountListRtn(properties) {
                    this.account = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcAccountListRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcAccountListRtn
                 * @instance
                 */
                RpcAccountListRtn.prototype.commonRtn = null;

                /**
                 * RpcAccountListRtn account.
                 * @member {Array.<xyz.redtorch.pb.IAccountField>} account
                 * @memberof xyz.redtorch.pb.RpcAccountListRtn
                 * @instance
                 */
                RpcAccountListRtn.prototype.account = $util.emptyArray;

                /**
                 * Creates a new RpcAccountListRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcAccountListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcAccountListRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcAccountListRtn} RpcAccountListRtn instance
                 */
                RpcAccountListRtn.create = function create(properties) {
                    return new RpcAccountListRtn(properties);
                };

                /**
                 * Encodes the specified RpcAccountListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcAccountListRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcAccountListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcAccountListRtn} message RpcAccountListRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcAccountListRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.account != null && message.account.length)
                        for (var i = 0; i < message.account.length; ++i)
                            $root.xyz.redtorch.pb.AccountField.encode(message.account[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcAccountListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcAccountListRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcAccountListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcAccountListRtn} message RpcAccountListRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcAccountListRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcAccountListRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcAccountListRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcAccountListRtn} RpcAccountListRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcAccountListRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcAccountListRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.account && message.account.length))
                                message.account = [];
                            message.account.push($root.xyz.redtorch.pb.AccountField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcAccountListRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcAccountListRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcAccountListRtn} RpcAccountListRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcAccountListRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcAccountListRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcAccountListRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcAccountListRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.account != null && message.hasOwnProperty("account")) {
                        if (!Array.isArray(message.account))
                            return "account: array expected";
                        for (var i = 0; i < message.account.length; ++i) {
                            var error = $root.xyz.redtorch.pb.AccountField.verify(message.account[i]);
                            if (error)
                                return "account." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcAccountListRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcAccountListRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcAccountListRtn} RpcAccountListRtn
                 */
                RpcAccountListRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcAccountListRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcAccountListRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcAccountListRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.account) {
                        if (!Array.isArray(object.account))
                            throw TypeError(".xyz.redtorch.pb.RpcAccountListRtn.account: array expected");
                        message.account = [];
                        for (var i = 0; i < object.account.length; ++i) {
                            if (typeof object.account[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcAccountListRtn.account: object expected");
                            message.account[i] = $root.xyz.redtorch.pb.AccountField.fromObject(object.account[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcAccountListRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcAccountListRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcAccountListRtn} message RpcAccountListRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcAccountListRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.account = [];
                    if (options.defaults)
                        object.commonRtn = null;
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.account && message.account.length) {
                        object.account = [];
                        for (var j = 0; j < message.account.length; ++j)
                            object.account[j] = $root.xyz.redtorch.pb.AccountField.toObject(message.account[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcAccountListRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcAccountListRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcAccountListRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcAccountListRtn;
            })();

            pb.RpcTickListRtn = (function() {

                /**
                 * Properties of a RpcTickListRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcTickListRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcTickListRtn commonRtn
                 * @property {Array.<xyz.redtorch.pb.ITickField>|null} [tick] RpcTickListRtn tick
                 */

                /**
                 * Constructs a new RpcTickListRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcTickListRtn.
                 * @implements IRpcTickListRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcTickListRtn=} [properties] Properties to set
                 */
                function RpcTickListRtn(properties) {
                    this.tick = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcTickListRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcTickListRtn
                 * @instance
                 */
                RpcTickListRtn.prototype.commonRtn = null;

                /**
                 * RpcTickListRtn tick.
                 * @member {Array.<xyz.redtorch.pb.ITickField>} tick
                 * @memberof xyz.redtorch.pb.RpcTickListRtn
                 * @instance
                 */
                RpcTickListRtn.prototype.tick = $util.emptyArray;

                /**
                 * Creates a new RpcTickListRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcTickListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcTickListRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcTickListRtn} RpcTickListRtn instance
                 */
                RpcTickListRtn.create = function create(properties) {
                    return new RpcTickListRtn(properties);
                };

                /**
                 * Encodes the specified RpcTickListRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcTickListRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcTickListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcTickListRtn} message RpcTickListRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcTickListRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.tick != null && message.tick.length)
                        for (var i = 0; i < message.tick.length; ++i)
                            $root.xyz.redtorch.pb.TickField.encode(message.tick[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcTickListRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcTickListRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcTickListRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcTickListRtn} message RpcTickListRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcTickListRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcTickListRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcTickListRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcTickListRtn} RpcTickListRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcTickListRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcTickListRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.tick && message.tick.length))
                                message.tick = [];
                            message.tick.push($root.xyz.redtorch.pb.TickField.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcTickListRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcTickListRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcTickListRtn} RpcTickListRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcTickListRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcTickListRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcTickListRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcTickListRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.tick != null && message.hasOwnProperty("tick")) {
                        if (!Array.isArray(message.tick))
                            return "tick: array expected";
                        for (var i = 0; i < message.tick.length; ++i) {
                            var error = $root.xyz.redtorch.pb.TickField.verify(message.tick[i]);
                            if (error)
                                return "tick." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a RpcTickListRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcTickListRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcTickListRtn} RpcTickListRtn
                 */
                RpcTickListRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcTickListRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcTickListRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcTickListRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.tick) {
                        if (!Array.isArray(object.tick))
                            throw TypeError(".xyz.redtorch.pb.RpcTickListRtn.tick: array expected");
                        message.tick = [];
                        for (var i = 0; i < object.tick.length; ++i) {
                            if (typeof object.tick[i] !== "object")
                                throw TypeError(".xyz.redtorch.pb.RpcTickListRtn.tick: object expected");
                            message.tick[i] = $root.xyz.redtorch.pb.TickField.fromObject(object.tick[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcTickListRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcTickListRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcTickListRtn} message RpcTickListRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcTickListRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.tick = [];
                    if (options.defaults)
                        object.commonRtn = null;
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.tick && message.tick.length) {
                        object.tick = [];
                        for (var j = 0; j < message.tick.length; ++j)
                            object.tick[j] = $root.xyz.redtorch.pb.TickField.toObject(message.tick[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this RpcTickListRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcTickListRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcTickListRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcTickListRtn;
            })();

            pb.RpcNoticeRtn = (function() {

                /**
                 * Properties of a RpcNoticeRtn.
                 * @memberof xyz.redtorch.pb
                 * @interface IRpcNoticeRtn
                 * @property {xyz.redtorch.pb.ICommonRtnField|null} [commonRtn] RpcNoticeRtn commonRtn
                 * @property {xyz.redtorch.pb.INoticeField|null} [notice] RpcNoticeRtn notice
                 */

                /**
                 * Constructs a new RpcNoticeRtn.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a RpcNoticeRtn.
                 * @implements IRpcNoticeRtn
                 * @constructor
                 * @param {xyz.redtorch.pb.IRpcNoticeRtn=} [properties] Properties to set
                 */
                function RpcNoticeRtn(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RpcNoticeRtn commonRtn.
                 * @member {xyz.redtorch.pb.ICommonRtnField|null|undefined} commonRtn
                 * @memberof xyz.redtorch.pb.RpcNoticeRtn
                 * @instance
                 */
                RpcNoticeRtn.prototype.commonRtn = null;

                /**
                 * RpcNoticeRtn notice.
                 * @member {xyz.redtorch.pb.INoticeField|null|undefined} notice
                 * @memberof xyz.redtorch.pb.RpcNoticeRtn
                 * @instance
                 */
                RpcNoticeRtn.prototype.notice = null;

                /**
                 * Creates a new RpcNoticeRtn instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.RpcNoticeRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcNoticeRtn=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.RpcNoticeRtn} RpcNoticeRtn instance
                 */
                RpcNoticeRtn.create = function create(properties) {
                    return new RpcNoticeRtn(properties);
                };

                /**
                 * Encodes the specified RpcNoticeRtn message. Does not implicitly {@link xyz.redtorch.pb.RpcNoticeRtn.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.RpcNoticeRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcNoticeRtn} message RpcNoticeRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcNoticeRtn.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        $root.xyz.redtorch.pb.CommonRtnField.encode(message.commonRtn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.notice != null && message.hasOwnProperty("notice"))
                        $root.xyz.redtorch.pb.NoticeField.encode(message.notice, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified RpcNoticeRtn message, length delimited. Does not implicitly {@link xyz.redtorch.pb.RpcNoticeRtn.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.RpcNoticeRtn
                 * @static
                 * @param {xyz.redtorch.pb.IRpcNoticeRtn} message RpcNoticeRtn message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RpcNoticeRtn.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RpcNoticeRtn message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.RpcNoticeRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.RpcNoticeRtn} RpcNoticeRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcNoticeRtn.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.RpcNoticeRtn();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.notice = $root.xyz.redtorch.pb.NoticeField.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RpcNoticeRtn message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.RpcNoticeRtn
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.RpcNoticeRtn} RpcNoticeRtn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RpcNoticeRtn.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RpcNoticeRtn message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.RpcNoticeRtn
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RpcNoticeRtn.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn")) {
                        var error = $root.xyz.redtorch.pb.CommonRtnField.verify(message.commonRtn);
                        if (error)
                            return "commonRtn." + error;
                    }
                    if (message.notice != null && message.hasOwnProperty("notice")) {
                        var error = $root.xyz.redtorch.pb.NoticeField.verify(message.notice);
                        if (error)
                            return "notice." + error;
                    }
                    return null;
                };

                /**
                 * Creates a RpcNoticeRtn message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.RpcNoticeRtn
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.RpcNoticeRtn} RpcNoticeRtn
                 */
                RpcNoticeRtn.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.RpcNoticeRtn)
                        return object;
                    var message = new $root.xyz.redtorch.pb.RpcNoticeRtn();
                    if (object.commonRtn != null) {
                        if (typeof object.commonRtn !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcNoticeRtn.commonRtn: object expected");
                        message.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.fromObject(object.commonRtn);
                    }
                    if (object.notice != null) {
                        if (typeof object.notice !== "object")
                            throw TypeError(".xyz.redtorch.pb.RpcNoticeRtn.notice: object expected");
                        message.notice = $root.xyz.redtorch.pb.NoticeField.fromObject(object.notice);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a RpcNoticeRtn message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.RpcNoticeRtn
                 * @static
                 * @param {xyz.redtorch.pb.RpcNoticeRtn} message RpcNoticeRtn
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RpcNoticeRtn.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.commonRtn = null;
                        object.notice = null;
                    }
                    if (message.commonRtn != null && message.hasOwnProperty("commonRtn"))
                        object.commonRtn = $root.xyz.redtorch.pb.CommonRtnField.toObject(message.commonRtn, options);
                    if (message.notice != null && message.hasOwnProperty("notice"))
                        object.notice = $root.xyz.redtorch.pb.NoticeField.toObject(message.notice, options);
                    return object;
                };

                /**
                 * Converts this RpcNoticeRtn to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.RpcNoticeRtn
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RpcNoticeRtn.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RpcNoticeRtn;
            })();

            /**
             * RpcId enum.
             * @name xyz.redtorch.pb.RpcId
             * @enum {string}
             * @property {number} UNKNOWN_RPC_ID=0 UNKNOWN_RPC_ID value
             * @property {number} SUBSCRIBE_REQ=1 SUBSCRIBE_REQ value
             * @property {number} SUBSCRIBE_RSP=2 SUBSCRIBE_RSP value
             * @property {number} UNSUBSCRIBE_REQ=3 UNSUBSCRIBE_REQ value
             * @property {number} UNSUBSCRIBE_RSP=4 UNSUBSCRIBE_RSP value
             * @property {number} SUBMIT_ORDER_REQ=5 SUBMIT_ORDER_REQ value
             * @property {number} SUBMIT_ORDER_RSP=6 SUBMIT_ORDER_RSP value
             * @property {number} CANCEL_ORDER_REQ=7 CANCEL_ORDER_REQ value
             * @property {number} CANCEL_ORDER_RSP=8 CANCEL_ORDER_RSP value
             * @property {number} SEARCH_CONTRACT_REQ=9 SEARCH_CONTRACT_REQ value
             * @property {number} SEARCH_CONTRACT_RSP=10 SEARCH_CONTRACT_RSP value
             * @property {number} GET_ORDER_LIST_REQ=11 GET_ORDER_LIST_REQ value
             * @property {number} GET_ORDER_LIST_RSP=12 GET_ORDER_LIST_RSP value
             * @property {number} GET_WORKING_ORDER_LIST_REQ=13 GET_WORKING_ORDER_LIST_REQ value
             * @property {number} GET_WORKING_ORDER_LIST_RSP=14 GET_WORKING_ORDER_LIST_RSP value
             * @property {number} QUERY_ORDER_BY_ORDER_ID_REQ=15 QUERY_ORDER_BY_ORDER_ID_REQ value
             * @property {number} QUERY_ORDER_BY_ORDER_ID_RSP=16 QUERY_ORDER_BY_ORDER_ID_RSP value
             * @property {number} QUERY_ORDER_BY_ORIGIN_ORDER_ID_REQ=17 QUERY_ORDER_BY_ORIGIN_ORDER_ID_REQ value
             * @property {number} QUERY_ORDER_BY_ORIGIN_ORDER_ID_RSP=18 QUERY_ORDER_BY_ORIGIN_ORDER_ID_RSP value
             * @property {number} QUERY_ORDER_LIST_BY_ACCOUNT_ID_REQ=19 QUERY_ORDER_LIST_BY_ACCOUNT_ID_REQ value
             * @property {number} QUERY_ORDER_LIST_BY_ACCOUNT_ID_RSP=20 QUERY_ORDER_LIST_BY_ACCOUNT_ID_RSP value
             * @property {number} QUERY_ORDER_LIST_BY_UNIFIED_SYMBOL_REQ=21 QUERY_ORDER_LIST_BY_UNIFIED_SYMBOL_REQ value
             * @property {number} QUERY_ORDER_LIST_BY_UNIFIED_SYMBOL_RSP=22 QUERY_ORDER_LIST_BY_UNIFIED_SYMBOL_RSP value
             * @property {number} GET_TRADE_LIST_REQ=23 GET_TRADE_LIST_REQ value
             * @property {number} GET_TRADE_LIST_RSP=24 GET_TRADE_LIST_RSP value
             * @property {number} QUERY_TRADE_BY_TRADE_ID_REQ=25 QUERY_TRADE_BY_TRADE_ID_REQ value
             * @property {number} QUERY_TRADE_BY_TRADE_ID_RSP=26 QUERY_TRADE_BY_TRADE_ID_RSP value
             * @property {number} QUERY_TRADE_LIST_BY_UNIFIED_SYMBOL_REQ=27 QUERY_TRADE_LIST_BY_UNIFIED_SYMBOL_REQ value
             * @property {number} QUERY_TRADE_LIST_BY_UNIFIED_SYMBOL_RSP=28 QUERY_TRADE_LIST_BY_UNIFIED_SYMBOL_RSP value
             * @property {number} QUERY_TRADE_LIST_BY_ACCOUNT_ID_REQ=29 QUERY_TRADE_LIST_BY_ACCOUNT_ID_REQ value
             * @property {number} QUERY_TRADE_LIST_BY_ACCOUNT_ID_RSP=30 QUERY_TRADE_LIST_BY_ACCOUNT_ID_RSP value
             * @property {number} QUERY_TRADE_LIST_BY_ORDER_ID_REQ=31 QUERY_TRADE_LIST_BY_ORDER_ID_REQ value
             * @property {number} QUERY_TRADE_LIST_BY_ORDER_ID_RSP=32 QUERY_TRADE_LIST_BY_ORDER_ID_RSP value
             * @property {number} QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_REQ=33 QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_REQ value
             * @property {number} QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_RSP=34 QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_RSP value
             * @property {number} GET_POSITION_LIST_REQ=35 GET_POSITION_LIST_REQ value
             * @property {number} GET_POSITION_LIST_RSP=36 GET_POSITION_LIST_RSP value
             * @property {number} QUERY_POSITION_BY_POSITION_ID_REQ=37 QUERY_POSITION_BY_POSITION_ID_REQ value
             * @property {number} QUERY_POSITION_BY_POSITION_ID_RSP=38 QUERY_POSITION_BY_POSITION_ID_RSP value
             * @property {number} QUERY_POSITION_LIST_BY_ACCOUNT_ID_REQ=39 QUERY_POSITION_LIST_BY_ACCOUNT_ID_REQ value
             * @property {number} QUERY_POSITION_LIST_BY_ACCOUNT_ID_RSP=40 QUERY_POSITION_LIST_BY_ACCOUNT_ID_RSP value
             * @property {number} QUERY_POSITION_LIST_BY_UNIFIED_SYMBOL_REQ=41 QUERY_POSITION_LIST_BY_UNIFIED_SYMBOL_REQ value
             * @property {number} QUERY_POSITION_LIST_BY_UNIFIED_SYMBOL_RSP=42 QUERY_POSITION_LIST_BY_UNIFIED_SYMBOL_RSP value
             * @property {number} GET_ACCOUNT_LIST_REQ=43 GET_ACCOUNT_LIST_REQ value
             * @property {number} GET_ACCOUNT_LIST_RSP=44 GET_ACCOUNT_LIST_RSP value
             * @property {number} QUERY_ACCOUNT_BY_ACCOUNT_ID_REQ=45 QUERY_ACCOUNT_BY_ACCOUNT_ID_REQ value
             * @property {number} QUERY_ACCOUNT_BY_ACCOUNT_ID_RSP=46 QUERY_ACCOUNT_BY_ACCOUNT_ID_RSP value
             * @property {number} QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_REQ=47 QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_REQ value
             * @property {number} QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_RSP=48 QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_RSP value
             * @property {number} GET_CONTRACT_LIST_REQ=49 GET_CONTRACT_LIST_REQ value
             * @property {number} GET_CONTRACT_LIST_RSP=50 GET_CONTRACT_LIST_RSP value
             * @property {number} QUERY_CONTRACT_BY_CONTRACT_ID_REQ=51 QUERY_CONTRACT_BY_CONTRACT_ID_REQ value
             * @property {number} QUERY_CONTRACT_BY_CONTRACT_ID_RSP=52 QUERY_CONTRACT_BY_CONTRACT_ID_RSP value
             * @property {number} QUERY_CONTRACT_LIST_BY_UNIFIED_SYMBOL_REQ=53 QUERY_CONTRACT_LIST_BY_UNIFIED_SYMBOL_REQ value
             * @property {number} QUERY_CONTRACT_LIST_BY_UNIFIED_SYMBOL_RSP=54 QUERY_CONTRACT_LIST_BY_UNIFIED_SYMBOL_RSP value
             * @property {number} QUERY_CONTRACT_LIST_BY_GATEWAY_ID_REQ=55 QUERY_CONTRACT_LIST_BY_GATEWAY_ID_REQ value
             * @property {number} QUERY_CONTRACT_LIST_BY_GATEWAY_ID_RSP=56 QUERY_CONTRACT_LIST_BY_GATEWAY_ID_RSP value
             * @property {number} SYNC_SLAVE_NODE_RUNTIME_DATA_REQ=57 SYNC_SLAVE_NODE_RUNTIME_DATA_REQ value
             * @property {number} SYNC_SLAVE_NODE_RUNTIME_DATA_RSP=58 SYNC_SLAVE_NODE_RUNTIME_DATA_RSP value
             * @property {number} GET_MIX_CONTRACT_LIST_REQ=59 GET_MIX_CONTRACT_LIST_REQ value
             * @property {number} GET_MIX_CONTRACT_LIST_RSP=60 GET_MIX_CONTRACT_LIST_RSP value
             * @property {number} GET_TICK_LIST_REQ=61 GET_TICK_LIST_REQ value
             * @property {number} GET_TICK_LIST_RSP=62 GET_TICK_LIST_RSP value
             * @property {number} EXCEPTION_RSP=999999 EXCEPTION_RSP value
             * @property {number} ORDER_RTN=1001 ORDER_RTN value
             * @property {number} TRADE_RTN=1002 TRADE_RTN value
             * @property {number} CONTRACT_RTN=1003 CONTRACT_RTN value
             * @property {number} POSITION_RTN=1004 POSITION_RTN value
             * @property {number} ACCOUNT_RTN=1005 ACCOUNT_RTN value
             * @property {number} TICK_RTN=1006 TICK_RTN value
             * @property {number} ORDER_LIST_RTN=1007 ORDER_LIST_RTN value
             * @property {number} TRADE_LIST_RTN=1008 TRADE_LIST_RTN value
             * @property {number} CONTRACT_LIST_RTN=1009 CONTRACT_LIST_RTN value
             * @property {number} POSITION_LIST_RTN=1010 POSITION_LIST_RTN value
             * @property {number} ACCOUNT_LIST_RTN=1011 ACCOUNT_LIST_RTN value
             * @property {number} TICK_LIST_RTN=1012 TICK_LIST_RTN value
             * @property {number} NOTICE_RTN=1013 NOTICE_RTN value
             */
            pb.RpcId = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN_RPC_ID"] = 0;
                values[valuesById[1] = "SUBSCRIBE_REQ"] = 1;
                values[valuesById[2] = "SUBSCRIBE_RSP"] = 2;
                values[valuesById[3] = "UNSUBSCRIBE_REQ"] = 3;
                values[valuesById[4] = "UNSUBSCRIBE_RSP"] = 4;
                values[valuesById[5] = "SUBMIT_ORDER_REQ"] = 5;
                values[valuesById[6] = "SUBMIT_ORDER_RSP"] = 6;
                values[valuesById[7] = "CANCEL_ORDER_REQ"] = 7;
                values[valuesById[8] = "CANCEL_ORDER_RSP"] = 8;
                values[valuesById[9] = "SEARCH_CONTRACT_REQ"] = 9;
                values[valuesById[10] = "SEARCH_CONTRACT_RSP"] = 10;
                values[valuesById[11] = "GET_ORDER_LIST_REQ"] = 11;
                values[valuesById[12] = "GET_ORDER_LIST_RSP"] = 12;
                values[valuesById[13] = "GET_WORKING_ORDER_LIST_REQ"] = 13;
                values[valuesById[14] = "GET_WORKING_ORDER_LIST_RSP"] = 14;
                values[valuesById[15] = "QUERY_ORDER_BY_ORDER_ID_REQ"] = 15;
                values[valuesById[16] = "QUERY_ORDER_BY_ORDER_ID_RSP"] = 16;
                values[valuesById[17] = "QUERY_ORDER_BY_ORIGIN_ORDER_ID_REQ"] = 17;
                values[valuesById[18] = "QUERY_ORDER_BY_ORIGIN_ORDER_ID_RSP"] = 18;
                values[valuesById[19] = "QUERY_ORDER_LIST_BY_ACCOUNT_ID_REQ"] = 19;
                values[valuesById[20] = "QUERY_ORDER_LIST_BY_ACCOUNT_ID_RSP"] = 20;
                values[valuesById[21] = "QUERY_ORDER_LIST_BY_UNIFIED_SYMBOL_REQ"] = 21;
                values[valuesById[22] = "QUERY_ORDER_LIST_BY_UNIFIED_SYMBOL_RSP"] = 22;
                values[valuesById[23] = "GET_TRADE_LIST_REQ"] = 23;
                values[valuesById[24] = "GET_TRADE_LIST_RSP"] = 24;
                values[valuesById[25] = "QUERY_TRADE_BY_TRADE_ID_REQ"] = 25;
                values[valuesById[26] = "QUERY_TRADE_BY_TRADE_ID_RSP"] = 26;
                values[valuesById[27] = "QUERY_TRADE_LIST_BY_UNIFIED_SYMBOL_REQ"] = 27;
                values[valuesById[28] = "QUERY_TRADE_LIST_BY_UNIFIED_SYMBOL_RSP"] = 28;
                values[valuesById[29] = "QUERY_TRADE_LIST_BY_ACCOUNT_ID_REQ"] = 29;
                values[valuesById[30] = "QUERY_TRADE_LIST_BY_ACCOUNT_ID_RSP"] = 30;
                values[valuesById[31] = "QUERY_TRADE_LIST_BY_ORDER_ID_REQ"] = 31;
                values[valuesById[32] = "QUERY_TRADE_LIST_BY_ORDER_ID_RSP"] = 32;
                values[valuesById[33] = "QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_REQ"] = 33;
                values[valuesById[34] = "QUERY_TRADE_LIST_BY_ORIGIN_ORDER_ID_RSP"] = 34;
                values[valuesById[35] = "GET_POSITION_LIST_REQ"] = 35;
                values[valuesById[36] = "GET_POSITION_LIST_RSP"] = 36;
                values[valuesById[37] = "QUERY_POSITION_BY_POSITION_ID_REQ"] = 37;
                values[valuesById[38] = "QUERY_POSITION_BY_POSITION_ID_RSP"] = 38;
                values[valuesById[39] = "QUERY_POSITION_LIST_BY_ACCOUNT_ID_REQ"] = 39;
                values[valuesById[40] = "QUERY_POSITION_LIST_BY_ACCOUNT_ID_RSP"] = 40;
                values[valuesById[41] = "QUERY_POSITION_LIST_BY_UNIFIED_SYMBOL_REQ"] = 41;
                values[valuesById[42] = "QUERY_POSITION_LIST_BY_UNIFIED_SYMBOL_RSP"] = 42;
                values[valuesById[43] = "GET_ACCOUNT_LIST_REQ"] = 43;
                values[valuesById[44] = "GET_ACCOUNT_LIST_RSP"] = 44;
                values[valuesById[45] = "QUERY_ACCOUNT_BY_ACCOUNT_ID_REQ"] = 45;
                values[valuesById[46] = "QUERY_ACCOUNT_BY_ACCOUNT_ID_RSP"] = 46;
                values[valuesById[47] = "QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_REQ"] = 47;
                values[valuesById[48] = "QUERY_ACCOUNT_LIST_BY_ACCOUNT_CODE_RSP"] = 48;
                values[valuesById[49] = "GET_CONTRACT_LIST_REQ"] = 49;
                values[valuesById[50] = "GET_CONTRACT_LIST_RSP"] = 50;
                values[valuesById[51] = "QUERY_CONTRACT_BY_CONTRACT_ID_REQ"] = 51;
                values[valuesById[52] = "QUERY_CONTRACT_BY_CONTRACT_ID_RSP"] = 52;
                values[valuesById[53] = "QUERY_CONTRACT_LIST_BY_UNIFIED_SYMBOL_REQ"] = 53;
                values[valuesById[54] = "QUERY_CONTRACT_LIST_BY_UNIFIED_SYMBOL_RSP"] = 54;
                values[valuesById[55] = "QUERY_CONTRACT_LIST_BY_GATEWAY_ID_REQ"] = 55;
                values[valuesById[56] = "QUERY_CONTRACT_LIST_BY_GATEWAY_ID_RSP"] = 56;
                values[valuesById[57] = "SYNC_SLAVE_NODE_RUNTIME_DATA_REQ"] = 57;
                values[valuesById[58] = "SYNC_SLAVE_NODE_RUNTIME_DATA_RSP"] = 58;
                values[valuesById[59] = "GET_MIX_CONTRACT_LIST_REQ"] = 59;
                values[valuesById[60] = "GET_MIX_CONTRACT_LIST_RSP"] = 60;
                values[valuesById[61] = "GET_TICK_LIST_REQ"] = 61;
                values[valuesById[62] = "GET_TICK_LIST_RSP"] = 62;
                values[valuesById[999999] = "EXCEPTION_RSP"] = 999999;
                values[valuesById[1001] = "ORDER_RTN"] = 1001;
                values[valuesById[1002] = "TRADE_RTN"] = 1002;
                values[valuesById[1003] = "CONTRACT_RTN"] = 1003;
                values[valuesById[1004] = "POSITION_RTN"] = 1004;
                values[valuesById[1005] = "ACCOUNT_RTN"] = 1005;
                values[valuesById[1006] = "TICK_RTN"] = 1006;
                values[valuesById[1007] = "ORDER_LIST_RTN"] = 1007;
                values[valuesById[1008] = "TRADE_LIST_RTN"] = 1008;
                values[valuesById[1009] = "CONTRACT_LIST_RTN"] = 1009;
                values[valuesById[1010] = "POSITION_LIST_RTN"] = 1010;
                values[valuesById[1011] = "ACCOUNT_LIST_RTN"] = 1011;
                values[valuesById[1012] = "TICK_LIST_RTN"] = 1012;
                values[valuesById[1013] = "NOTICE_RTN"] = 1013;
                return values;
            })();

            pb.DataExchangeProtocol = (function() {

                /**
                 * Properties of a DataExchangeProtocol.
                 * @memberof xyz.redtorch.pb
                 * @interface IDataExchangeProtocol
                 * @property {xyz.redtorch.pb.DataExchangeProtocol.ContentType|null} [contentType] DataExchangeProtocol contentType
                 * @property {xyz.redtorch.pb.DataExchangeProtocol.RpcType|null} [rpcType] DataExchangeProtocol rpcType
                 * @property {number|Long|null} [timestamp] DataExchangeProtocol timestamp
                 * @property {number|null} [sourceNodeId] DataExchangeProtocol sourceNodeId
                 * @property {number|null} [targetNodeId] DataExchangeProtocol targetNodeId
                 * @property {number|null} [rpcId] DataExchangeProtocol rpcId
                 * @property {string|null} [reqId] DataExchangeProtocol reqId
                 * @property {Uint8Array|null} [contentBytes] DataExchangeProtocol contentBytes
                 */

                /**
                 * Constructs a new DataExchangeProtocol.
                 * @memberof xyz.redtorch.pb
                 * @classdesc Represents a DataExchangeProtocol.
                 * @implements IDataExchangeProtocol
                 * @constructor
                 * @param {xyz.redtorch.pb.IDataExchangeProtocol=} [properties] Properties to set
                 */
                function DataExchangeProtocol(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DataExchangeProtocol contentType.
                 * @member {xyz.redtorch.pb.DataExchangeProtocol.ContentType} contentType
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @instance
                 */
                DataExchangeProtocol.prototype.contentType = 0;

                /**
                 * DataExchangeProtocol rpcType.
                 * @member {xyz.redtorch.pb.DataExchangeProtocol.RpcType} rpcType
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @instance
                 */
                DataExchangeProtocol.prototype.rpcType = 0;

                /**
                 * DataExchangeProtocol timestamp.
                 * @member {number|Long} timestamp
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @instance
                 */
                DataExchangeProtocol.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * DataExchangeProtocol sourceNodeId.
                 * @member {number} sourceNodeId
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @instance
                 */
                DataExchangeProtocol.prototype.sourceNodeId = 0;

                /**
                 * DataExchangeProtocol targetNodeId.
                 * @member {number} targetNodeId
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @instance
                 */
                DataExchangeProtocol.prototype.targetNodeId = 0;

                /**
                 * DataExchangeProtocol rpcId.
                 * @member {number} rpcId
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @instance
                 */
                DataExchangeProtocol.prototype.rpcId = 0;

                /**
                 * DataExchangeProtocol reqId.
                 * @member {string} reqId
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @instance
                 */
                DataExchangeProtocol.prototype.reqId = "";

                /**
                 * DataExchangeProtocol contentBytes.
                 * @member {Uint8Array} contentBytes
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @instance
                 */
                DataExchangeProtocol.prototype.contentBytes = $util.newBuffer([]);

                /**
                 * Creates a new DataExchangeProtocol instance using the specified properties.
                 * @function create
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @static
                 * @param {xyz.redtorch.pb.IDataExchangeProtocol=} [properties] Properties to set
                 * @returns {xyz.redtorch.pb.DataExchangeProtocol} DataExchangeProtocol instance
                 */
                DataExchangeProtocol.create = function create(properties) {
                    return new DataExchangeProtocol(properties);
                };

                /**
                 * Encodes the specified DataExchangeProtocol message. Does not implicitly {@link xyz.redtorch.pb.DataExchangeProtocol.verify|verify} messages.
                 * @function encode
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @static
                 * @param {xyz.redtorch.pb.IDataExchangeProtocol} message DataExchangeProtocol message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DataExchangeProtocol.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.contentType != null && message.hasOwnProperty("contentType"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.contentType);
                    if (message.rpcType != null && message.hasOwnProperty("rpcType"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.rpcType);
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timestamp);
                    if (message.sourceNodeId != null && message.hasOwnProperty("sourceNodeId"))
                        writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.sourceNodeId);
                    if (message.targetNodeId != null && message.hasOwnProperty("targetNodeId"))
                        writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.targetNodeId);
                    if (message.rpcId != null && message.hasOwnProperty("rpcId"))
                        writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.rpcId);
                    if (message.reqId != null && message.hasOwnProperty("reqId"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.reqId);
                    if (message.contentBytes != null && message.hasOwnProperty("contentBytes"))
                        writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.contentBytes);
                    return writer;
                };

                /**
                 * Encodes the specified DataExchangeProtocol message, length delimited. Does not implicitly {@link xyz.redtorch.pb.DataExchangeProtocol.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @static
                 * @param {xyz.redtorch.pb.IDataExchangeProtocol} message DataExchangeProtocol message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DataExchangeProtocol.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DataExchangeProtocol message from the specified reader or buffer.
                 * @function decode
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {xyz.redtorch.pb.DataExchangeProtocol} DataExchangeProtocol
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DataExchangeProtocol.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.xyz.redtorch.pb.DataExchangeProtocol();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.contentType = reader.int32();
                            break;
                        case 2:
                            message.rpcType = reader.int32();
                            break;
                        case 3:
                            message.timestamp = reader.fixed64();
                            break;
                        case 4:
                            message.sourceNodeId = reader.fixed32();
                            break;
                        case 5:
                            message.targetNodeId = reader.fixed32();
                            break;
                        case 6:
                            message.rpcId = reader.fixed32();
                            break;
                        case 7:
                            message.reqId = reader.string();
                            break;
                        case 8:
                            message.contentBytes = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DataExchangeProtocol message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {xyz.redtorch.pb.DataExchangeProtocol} DataExchangeProtocol
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DataExchangeProtocol.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DataExchangeProtocol message.
                 * @function verify
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DataExchangeProtocol.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.contentType != null && message.hasOwnProperty("contentType"))
                        switch (message.contentType) {
                        default:
                            return "contentType: enum value expected";
                        case 0:
                        case 1:
                            break;
                        }
                    if (message.rpcType != null && message.hasOwnProperty("rpcType"))
                        switch (message.rpcType) {
                        default:
                            return "rpcType: enum value expected";
                        case 0:
                            break;
                        }
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                            return "timestamp: integer|Long expected";
                    if (message.sourceNodeId != null && message.hasOwnProperty("sourceNodeId"))
                        if (!$util.isInteger(message.sourceNodeId))
                            return "sourceNodeId: integer expected";
                    if (message.targetNodeId != null && message.hasOwnProperty("targetNodeId"))
                        if (!$util.isInteger(message.targetNodeId))
                            return "targetNodeId: integer expected";
                    if (message.rpcId != null && message.hasOwnProperty("rpcId"))
                        if (!$util.isInteger(message.rpcId))
                            return "rpcId: integer expected";
                    if (message.reqId != null && message.hasOwnProperty("reqId"))
                        if (!$util.isString(message.reqId))
                            return "reqId: string expected";
                    if (message.contentBytes != null && message.hasOwnProperty("contentBytes"))
                        if (!(message.contentBytes && typeof message.contentBytes.length === "number" || $util.isString(message.contentBytes)))
                            return "contentBytes: buffer expected";
                    return null;
                };

                /**
                 * Creates a DataExchangeProtocol message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {xyz.redtorch.pb.DataExchangeProtocol} DataExchangeProtocol
                 */
                DataExchangeProtocol.fromObject = function fromObject(object) {
                    if (object instanceof $root.xyz.redtorch.pb.DataExchangeProtocol)
                        return object;
                    var message = new $root.xyz.redtorch.pb.DataExchangeProtocol();
                    switch (object.contentType) {
                    case "ROUTINE":
                    case 0:
                        message.contentType = 0;
                        break;
                    case "COMPRESSED_LZ4":
                    case 1:
                        message.contentType = 1;
                        break;
                    }
                    switch (object.rpcType) {
                    case "CORE_RPC":
                    case 0:
                        message.rpcType = 0;
                        break;
                    }
                    if (object.timestamp != null)
                        if ($util.Long)
                            (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                        else if (typeof object.timestamp === "string")
                            message.timestamp = parseInt(object.timestamp, 10);
                        else if (typeof object.timestamp === "number")
                            message.timestamp = object.timestamp;
                        else if (typeof object.timestamp === "object")
                            message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
                    if (object.sourceNodeId != null)
                        message.sourceNodeId = object.sourceNodeId >>> 0;
                    if (object.targetNodeId != null)
                        message.targetNodeId = object.targetNodeId >>> 0;
                    if (object.rpcId != null)
                        message.rpcId = object.rpcId >>> 0;
                    if (object.reqId != null)
                        message.reqId = String(object.reqId);
                    if (object.contentBytes != null)
                        if (typeof object.contentBytes === "string")
                            $util.base64.decode(object.contentBytes, message.contentBytes = $util.newBuffer($util.base64.length(object.contentBytes)), 0);
                        else if (object.contentBytes.length)
                            message.contentBytes = object.contentBytes;
                    return message;
                };

                /**
                 * Creates a plain object from a DataExchangeProtocol message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @static
                 * @param {xyz.redtorch.pb.DataExchangeProtocol} message DataExchangeProtocol
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DataExchangeProtocol.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.contentType = options.enums === String ? "ROUTINE" : 0;
                        object.rpcType = options.enums === String ? "CORE_RPC" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.timestamp = options.longs === String ? "0" : 0;
                        object.sourceNodeId = 0;
                        object.targetNodeId = 0;
                        object.rpcId = 0;
                        object.reqId = "";
                        if (options.bytes === String)
                            object.contentBytes = "";
                        else {
                            object.contentBytes = [];
                            if (options.bytes !== Array)
                                object.contentBytes = $util.newBuffer(object.contentBytes);
                        }
                    }
                    if (message.contentType != null && message.hasOwnProperty("contentType"))
                        object.contentType = options.enums === String ? $root.xyz.redtorch.pb.DataExchangeProtocol.ContentType[message.contentType] : message.contentType;
                    if (message.rpcType != null && message.hasOwnProperty("rpcType"))
                        object.rpcType = options.enums === String ? $root.xyz.redtorch.pb.DataExchangeProtocol.RpcType[message.rpcType] : message.rpcType;
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        if (typeof message.timestamp === "number")
                            object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                        else
                            object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
                    if (message.sourceNodeId != null && message.hasOwnProperty("sourceNodeId"))
                        object.sourceNodeId = message.sourceNodeId;
                    if (message.targetNodeId != null && message.hasOwnProperty("targetNodeId"))
                        object.targetNodeId = message.targetNodeId;
                    if (message.rpcId != null && message.hasOwnProperty("rpcId"))
                        object.rpcId = message.rpcId;
                    if (message.reqId != null && message.hasOwnProperty("reqId"))
                        object.reqId = message.reqId;
                    if (message.contentBytes != null && message.hasOwnProperty("contentBytes"))
                        object.contentBytes = options.bytes === String ? $util.base64.encode(message.contentBytes, 0, message.contentBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.contentBytes) : message.contentBytes;
                    return object;
                };

                /**
                 * Converts this DataExchangeProtocol to JSON.
                 * @function toJSON
                 * @memberof xyz.redtorch.pb.DataExchangeProtocol
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DataExchangeProtocol.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * RpcType enum.
                 * @name xyz.redtorch.pb.DataExchangeProtocol.RpcType
                 * @enum {string}
                 * @property {number} CORE_RPC=0 CORE_RPC value
                 */
                DataExchangeProtocol.RpcType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "CORE_RPC"] = 0;
                    return values;
                })();

                /**
                 * ContentType enum.
                 * @name xyz.redtorch.pb.DataExchangeProtocol.ContentType
                 * @enum {string}
                 * @property {number} ROUTINE=0 ROUTINE value
                 * @property {number} COMPRESSED_LZ4=1 COMPRESSED_LZ4 value
                 */
                DataExchangeProtocol.ContentType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ROUTINE"] = 0;
                    values[valuesById[1] = "COMPRESSED_LZ4"] = 1;
                    return values;
                })();

                return DataExchangeProtocol;
            })();

            return pb;
        })();

        return redtorch;
    })();

    return xyz;
})();

module.exports = $root;
